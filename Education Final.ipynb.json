{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Education Project: Cleaning Data\n",
    "\n",
    "In this project, my goal is to pull together data on American high school education from multiple sources and clean and combine them in order to answer a few basic questions. In particular, I consider high school data from two large American cities of similar sizes, Milwaukee (population 595,351 by 2017 estimates) and Las Vegas (population 641,676 by 2017 estimates). The metropolitan areas of these two cities are considered by some measures to be the most segregated and least segregated metropolitan areas in the United States ([Brookings, 2018](https://www.brookings.edu/blog/the-avenue/2018/12/17/black-white-segregation-edges-downward-since-2000-census-shows/)) with segregation scores of 79.8 (out of 100) and 39.5, respectively.\n",
    "\n",
    "I occupy myself primarily with a few fairly simple questions.\n",
    "1. In comparing these two cities, is there a difference in the types of high schools that students attend? Here I consider the fraction of high school students attending regular public high schools, alternative high schools, charter high schools, private high schools, or some other type of school. (Note that homeschooled students do not appear in this analysis. According to the National Center for Education Statistics, roughly [3.8 percent](https://nces.ed.gov/programs/digest/d17/tables/dt17_206.10.asp) of American high school students are homeschooled.)\n",
    "2. For these two cities, how does the ethnic make up of the different types of high schools compare with the ethinc make up of each city as a whole? \n",
    "3. For these two cities, how does the access of minority students to advanced placement (AP) examinations differ from their access to AP exams nationally?\n",
    "4. In comparing these two cities, how do they differ with regards to average class size? How do they differ in regards to school financing?\n",
    "\n",
    "In order to answer these questions, I use data from several different sources.\n",
    "1. [The Civil Rights Data Collection](https://ocrdata.ed.gov/flex/Reports.aspx?type=school) which provides data on, among other things, school demographics, school finances, high school math and science classes, students with disabilities, etc for publicly funded (i.e. public and charter) schools. From here, I pulled the following data sets for both Milwaukee and Las Vegas:\n",
    "    - Advanced placement course and test taking\n",
    "    - Enrollment data\n",
    "    - School finance data -- state and local funds\n",
    "    - Teachers and high school counselors\n",
    "2. The National Center for Education Statistics (NCES) [common core of data](https://nces.ed.gov/ccd/schoolsearch/index.asp)(for publicly funded schools)**YOU NEED A BETTER DESCRIPTION HERE**\n",
    "3. The National Center for Education Statistics [private school universe survey](https://nces.ed.gov/surveys/pss/privateschoolsearch/index.asp) (for private schools). Note that this is the only real source of data that I have for private schools, which are, generally speaking, not included in the civil rights data collection data.\n",
    "4. The College Board [AP Data score summary](https://research.collegeboard.org/programs/ap/data) for 2011, 2013, and 2017, broken down by race and test.\n",
    "5. The United States Census Bureau Fact finder data for city populations by race (2017) for [Las Vegas](https://factfinder.census.gov/bkmk/table/1.0/en/ACS/17_5YR/B03002/1600000US3240000) and [Milwaukee](https://factfinder.census.gov/bkmk/table/1.0/en/ACS/17_5YR/B03002/1600000US5553000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from bs4 import BeautifulSoup \n",
    "import urllib.request\n",
    "from contextlib import closing\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "from collections import namedtuple\n",
    "from collections import Counter\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TO DUMP ONCE I'M SURE THAT I'VE TRANSFERRED ALL IMPORTANT INFORMATION\n",
    "\n",
    "So, to begin with, what do I want to do here? This project is supposed to be primarily a data cleaning project, which means that I want to pull together data from an array of different sources with the idea of creating a single data frame or collection of data frames that allow me to answer questions that I might have.\n",
    "\n",
    "### Inspiration ###\n",
    "\n",
    "I was inspired by an Brookings Institute article that I recently read referencing the [degree of segregation](https://www.brookings.edu/blog/the-avenue/2018/12/17/black-white-segregation-edges-downward-since-2000-census-shows/) in the 51 largest metropolitan areas in the United States. Here, Milwaukee was the most segregated with a segregation score of 79.8 while Las Vegas was the least segregated with a segregation score of 39.5. \n",
    "\n",
    "### Goal ###\n",
    "\n",
    "My goal is to explore the educational impact of more and less segregated metropolitan areas on the education of high school students. To wit, I want to compare the high schools in Milwaukee with those in Las Vegas, with the understanding that I'm talking about a quite small sample here. Since this is primarily a data cleaning exercise, I think that shouldn't be a problem.\n",
    "\n",
    "### Data ###\n",
    "\n",
    "The data that I'm using comes primarily from three sources:\n",
    "1. [The Civil Rights Data Collection](https://ocrdata.ed.gov/flex/Reports.aspx?type=school) which provides data on, among other things, school demographics, school finances, high school math and science classes, students with disabilities, etc for publicly funded (i.e. public and charter) schools. From here, I pulled the following data sets for both Milwaukee and Las Vegas:\n",
    "    - Advanced placement course and test taking\n",
    "    - High school completers\n",
    "    - High school math and science\n",
    "    - Enrollment data\n",
    "    - Students with disabilities by disability category\n",
    "    - School finance data -- state and local funds\n",
    "    - Teachers and high school counselors\n",
    "2. The National Center for Education Statistics [common core of data](https://nces.ed.gov/ccd/schoolsearch/index.asp)(for publicly funded schools)\n",
    "3. The National Center for Education Statistics [private school universe survey](https://nces.ed.gov/surveys/pss/privateschoolsearch/index.asp) (for private schools). Note that this is the only real source of data that I have for private schools, which are, generally speaking, not included in the civil rights data collection data.\n",
    "4. The National Center for Education Statistics [Status and Trends in the Education of Racial and Ethnic Groups](https://nces.ed.gov/programs/digest/d15/tables/dt15_203.50.asp)\n",
    "5. The National Center for Education Statistics [Public High School Graduation Rates] (https://nces.ed.gov/programs/digest/d17/tables/dt17_219.46.asp)\n",
    "6. The National Center for Education Statistics [High School Coursetaking](https://nces.ed.gov/programs/coe/indicator_cod.asp)\n",
    "7. The College Board [AP Data score summary](https://research.collegeboard.org/programs/ap/data) for 2011, 2013, and 2017, broken down by race and test.\n",
    "8. Information on [dropout](https://nces.ed.gov/pubs2016/2016117rev.pdf) rates and [here](http://www.pewresearch.org/fact-tank/2014/10/02/u-s-high-school-dropout-rate-reaches-record-low-driven-by-improvements-among-hispanics-blacks/)\n",
    "\n",
    "9. The United States Census Bureau Fact finder data for city populations by race (2017) for [Las Vegas](https://factfinder.census.gov/bkmk/table/1.0/en/ACS/17_5YR/B03002/1600000US3240000) and [Milwaukee](https://factfinder.census.gov/bkmk/table/1.0/en/ACS/17_5YR/B03002/1600000US5553000)\n",
    "\n",
    "One thing that I want to find, and haven't yet, at least not in easy form, is information about the types of the public/charter schools, in particular, which of them are alternative schools and which are not. This is, in fact, on the private school summary that I have, but it isn't anywhere on the public school data that I have.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1:  Is there a difference in the types of high schools that students attend in Milwaukee versus the types of high schools that students attend in Las Vegas?\n",
    "\n",
    "To begin with here, we read in the .csv files containing public and private school enrollment data for both Milwaukee and Las Vegas. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "vegas_public = pd.read_csv('Education_Project/Las_Vegas_public.csv')\n",
    "vegas_private = vegas_private = pd.read_csv('Education_Project/Las_Vegas_private.csv')\n",
    "\n",
    "milwaukee_public = pd.read_csv('Education_Project/Milwaukee_public.csv')\n",
    "milwaukee_private = pd.read_csv('Education_Project/Milwaukee_private.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, each of these dataframes has some excess information at the top that needs to be deleted, and the private school dataframes have some missing data. We begin by fixing this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Eliminating the excess information at the top of the public school dataframes, renaming the columns,\n",
    "# and resetting the indices\n",
    "\n",
    "vegas_public = vegas_public.iloc[5:].rename(columns = vegas_public.iloc[4]).reset_index(drop = True)\n",
    "milwaukee_public = milwaukee_public.iloc[5:].rename(columns = milwaukee_public.iloc[4]).reset_index(drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Eliminating the excess information at the top of the private school dataframes, renaming the columns,\n",
    "# resetting the indices, and filling any holes in high school enrollment numbers with zeros\n",
    "\n",
    "vegas_private = vegas_private.iloc[4:].rename(columns = vegas_private.iloc[3])\n",
    "vegas_private.reset_index(inplace = True, drop = True)\n",
    "\n",
    "vegas_private['PSS_ENROLL_9'] = vegas_private['PSS_ENROLL_9'].fillna(0)\n",
    "vegas_private['PSS_ENROLL_10'] = vegas_private['PSS_ENROLL_10'].fillna(0)\n",
    "vegas_private['PSS_ENROLL_11'] = vegas_private['PSS_ENROLL_11'].fillna(0)\n",
    "vegas_private['PSS_ENROLL_12'] = vegas_private['PSS_ENROLL_12'].fillna(0)\n",
    "\n",
    "milwaukee_private = milwaukee_private.iloc[4:].rename(columns = milwaukee_private.iloc[3])\n",
    "milwaukee_private.reset_index(inplace = True, drop = True)\n",
    "\n",
    "milwaukee_private['PSS_ENROLL_9'] = milwaukee_private['PSS_ENROLL_9'].fillna(0)\n",
    "milwaukee_private['PSS_ENROLL_10'] = milwaukee_private['PSS_ENROLL_10'].fillna(0)\n",
    "milwaukee_private['PSS_ENROLL_11'] = milwaukee_private['PSS_ENROLL_11'].fillna(0)\n",
    "milwaukee_private['PSS_ENROLL_12'] = milwaukee_private['PSS_ENROLL_12'].fillna(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we look at the data in the private school dataframes, we see that they include information about enrollment by grade as well as information about the type of school. This information is missing from the the public school dataframes, but is important. As a result, it needs to be added to the data that we have by looking at the individual school description pages for the public schools that we have. We use the functions ```school_type``` and ```grade_enrollment``` to add this information to the public school dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function: school_type \n",
    "\n",
    "Inputs: soup -- The Beautiful Soup output of a html document for a particular school\n",
    "\n",
    "Returns: a code for the type of school under consideration\n",
    "\"\"\"\n",
    "\n",
    "def school_type(soup):\n",
    "    \n",
    "    possible_school_types = {'Regular':'Regular school', 'Other/a':'Other/alternative school', \n",
    "                             'Special':'Special education school', 'Vocatio':'Vocational school'}\n",
    "    \n",
    "    index = soup.find('Type:')\n",
    "    key = soup[index+99:index+106]\n",
    "    \n",
    "    return possible_school_types[key]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function:\n",
    "\n",
    "Inputs:\n",
    "\n",
    "Returns:\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def grade_enrollment(soup,low_grade, high_grade):\n",
    "\n",
    "    start_index = soup.find('Enrollment by Grade:')\n",
    "    end_index = soup.find('Enrollment by Race')\n",
    "    \n",
    "    string_to_use = soup[start_index:end_index]\n",
    "    \n",
    "    while '<' in string_to_use:\n",
    "        i = 0\n",
    "        while string_to_use[i] != '<':\n",
    "            i = i+1\n",
    "        \n",
    "        j = i\n",
    "        while string_to_use[j] != '>':\n",
    "            j = j+1\n",
    "        \n",
    "        string_to_use = \"\".join([string_to_use[:i], string_to_use[j+1:]])\n",
    "        \n",
    "    strings = string_to_use.split()\n",
    "    \n",
    "    # Now, from here, I want to pull out the enrollments for high school...\n",
    "    \n",
    "    if low_grade == 'KG':\n",
    "        low_grade = 0\n",
    "    elif low_grade == 'PK':\n",
    "        low_grade = -1\n",
    "        \n",
    "    grade_count = {}\n",
    "    try:\n",
    "        for i in range(3, strings.index('Students')):\n",
    "            grade_count[strings[i]] = strings[strings.index('Students')+i-2]\n",
    "        for key in ['9','10','11','12']:\n",
    "            if key not in grade_count.keys():\n",
    "                grade_count[key] = 0\n",
    "    except: # there is no student data (new school, for example)\n",
    "        grade_count = {'9':0, '10':0, '11':0,'12':0}\n",
    "    \n",
    "    return grade_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function:\n",
    "\n",
    "Inputs:\n",
    "\n",
    "Returns:\n",
    "\"\"\"\n",
    "\n",
    "def modify_public(location,code,low_grade, high_grade):\n",
    "    \n",
    "    if location == 'vegas':\n",
    "        link = ('https://nces.ed.gov/ccd/schoolsearch/school_detail.asp?'\n",
    "        'Search=1&City=las+vegas&State=32&SchoolType=1&SchoolType=2&'\n",
    "        'SchoolType=3&SchoolType=4&SpecificSchlTypes=all&IncGrade=10&'\n",
    "        'LoGrade=-1&HiGrade=-1&SchoolPageNum=4&ID=')\n",
    "    else:\n",
    "        link = ('https://nces.ed.gov/ccd/schoolsearch/school_detail.asp?'\n",
    "                'Search=1&City=milwaukee&State=55&SchoolType=1&SchoolType=2&'\n",
    "                'SchoolType=3&SchoolType=4&SpecificSchlTypes=all&IncGrade=10&'\n",
    "                'LoGrade=-1&HiGrade=-1&ID=')\n",
    "    school_link = \"\".join([link,str(code)])\n",
    "    \n",
    "    with closing(urllib.request.urlopen(school_link)) as html_code:\n",
    "        soup = BeautifulSoup(html_code,'html.parser')\n",
    "        \n",
    "    soup = soup.prettify()\n",
    "\n",
    "    enrollment = grade_enrollment(soup,low_grade, high_grade)\n",
    "    type_of_school = school_type(soup)\n",
    "    \n",
    "    return type_of_school, enrollment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# adding type of school and high school enrollment for the Las Vegas Public Schools\n",
    "\n",
    "for i in range(len(vegas_public)):\n",
    "        \n",
    "    code = vegas_public.loc[i,'NCES School ID']\n",
    "    low_grade = vegas_public.loc[i,'Low Grade*']\n",
    "    high_grade = vegas_public.loc[i,'High Grade*']\n",
    "\n",
    "    type_of_school, grade_data = modify_public('vegas', code, low_grade, high_grade)\n",
    "\n",
    "    vegas_public.loc[i,'School Type'] = type_of_school\n",
    "    \n",
    "    vegas_public.loc[i, 'Grade 9'] = grade_data['9']\n",
    "    vegas_public.loc[i, 'Grade 10'] = grade_data['10']\n",
    "    vegas_public.loc[i, 'Grade 11'] = grade_data['11']\n",
    "    vegas_public.loc[i, 'Grade 12'] = grade_data['12']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# adding type of school and high school enrollment for the Milwaukee Public Schools\n",
    "\n",
    "for i in range(len(milwaukee_public)):\n",
    "    \n",
    "    code = milwaukee_public.loc[i,'NCES School ID']\n",
    "    low_grade = milwaukee_public.loc[i,'Low Grade*']\n",
    "    high_grade = milwaukee_public.loc[i,'High Grade*']\n",
    "\n",
    "    type_of_school, grade_data = modify_public('milwaukee', code, low_grade, high_grade)\n",
    "\n",
    "    milwaukee_public.loc[i,'School Type'] = type_of_school\n",
    "    \n",
    "    milwaukee_public.loc[i, 'Grade 9'] = grade_data['9']\n",
    "    milwaukee_public.loc[i, 'Grade 10'] = grade_data['10']\n",
    "    milwaukee_public.loc[i, 'Grade 11'] = grade_data['11']\n",
    "    milwaukee_public.loc[i, 'Grade 12'] = grade_data['12']\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we look at the sort of data available in each of these dataframes. We can do this most easily by looking at the columns. For the public school data we have:\n",
    "- NCES School ID: The identification number assigned to the school by the NCES. This is consistant across all of our data and can be used to align data from different sources.\n",
    "- State School ID: The identification number assigned to the state by the NCES. This will not be used here.   \n",
    "- NCES District ID: The district ID assigned by the NCES. This can be used to filter charter schools sponsered by outside agencies.\n",
    "- State District ID: The district ID assigned by the state. This will not be used here. \n",
    "- Low Grade\\*: The lowest grade taught at the school.\n",
    "- High Grade\\*: The highest grade taught at the school.  \n",
    "- School Name: The name of the school.\n",
    "- District: The name of the school district responsible for overseeing the school.  \n",
    "- County Name*: The name of the county in which the school is located. This will not be used here.   \n",
    "- Street Address: The street address of the school. This will not be used here.    \n",
    "- City: The city in which the school is located. Since our initial filtering in downloading the data was done by city, this will not be used here.    \n",
    "- State: The state in which the school is located. This will not be used here.\n",
    "- ZIP: The zip code of the school. Unused.\n",
    "- ZIP 4-digit: The zip code extension for the school. Unused.\n",
    "- Phone: The phone number of the school. Unused.\n",
    "- Locale Code\\*: A two digit code describing the setting of the school (urban, suburban, or rural).\n",
    "- Locale\\*: A description of the setting of the school.\n",
    "- Charter: Whether or not the school is a charter school.    \n",
    "- Magnet\\*: Whether or not the school is a magnet school.\n",
    "- Title I School\\*: Whether or not the school receives any Title I funding. Unused.  \n",
    "- Title 1 School Wide\\*: Whether or not the school receives schoolwide Title I funding. Unused.\n",
    "- Students\\*: The number of students enrolled in the school.\n",
    "- Teachers\\*: The number of teachers employed by the school.\n",
    "- Student Teacher Ratio\\*: The ratio of students to teachers. Note that this is not the same as class size.\n",
    "- Free Lunch\\*: The number of students eligible for free lunch.\n",
    "- Reduced Lunch\\*: The number of students eligible for reduced price lunch. Together with the data on free lunches, this is a good measure of the level of poverty in the student body.  \n",
    "- School Type: The type of school. Possibilities are regular school, other or alternative school, special education school, or vocational school\n",
    "- Grade 9: The number of students enrolled in 9th grade.\n",
    "- Grade 10: The number of students enrolled in 10th grade.\n",
    "- Grade 11: The number of students enrolled in 11th grade.\n",
    "- Grade 12: The number of students enrolled in 12th grade."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the private school dataframes, the information that we have available is as follows:\n",
    "- PSS_SCHOOL_ID: The identification number assigned to the private school by the NCES\n",
    "- PSS_INST: The name of the school.\n",
    "- LoGrade: The lowest grade taught at the school. Codes are as follows:\n",
    "    ⁃\t1 == all ungraded\n",
    "\t⁃\t2 == pk\n",
    "\t⁃\t3 == k\n",
    "\t⁃\t4 == transitional k\n",
    "\t⁃\t5 == transitional 1st\n",
    "\t⁃\t6 == first grade\n",
    "\t⁃\t7 == second grade\n",
    "\t⁃\t8 == third grade\n",
    "\t⁃\t9 == fourth grade\n",
    "\t⁃\t10 == fifth grade\n",
    "\t⁃\t11 == sixth grade\n",
    "\t⁃\t12 == seventh grade\n",
    "\t⁃\t13 == eighth grade\n",
    "\t⁃\t14 == ninth grade\n",
    "\t⁃\t15 == tenth grade\n",
    "\t⁃\t16 == eleventh grade\n",
    "\t⁃\t17 == twelfth grade\n",
    "- HiGrade: The highest grade taught at the school. Codes are the same as for LoGrade.\n",
    "- PSS_ADDRESS: The street address of the school. This will not be used here.\n",
    "- PSS_CITY: The city in which the school is located. This will not be used here.\n",
    "- PSS_COUNTY_NO: A numerical code assigned to the county in which the school is located. This will not be used here.\n",
    "- PSS_COUNTY_FIPS: The code assigned to the county by the Federal Information Processing Standard (FIPS). This will not be used here.\n",
    "- PSS_STABB: The USPS state abbreviation. This will not be used here.\n",
    "- PSS_FIPS: The code assinged to the state by FIPS. This will not be used here.\n",
    "- PSS_ZIP5: The zip code of the school address. This will not be used here.\n",
    "- PSS_PHONE: The school phone number. This will not be used here.\n",
    "- PSS_SCH_DAYS: The number of instructional days that the school is in session.\n",
    "- PSS_STU_DAY_HRS: The number of instructional hours in the day.\n",
    "- PSS_LIBRARY: A code indicating whether or not the school has a library on site. This will not be used here.\n",
    "- PSS_ENROLL_UG: The number of ungraded students enrolled in the school. This will not be used here.\n",
    "- PSS_ENROLL_PK: The number of students enrolled in preschool/pre-kindergarten. This will not be used here.\n",
    "- PSS_ENROLL_K: The number of students enrolled in kindergarten. This will not be used here.\n",
    "- PSS_ENROLL_1: The number of students enrolled in first grade. This will not be used here.\n",
    "- PSS_ENROLL_2: The number of students enrolled in second grade. This will not be used here.\n",
    "- PSS_ENROLL_3: The number of students enrolled in third grade. This will not be used here.\n",
    "- PSS_ENROLL_4: The number of students enrolled in fourth grade. This will not be used here.\n",
    "- PSS_ENROLL_5: The number of students enrolled in fifth grade. This will not be used here.\n",
    "- PSS_ENROLL_6: The number of students enrolled in sixth grade. This will not be used here.\n",
    "- PSS_ENROLL_7: The number of students enrolled in seventh grade. This will not be used here.\n",
    "- PSS_ENROLL_8: The number of students enrolled in eighth grade.\n",
    "- PSS_ENROLL_9: The number of students enrolled in ninth grade.\n",
    "- PSS_ENROLL_10: The number of students enrolled in tenth grade.\n",
    "- PSS_ENROLL_11: The number of students enrolled in eleventh grade.\n",
    "- PSS_ENROLL_12: The number of students enrolled in twelth grade.\n",
    "- PSS_ENROLL_T: The total number of enrolled students.\n",
    "- PSS_ENROLL_TK12: The total number of enrolled students in kindergarten through twelth grade.\n",
    "- PSS_RACE_AI: The number of enrolled Native American and Alaskan Native students.\n",
    "- PSS_RACE_AS: The number of enrolled Asian students.\n",
    "- PSS_RACE_H: The number of enrolled Hispanic students.\n",
    "- PSS_RACE_B: The number of enrolled Black students.\n",
    "- PSS_RACE_W: The number of enrolled White students.\n",
    "- PSS_RACE_P: The number of enrolled Hawaiian and Pacific Islander students.\n",
    "- PSS_RACE_2: The number of multiracial students enrolled.\n",
    "- PSS_FTE_TEACH: The number of teachers (full time equivalent) employeed by the school.\n",
    "- PSS_LOCALE: The type of community in which the school is located.\n",
    "- PSS_COED: Whether the school is coeducational, all male, or all female. This will not be used here.\n",
    "- PSS_TYPE: The school program type or emphasis. This will not be used here.\n",
    "- PSS_LEVEL: Whether the school is an elementary school, a secondary school, or both. This will not be used here.\n",
    "- PSS_RELIG: The school's religious affiliation or orientation (or lack thereof). This will not be used here.\n",
    "- PSS_COMM_TYPE: A numerical version of the locale.\n",
    "- PSS_INDIAN_PCT: The percentage of enrolled students who are Native American or Alaska Native. This will not be used here.\n",
    "- PSS_ASIAN_PCT: The percentage of enrolled students who are Asian. This will not be used here.\n",
    "- PSS_HISP_PCT: The percentage of enrolled students who are Hispanic. This will not be used here.\n",
    "- PSS_BLACK_PCT: The percentage of enrolled students who are Black. This will not be used here.\n",
    "- PSS_WHITE_PCT: The percentage of enrolled students who are White. This will not be used here.\n",
    "- P_PACISL_PCT: The percentage of enrolled students who are Hawaiian or Pacific Islander. This will not be used here.\n",
    "- P_TWOMORE_PCT: The percentage of enrolled students who are multiracial. This will not be used here.\n",
    "- PSS_STDTCH_RT: The student teacher ratio. This will not be used here.\n",
    "- PSS_ORIENT: A numerical code indictating the religious orientation of the school. This will not be used here.\n",
    "- PSS_COUNTY_NAME: The name of the county in which the school is located. This will not be used here.\n",
    "- PSS_ASSOC_1: The first association with which the school has an affiliation. This will not be used here.\n",
    "- PSS_ASSOC_2: The second association with which the school has an affiliation. This will not be used here.\n",
    "- PSS_ASSOC_3: The third association with which the school has an affiliation. This will not be used here.\n",
    "- PSS_ASSOC_4: The fourth association with which the school has an affiliation. This will not be used here.\n",
    "- PSS_ASSOC_5: The fifth association with which the school has an affiliation. This will not be used here.\n",
    "- PSS_ASSOC_6: The sixth association with which the school has an affiliation. This will not be used here.\n",
    "- PSS_ASSOC_7: The seventh association with which the school has an affiliation. This will not be used here.\n",
    "- PSS_ASSOC_8: The eighth association with which the school has an affiliation. This will not be used here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1 restated: \n",
    "In comparing these two cities, is there a difference in the types of high schools that students attend? Here I consider the fraction of high school students attending regular public high schools, alternative high schools, charter high schools, private high schools, or some other type of school.\n",
    "\n",
    "Here, we begin by removing unnecessary data from our four dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_public = milwaukee_public[[u'NCES School ID', u'NCES District ID', u'Low Grade*', u'High Grade*',\n",
    "                                     u'School Name', u'District', u'Locale Code*', u'Locale*', u'Charter',\n",
    "                                     u'Magnet*', u'Students*', u'Teachers*', u'Student Teacher Ratio*', \n",
    "                                     u'Free Lunch*', u'Reduced Lunch*', u'School Type', u'Grade 9', u'Grade 10',\n",
    "                                     u'Grade 11', u'Grade 12']].copy()\n",
    "\n",
    "vegas_public = vegas_public[[u'NCES School ID', u'NCES District ID', u'Low Grade*', u'High Grade*',\n",
    "                             u'School Name', u'District', u'Locale Code*', u'Locale*', u'Charter',\n",
    "                             u'Magnet*', u'Students*', u'Teachers*', u'Student Teacher Ratio*', \n",
    "                             u'Free Lunch*', u'Reduced Lunch*', u'School Type', u'Grade 9', u'Grade 10',\n",
    "                             u'Grade 11', u'Grade 12']].copy()\n",
    "\n",
    "milwaukee_private = milwaukee_private[[u'PSS_SCHOOL_ID', u'PSS_INST', u'LoGrade', u'HiGrade', u'PSS_SCH_DAYS', \n",
    "                                       u'PSS_STU_DAY_HRS', u'PSS_ENROLL_9', u'PSS_ENROLL_10', \n",
    "                                       u'PSS_ENROLL_11', u'PSS_ENROLL_12', u'PSS_ENROLL_T', u'PSS_ENROLL_TK12', \n",
    "                                       u'PSS_RACE_AI', u'PSS_RACE_AS', u'PSS_RACE_H', u'PSS_RACE_B', u'PSS_RACE_W',\n",
    "                                       u'PSS_RACE_P', u'PSS_RACE_2', u'PSS_FTE_TEACH', u'PSS_LOCALE',\n",
    "                                       u'PSS_COMM_TYPE']].copy()\n",
    "\n",
    "vegas_private = vegas_private[[u'PSS_SCHOOL_ID', u'PSS_INST', u'LoGrade', u'HiGrade', u'PSS_SCH_DAYS', \n",
    "                                       u'PSS_STU_DAY_HRS', u'PSS_ENROLL_9', u'PSS_ENROLL_10', \n",
    "                                       u'PSS_ENROLL_11', u'PSS_ENROLL_12', u'PSS_ENROLL_T', u'PSS_ENROLL_TK12', \n",
    "                                       u'PSS_RACE_AI', u'PSS_RACE_AS', u'PSS_RACE_H', u'PSS_RACE_B', u'PSS_RACE_W',\n",
    "                                       u'PSS_RACE_P', u'PSS_RACE_2', u'PSS_FTE_TEACH', u'PSS_LOCALE',\n",
    "                                       u'PSS_COMM_TYPE']].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that I have the data that I want, including high school enrollment data and school types for the publicly funded schools, I want to produce a dataframe for each city that summarizes this data. \n",
    "\n",
    "I'm envisioning a table like the following for each of the two cities:\n",
    "\n",
    "|School|Charter|Alternative|Private|Regular Public|Other|Enrollment (grades 9-12)|\n",
    "|-----|---|----|----|----|----|---|\n",
    "|school ID| y/n |y/n|y/n|y/n|y/n|count|\n",
    "|.|.|.|.|.|.|.|.|\n",
    "|.|.|.|.|.|.|.|.|\n",
    "|.|.|.|.|.|.|.|.|\n",
    "|Totals|# charters|||||Enrolled charter|\n",
    "|Totals||# altern||||Enrolled altern|\n",
    "|Totals|||#private|||Enrolled private|\n",
    "|Totals||||# public||Enrolled public|\n",
    "|Totals|||||# other|Enrolled other|\n",
    "\n",
    "From here, calculating percentages is a triviality. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function:\n",
    "\n",
    "Inputs:\n",
    "\n",
    "Returns:\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def schools_by_type(city):\n",
    "    \n",
    "    school_enrollments = pd.DataFrame(columns = ['School', 'Charter', 'Alternative','Private', 'Public',\n",
    "                                                 'Other', 'Grade 9', 'Grade 10', 'Grade 11', 'Grade 12',\n",
    "                                                 'Total Enrollment'])\n",
    "    \n",
    "    if city == 'Milwaukee':\n",
    "        public = milwaukee_public\n",
    "        private = milwaukee_private\n",
    "    else:\n",
    "        public = vegas_public\n",
    "        private = vegas_private\n",
    "        \n",
    "    for i in range(len(public)):\n",
    "        school_enrollments.loc[i, 'School'] = public.loc[i,'NCES School ID']\n",
    "        school_enrollments.loc[i,'Charter'] = public.loc[i, 'Charter']\n",
    "        school_enrollments.loc[i,'Private'] = 'N'\n",
    "        if public.loc[i,'Charter'] in ['N','No','NO']:\n",
    "            if public.loc[i,'School Type'] == 'Regular school':\n",
    "                school_enrollments.loc[i,'Alternative'] = 'N'\n",
    "                school_enrollments.loc[i, 'Public'] = 'Y'\n",
    "                school_enrollments.loc[i, 'Other'] = 'N'\n",
    "            elif public.loc[i,'School Type'] == 'Other/alternative school':\n",
    "                school_enrollments.loc[i,'Alternative'] = 'Y'\n",
    "                school_enrollments.loc[i, 'Public'] = 'N'\n",
    "                school_enrollments.loc[i, 'Other'] = 'N'\n",
    "            else:\n",
    "                school_enrollments.loc[i,'Alternative'] = 'N'\n",
    "                school_enrollments.loc[i, 'Public'] = 'N'\n",
    "                school_enrollments.loc[i, 'Other'] = 'Y'\n",
    "        else:\n",
    "            school_enrollments.loc[i,'Alternative'] = 'N'\n",
    "            school_enrollments.loc[i, 'Public'] = 'N'\n",
    "            school_enrollments.loc[i, 'Other'] = 'N'\n",
    "\n",
    "        try:\n",
    "            school_enrollments.loc[i, 'Grade 9'] = int(public.loc[i,'Grade 9'])\n",
    "        except: # There is no enrollment figure given\n",
    "            school_enrollments.loc[i,'Grade 9'] = 0\n",
    "\n",
    "        try:\n",
    "            school_enrollments.loc[i, 'Grade 10'] = int(public.loc[i,'Grade 10'])\n",
    "        except: # There is no enrollment figure given\n",
    "            school_enrollments.loc[i,'Grade 10'] = 0\n",
    "\n",
    "        try:\n",
    "            school_enrollments.loc[i, 'Grade 11'] = int(public.loc[i,'Grade 11'])\n",
    "        except: # There is no enrollment figure given\n",
    "            school_enrollments.loc[i,'Grade 11'] = 0\n",
    "\n",
    "        try:\n",
    "            school_enrollments.loc[i, 'Grade 12'] = int(public.loc[i,'Grade 12'])\n",
    "        except: # There is no enrollment figure given\n",
    "            school_enrollments.loc[i,'Grade 12'] = 0\n",
    "\n",
    "        school_enrollments.loc[i,'Total Enrollment'] = (school_enrollments.loc[i,'Grade 9'] + \n",
    "                                                        school_enrollments.loc[i,'Grade 10'] +\n",
    "                                                        school_enrollments.loc[i,'Grade 11'] +\n",
    "                                                        school_enrollments.loc[i,'Grade 12'])\n",
    "\n",
    "    \n",
    "    pub = len(public)\n",
    "\n",
    "    for k in range(len(private)):\n",
    "        school_enrollments.loc[k+pub, 'School'] = private.loc[k,'PSS_SCHOOL_ID']\n",
    "        school_enrollments.loc[k+pub, 'Charter'] = 'N'\n",
    "        school_enrollments.loc[k+pub, 'Alternative'] = 'N'\n",
    "        school_enrollments.loc[k+pub,'Private'] = 'Y'\n",
    "        school_enrollments.loc[k+pub,'Public'] = 'N'\n",
    "        school_enrollments.loc[k+pub,'Other'] = 'N'\n",
    "        school_enrollments.loc[k+pub,'Grade 9'] = int(private.loc[k,'PSS_ENROLL_9'])\n",
    "        school_enrollments.loc[k+pub,'Grade 10'] = int(private.loc[k,'PSS_ENROLL_10'])\n",
    "        school_enrollments.loc[k+pub,'Grade 11'] = int(private.loc[k,'PSS_ENROLL_11'])\n",
    "        school_enrollments.loc[k+pub,'Grade 12'] = int(private.loc[k,'PSS_ENROLL_12'])\n",
    "        school_enrollments.loc[k+pub,'Total Enrollment'] = (int(private.loc[k,'PSS_ENROLL_9']) + \n",
    "                                                        int(private.loc[k,'PSS_ENROLL_10']) + \n",
    "                                                        int(private.loc[k,'PSS_ENROLL_11']) + \n",
    "                                                        int(private.loc[k,'PSS_ENROLL_12']))    \n",
    "    \n",
    "    \n",
    "    return school_enrollments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_school_enrollments = schools_by_type(\"Milwaukee\")\n",
    "vegas_school_enrollments = schools_by_type(\"Vegas\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>School</th>\n",
       "      <th>Charter</th>\n",
       "      <th>Alternative</th>\n",
       "      <th>Private</th>\n",
       "      <th>Public</th>\n",
       "      <th>Other</th>\n",
       "      <th>Grade 9</th>\n",
       "      <th>Grade 10</th>\n",
       "      <th>Grade 11</th>\n",
       "      <th>Grade 12</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>550960002603</td>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>65</td>\n",
       "      <td>52</td>\n",
       "      <td>49</td>\n",
       "      <td>34</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>550960000792</td>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>30</td>\n",
       "      <td>21</td>\n",
       "      <td>38</td>\n",
       "      <td>19</td>\n",
       "      <td>108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>550960002782</td>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>100</td>\n",
       "      <td>84</td>\n",
       "      <td>96</td>\n",
       "      <td>91</td>\n",
       "      <td>371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>550960002707</td>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>17</td>\n",
       "      <td>19</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>550960001127</td>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>309</td>\n",
       "      <td>204</td>\n",
       "      <td>174</td>\n",
       "      <td>133</td>\n",
       "      <td>820</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         School Charter Alternative Private Public Other Grade 9 Grade 10  \\\n",
       "0  550960002603     Yes           N       N      N     N      65       52   \n",
       "1  550960000792      No           Y       N      N     N      30       21   \n",
       "2  550960002782      No           N       N      Y     N     100       84   \n",
       "3  550960002707      No           Y       N      N     N      17       19   \n",
       "4  550960001127      No           N       N      Y     N     309      204   \n",
       "\n",
       "  Grade 11 Grade 12 Total Enrollment  \n",
       "0       49       34              200  \n",
       "1       38       19              108  \n",
       "2       96       91              371  \n",
       "3       11        4               51  \n",
       "4      174      133              820  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_school_enrollments.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function:\n",
    "\n",
    "Inputs:\n",
    "\n",
    "Returns:\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def enrollments_by_type(city):\n",
    "    \n",
    "    type_enrollments = pd.DataFrame(0,columns = ['Grade 9', 'Grade 10', 'Grade 11', 'Grade 12', 'Total Enrollment'],\n",
    "                     index = ['Charter', 'Alternative', 'Regular Public', 'Total Public', 'Private', 'Total All Types'])\n",
    "    \n",
    "    if city == 'Milwaukee':\n",
    "        school_enrollments = milwaukee_school_enrollments\n",
    "    else:\n",
    "        school_enrollments = vegas_school_enrollments\n",
    "        \n",
    "    for i in range(len(school_enrollments)):\n",
    "        if school_enrollments.loc[i,'Charter'] in ['Yes', 'yes', 'Y']:\n",
    "            type_enrollments.loc['Charter', 'Grade 9'] += school_enrollments.loc[i,'Grade 9']\n",
    "            type_enrollments.loc['Charter', 'Grade 10'] += school_enrollments.loc[i,'Grade 10']\n",
    "            type_enrollments.loc['Charter', 'Grade 11'] += school_enrollments.loc[i,'Grade 11']\n",
    "            type_enrollments.loc['Charter', 'Grade 12'] += school_enrollments.loc[i,'Grade 12']\n",
    "            type_enrollments.loc['Charter', 'Total Enrollment'] += school_enrollments.loc[i,'Total Enrollment']\n",
    "        elif school_enrollments.loc[i,'Alternative'] == 'Y':\n",
    "            type_enrollments.loc['Alternative', 'Grade 9'] += school_enrollments.loc[i,'Grade 9']\n",
    "            type_enrollments.loc['Alternative', 'Grade 10'] += school_enrollments.loc[i,'Grade 10']\n",
    "            type_enrollments.loc['Alternative', 'Grade 11'] += school_enrollments.loc[i,'Grade 11']\n",
    "            type_enrollments.loc['Alternative', 'Grade 12'] += school_enrollments.loc[i,'Grade 12']\n",
    "            type_enrollments.loc['Alternative', 'Total Enrollment'] += school_enrollments.loc[i,'Total Enrollment']\n",
    "        elif school_enrollments.loc[i,'Public'] == 'Y':\n",
    "            type_enrollments.loc['Regular Public', 'Grade 9'] += school_enrollments.loc[i,'Grade 9']\n",
    "            type_enrollments.loc['Regular Public', 'Grade 10'] += school_enrollments.loc[i,'Grade 10']\n",
    "            type_enrollments.loc['Regular Public', 'Grade 11'] += school_enrollments.loc[i,'Grade 11']\n",
    "            type_enrollments.loc['Regular Public', 'Grade 12'] += school_enrollments.loc[i,'Grade 12']\n",
    "            type_enrollments.loc['Regular Public', 'Total Enrollment'] += school_enrollments.loc[i,'Total Enrollment']\n",
    "        else:\n",
    "            type_enrollments.loc['Private', 'Grade 9'] += school_enrollments.loc[i,'Grade 9']\n",
    "            type_enrollments.loc['Private', 'Grade 10'] += school_enrollments.loc[i,'Grade 10']\n",
    "            type_enrollments.loc['Private', 'Grade 11'] += school_enrollments.loc[i,'Grade 11']\n",
    "            type_enrollments.loc['Private', 'Grade 12'] += school_enrollments.loc[i,'Grade 12']\n",
    "            type_enrollments.loc['Private', 'Total Enrollment'] += school_enrollments.loc[i,'Total Enrollment']\n",
    "\n",
    "    type_enrollments.loc['Total Public', 'Grade 9'] = (type_enrollments.loc['Charter', 'Grade 9'] + \n",
    "                                                       type_enrollments.loc['Alternative', 'Grade 9'] +\n",
    "                                                       type_enrollments.loc['Regular Public', 'Grade 9'])\n",
    "    type_enrollments.loc['Total Public', 'Grade 10'] = (type_enrollments.loc['Charter', 'Grade 10'] + \n",
    "                                                       type_enrollments.loc['Alternative', 'Grade 10'] +\n",
    "                                                       type_enrollments.loc['Regular Public', 'Grade 10'])\n",
    "    type_enrollments.loc['Total Public', 'Grade 11'] = (type_enrollments.loc['Charter', 'Grade 11'] + \n",
    "                                                       type_enrollments.loc['Alternative', 'Grade 11'] +\n",
    "                                                       type_enrollments.loc['Regular Public', 'Grade 11'])\n",
    "    type_enrollments.loc['Total Public', 'Grade 12'] = (type_enrollments.loc['Charter', 'Grade 12'] + \n",
    "                                                       type_enrollments.loc['Alternative', 'Grade 12'] +\n",
    "                                                       type_enrollments.loc['Regular Public', 'Grade 12'])\n",
    "    type_enrollments.loc['Total Public', 'Total Enrollment'] = (type_enrollments.loc['Charter', 'Total Enrollment'] + \n",
    "                                                       type_enrollments.loc['Alternative', 'Total Enrollment'] +\n",
    "                                                       type_enrollments.loc['Regular Public', 'Total Enrollment'])\n",
    "    \n",
    "    type_enrollments.loc['Total All Types', 'Grade 9'] = (type_enrollments.loc['Total Public', 'Grade 9'] +\n",
    "                                                          type_enrollments.loc['Private','Grade 9'])\n",
    "    type_enrollments.loc['Total All Types', 'Grade 10'] = (type_enrollments.loc['Total Public', 'Grade 10'] +\n",
    "                                                          type_enrollments.loc['Private','Grade 10'])\n",
    "    type_enrollments.loc['Total All Types', 'Grade 11'] = (type_enrollments.loc['Total Public', 'Grade 11'] +\n",
    "                                                          type_enrollments.loc['Private','Grade 11'])\n",
    "    type_enrollments.loc['Total All Types', 'Grade 12'] = (type_enrollments.loc['Total Public', 'Grade 12'] +\n",
    "                                                          type_enrollments.loc['Private','Grade 12'])\n",
    "    type_enrollments.loc['Total All Types', 'Total Enrollment'] = (\n",
    "                                                          type_enrollments.loc['Total Public', 'Total Enrollment'] +\n",
    "                                                          type_enrollments.loc['Private','Total Enrollment'])\n",
    "\n",
    "            \n",
    "    return type_enrollments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_enrollments_by_type = enrollments_by_type('Milwaukee')\n",
    "vegas_enrollments_by_type = enrollments_by_type('Vegas')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our enrollment dataframes appear below. While they are difficult to compare directly, there appears to be something very strange going on. To be more precise, while the sizes of the populations of Milwaukee and Las Vegas are very similar (595 351 vs 648 224 based on 2017 estimates), the sizes of the high school populations given here are rather different. Based on the data shown here, roughly 5% of the Milwaukee population is enrolled in high school (which seems reasonable assuming a life expectancy of around 80 years). On the other hand, according to this data, nearly 14% of the Las Vegas population is enrolled in high school, which would be rather striking if it were true.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Grade 9</th>\n",
       "      <th>Grade 10</th>\n",
       "      <th>Grade 11</th>\n",
       "      <th>Grade 12</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>1006</td>\n",
       "      <td>662</td>\n",
       "      <td>619</td>\n",
       "      <td>481</td>\n",
       "      <td>2768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>256</td>\n",
       "      <td>290</td>\n",
       "      <td>447</td>\n",
       "      <td>264</td>\n",
       "      <td>1257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Regular Public</th>\n",
       "      <td>5675</td>\n",
       "      <td>4215</td>\n",
       "      <td>4158</td>\n",
       "      <td>3641</td>\n",
       "      <td>17689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Public</th>\n",
       "      <td>6937</td>\n",
       "      <td>5167</td>\n",
       "      <td>5224</td>\n",
       "      <td>4386</td>\n",
       "      <td>21714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>2310</td>\n",
       "      <td>2069</td>\n",
       "      <td>1873</td>\n",
       "      <td>1678</td>\n",
       "      <td>7930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total All Types</th>\n",
       "      <td>9247</td>\n",
       "      <td>7236</td>\n",
       "      <td>7097</td>\n",
       "      <td>6064</td>\n",
       "      <td>29644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Grade 9  Grade 10  Grade 11  Grade 12  Total Enrollment\n",
       "Charter             1006       662       619       481              2768\n",
       "Alternative          256       290       447       264              1257\n",
       "Regular Public      5675      4215      4158      3641             17689\n",
       "Total Public        6937      5167      5224      4386             21714\n",
       "Private             2310      2069      1873      1678              7930\n",
       "Total All Types     9247      7236      7097      6064             29644"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_enrollments_by_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Grade 9</th>\n",
       "      <th>Grade 10</th>\n",
       "      <th>Grade 11</th>\n",
       "      <th>Grade 12</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>1139</td>\n",
       "      <td>1133</td>\n",
       "      <td>1167</td>\n",
       "      <td>986</td>\n",
       "      <td>4425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>113</td>\n",
       "      <td>142</td>\n",
       "      <td>297</td>\n",
       "      <td>851</td>\n",
       "      <td>1403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Regular Public</th>\n",
       "      <td>20650</td>\n",
       "      <td>20645</td>\n",
       "      <td>19528</td>\n",
       "      <td>18000</td>\n",
       "      <td>78823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Public</th>\n",
       "      <td>21902</td>\n",
       "      <td>21920</td>\n",
       "      <td>20992</td>\n",
       "      <td>19837</td>\n",
       "      <td>84651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>815</td>\n",
       "      <td>824</td>\n",
       "      <td>751</td>\n",
       "      <td>701</td>\n",
       "      <td>3091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total All Types</th>\n",
       "      <td>22717</td>\n",
       "      <td>22744</td>\n",
       "      <td>21743</td>\n",
       "      <td>20538</td>\n",
       "      <td>87742</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Grade 9  Grade 10  Grade 11  Grade 12  Total Enrollment\n",
       "Charter             1139      1133      1167       986              4425\n",
       "Alternative          113       142       297       851              1403\n",
       "Regular Public     20650     20645     19528     18000             78823\n",
       "Total Public       21902     21920     20992     19837             84651\n",
       "Private              815       824       751       701              3091\n",
       "Total All Types    22717     22744     21743     20538             87742"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_enrollments_by_type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One possible explanation here is that the Las Vegas data includes high schools that are not actually located in the city of Las Vegas, perhaps due to vagaries of postal codes, or the way that the school district is set up. Looking at the ```Locale\\*``` column in ```vegas_public``` (below), we see that, while Las Vegas itself meets the critera to be considered a large city (specifically, that its population is greater than 500,000 people), a significant fraction of the listed schools have ```Locale\\*``` values of either ```Suburb: Large``` or ```City: Midsize```. For this reason, our next step is to filter out any school whose ```Locale Code\\*``` value is not equal to 11 (corresponding to a large city).\n",
    "\n",
    "Note: Although this seems to be less of an issue for our Milwaukee school data, for consistancy we will apply the same filtering to ```milwaukee_public``` and ```milwaukee_private``` as we do to ```vegas_public``` and ```vegas_private```."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NCES School ID</th>\n",
       "      <th>NCES District ID</th>\n",
       "      <th>Low Grade*</th>\n",
       "      <th>High Grade*</th>\n",
       "      <th>School Name</th>\n",
       "      <th>District</th>\n",
       "      <th>Locale Code*</th>\n",
       "      <th>Locale*</th>\n",
       "      <th>Charter</th>\n",
       "      <th>Magnet*</th>\n",
       "      <th>Students*</th>\n",
       "      <th>Teachers*</th>\n",
       "      <th>Student Teacher Ratio*</th>\n",
       "      <th>Free Lunch*</th>\n",
       "      <th>Reduced Lunch*</th>\n",
       "      <th>School Type</th>\n",
       "      <th>Grade 9</th>\n",
       "      <th>Grade 10</th>\n",
       "      <th>Grade 11</th>\n",
       "      <th>Grade 12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>320006000419</td>\n",
       "      <td>3200060</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>Advanced Technologies Academy</td>\n",
       "      <td>CLARK COUNTY SCHOOL DISTRICT</td>\n",
       "      <td>11</td>\n",
       "      <td>City: Large</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1086</td>\n",
       "      <td>55</td>\n",
       "      <td>19.7</td>\n",
       "      <td>378</td>\n",
       "      <td>147</td>\n",
       "      <td>Regular school</td>\n",
       "      <td>294</td>\n",
       "      <td>299</td>\n",
       "      <td>244</td>\n",
       "      <td>249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>320000100848</td>\n",
       "      <td>3200001</td>\n",
       "      <td>KG</td>\n",
       "      <td>12</td>\n",
       "      <td>American Preparatory Academy LV</td>\n",
       "      <td>STATE-SPONSORED CHARTER SCHOOLS</td>\n",
       "      <td>21</td>\n",
       "      <td>Suburb: Large</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>1434</td>\n",
       "      <td>19.5</td>\n",
       "      <td>73.5</td>\n",
       "      <td>24</td>\n",
       "      <td>15</td>\n",
       "      <td>Regular school</td>\n",
       "      <td>58</td>\n",
       "      <td>55</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>320006000661</td>\n",
       "      <td>3200060</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>Arbor View High School</td>\n",
       "      <td>CLARK COUNTY SCHOOL DISTRICT</td>\n",
       "      <td>11</td>\n",
       "      <td>City: Large</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3091</td>\n",
       "      <td>121</td>\n",
       "      <td>25.5</td>\n",
       "      <td>808</td>\n",
       "      <td>207</td>\n",
       "      <td>Regular school</td>\n",
       "      <td>764</td>\n",
       "      <td>823</td>\n",
       "      <td>781</td>\n",
       "      <td>710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>320000100751</td>\n",
       "      <td>3200001</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>Beacon Academy of Nevada</td>\n",
       "      <td>STATE-SPONSORED CHARTER SCHOOLS</td>\n",
       "      <td>21</td>\n",
       "      <td>Suburb: Large</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>402</td>\n",
       "      <td>11.92</td>\n",
       "      <td>33.7</td>\n",
       "      <td>176</td>\n",
       "      <td>27</td>\n",
       "      <td>Regular school</td>\n",
       "      <td>23</td>\n",
       "      <td>73</td>\n",
       "      <td>123</td>\n",
       "      <td>183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>320006000011</td>\n",
       "      <td>3200060</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>Bonanza High School</td>\n",
       "      <td>CLARK COUNTY SCHOOL DISTRICT</td>\n",
       "      <td>11</td>\n",
       "      <td>City: Large</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2072</td>\n",
       "      <td>83</td>\n",
       "      <td>25</td>\n",
       "      <td>1222</td>\n",
       "      <td>236</td>\n",
       "      <td>Regular school</td>\n",
       "      <td>488</td>\n",
       "      <td>595</td>\n",
       "      <td>517</td>\n",
       "      <td>452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>320006000313</td>\n",
       "      <td>3200060</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>Burk Horizon Southwest Sunset HS</td>\n",
       "      <td>CLARK COUNTY SCHOOL DISTRICT</td>\n",
       "      <td>12</td>\n",
       "      <td>City: Midsize</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>118</td>\n",
       "      <td>14</td>\n",
       "      <td>8.4</td>\n",
       "      <td>109</td>\n",
       "      <td>9</td>\n",
       "      <td>Other/alternative school</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>23</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>320006000567</td>\n",
       "      <td>3200060</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>Canyon Springs High School and the Leadership ...</td>\n",
       "      <td>CLARK COUNTY SCHOOL DISTRICT</td>\n",
       "      <td>21</td>\n",
       "      <td>Suburb: Large</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2923</td>\n",
       "      <td>116</td>\n",
       "      <td>25.2</td>\n",
       "      <td>2237</td>\n",
       "      <td>231</td>\n",
       "      <td>Regular school</td>\n",
       "      <td>780</td>\n",
       "      <td>801</td>\n",
       "      <td>723</td>\n",
       "      <td>609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>320006000493</td>\n",
       "      <td>3200060</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>Centennial High School</td>\n",
       "      <td>CLARK COUNTY SCHOOL DISTRICT</td>\n",
       "      <td>11</td>\n",
       "      <td>City: Large</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3257</td>\n",
       "      <td>120</td>\n",
       "      <td>27.1</td>\n",
       "      <td>3011</td>\n",
       "      <td>246</td>\n",
       "      <td>Regular school</td>\n",
       "      <td>835</td>\n",
       "      <td>778</td>\n",
       "      <td>849</td>\n",
       "      <td>776</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  NCES School ID NCES District ID Low Grade* High Grade*  \\\n",
       "0   320006000419          3200060          9          12   \n",
       "1   320000100848          3200001         KG          12   \n",
       "2   320006000661          3200060          9          12   \n",
       "3   320000100751          3200001          9          12   \n",
       "4   320006000011          3200060          9          12   \n",
       "5   320006000313          3200060          9          12   \n",
       "6   320006000567          3200060          9          12   \n",
       "7   320006000493          3200060          9          12   \n",
       "\n",
       "                                         School Name  \\\n",
       "0                      Advanced Technologies Academy   \n",
       "1                    American Preparatory Academy LV   \n",
       "2                             Arbor View High School   \n",
       "3                           Beacon Academy of Nevada   \n",
       "4                                Bonanza High School   \n",
       "5                   Burk Horizon Southwest Sunset HS   \n",
       "6  Canyon Springs High School and the Leadership ...   \n",
       "7                             Centennial High School   \n",
       "\n",
       "                          District Locale Code*        Locale* Charter  \\\n",
       "0     CLARK COUNTY SCHOOL DISTRICT           11    City: Large      No   \n",
       "1  STATE-SPONSORED CHARTER SCHOOLS           21  Suburb: Large     Yes   \n",
       "2     CLARK COUNTY SCHOOL DISTRICT           11    City: Large      No   \n",
       "3  STATE-SPONSORED CHARTER SCHOOLS           21  Suburb: Large     Yes   \n",
       "4     CLARK COUNTY SCHOOL DISTRICT           11    City: Large      No   \n",
       "5     CLARK COUNTY SCHOOL DISTRICT           12  City: Midsize      No   \n",
       "6     CLARK COUNTY SCHOOL DISTRICT           21  Suburb: Large      No   \n",
       "7     CLARK COUNTY SCHOOL DISTRICT           11    City: Large      No   \n",
       "\n",
       "  Magnet* Students* Teachers* Student Teacher Ratio* Free Lunch*  \\\n",
       "0     Yes      1086        55                   19.7         378   \n",
       "1      No      1434      19.5                   73.5          24   \n",
       "2      No      3091       121                   25.5         808   \n",
       "3      No       402     11.92                   33.7         176   \n",
       "4      No      2072        83                     25        1222   \n",
       "5      No       118        14                    8.4         109   \n",
       "6     Yes      2923       116                   25.2        2237   \n",
       "7      No      3257       120                   27.1        3011   \n",
       "\n",
       "  Reduced Lunch*               School Type Grade 9 Grade 10 Grade 11 Grade 12  \n",
       "0            147            Regular school     294      299      244      249  \n",
       "1             15            Regular school      58       55       28        0  \n",
       "2            207            Regular school     764      823      781      710  \n",
       "3             27            Regular school      23       73      123      183  \n",
       "4            236            Regular school     488      595      517      452  \n",
       "5              9  Other/alternative school       0        3       23       92  \n",
       "6            231            Regular school     780      801      723      609  \n",
       "7            246            Regular school     835      778      849      776  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_public.head(8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "vegas_public = vegas_public.loc[vegas_public['Locale*'] == 'City: Large'].copy()\n",
    "vegas_public.reset_index(inplace = True, drop = True)\n",
    "\n",
    "vegas_private = vegas_private.loc[vegas_private['PSS_LOCALE'] == '11'].copy()\n",
    "vegas_private.reset_index(inplace = True, drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_public = milwaukee_public.loc[milwaukee_public['Locale*'] == 'City: Large'].copy()\n",
    "milwaukee_public.reset_index(inplace = True, drop = True)\n",
    "\n",
    "milwaukee_private = milwaukee_private.loc[milwaukee_private['PSS_LOCALE'] == '11'].copy()\n",
    "milwaukee_private.reset_index(inplace = True, drop = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having reduced the sizes of our school dataframes by eliminating any schools located in the suburbs, we rerun ```schools_by_type``` and ```enrollments_by_type``` to produce summaries of our newly restricted data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_school_enrollments = schools_by_type(\"Milwaukee\")\n",
    "vegas_school_enrollments = schools_by_type(\"Vegas\")\n",
    "\n",
    "milwaukee_enrollments_by_type = enrollments_by_type('Milwaukee')\n",
    "vegas_enrollments_by_type = enrollments_by_type('Vegas')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Grade 9</th>\n",
       "      <th>Grade 10</th>\n",
       "      <th>Grade 11</th>\n",
       "      <th>Grade 12</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>1006</td>\n",
       "      <td>662</td>\n",
       "      <td>619</td>\n",
       "      <td>481</td>\n",
       "      <td>2768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>256</td>\n",
       "      <td>290</td>\n",
       "      <td>447</td>\n",
       "      <td>264</td>\n",
       "      <td>1257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Regular Public</th>\n",
       "      <td>5385</td>\n",
       "      <td>3951</td>\n",
       "      <td>3835</td>\n",
       "      <td>3358</td>\n",
       "      <td>16529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Public</th>\n",
       "      <td>6647</td>\n",
       "      <td>4903</td>\n",
       "      <td>4901</td>\n",
       "      <td>4103</td>\n",
       "      <td>20554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>2100</td>\n",
       "      <td>1886</td>\n",
       "      <td>1696</td>\n",
       "      <td>1521</td>\n",
       "      <td>7203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total All Types</th>\n",
       "      <td>8747</td>\n",
       "      <td>6789</td>\n",
       "      <td>6597</td>\n",
       "      <td>5624</td>\n",
       "      <td>27757</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Grade 9  Grade 10  Grade 11  Grade 12  Total Enrollment\n",
       "Charter             1006       662       619       481              2768\n",
       "Alternative          256       290       447       264              1257\n",
       "Regular Public      5385      3951      3835      3358             16529\n",
       "Total Public        6647      4903      4901      4103             20554\n",
       "Private             2100      1886      1696      1521              7203\n",
       "Total All Types     8747      6789      6597      5624             27757"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_enrollments_by_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Grade 9</th>\n",
       "      <th>Grade 10</th>\n",
       "      <th>Grade 11</th>\n",
       "      <th>Grade 12</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>480</td>\n",
       "      <td>451</td>\n",
       "      <td>485</td>\n",
       "      <td>414</td>\n",
       "      <td>1830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>88</td>\n",
       "      <td>95</td>\n",
       "      <td>139</td>\n",
       "      <td>184</td>\n",
       "      <td>506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Regular Public</th>\n",
       "      <td>8231</td>\n",
       "      <td>8314</td>\n",
       "      <td>7714</td>\n",
       "      <td>7102</td>\n",
       "      <td>31361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Public</th>\n",
       "      <td>8799</td>\n",
       "      <td>8860</td>\n",
       "      <td>8338</td>\n",
       "      <td>7700</td>\n",
       "      <td>33697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>83</td>\n",
       "      <td>105</td>\n",
       "      <td>96</td>\n",
       "      <td>98</td>\n",
       "      <td>382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total All Types</th>\n",
       "      <td>8882</td>\n",
       "      <td>8965</td>\n",
       "      <td>8434</td>\n",
       "      <td>7798</td>\n",
       "      <td>34079</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Grade 9  Grade 10  Grade 11  Grade 12  Total Enrollment\n",
       "Charter              480       451       485       414              1830\n",
       "Alternative           88        95       139       184               506\n",
       "Regular Public      8231      8314      7714      7102             31361\n",
       "Total Public        8799      8860      8338      7700             33697\n",
       "Private               83       105        96        98               382\n",
       "Total All Types     8882      8965      8434      7798             34079"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_enrollments_by_type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our new data summaries suggest that Las Vegas has a slighly higher percentage of students in high school than does Milwaukee, but not enough higher to be shocking. At this point, it makes sense to compute percentages for each of these dataframes in order to facilitate comparing the data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function:\n",
    "\n",
    "Inputs:\n",
    "\n",
    "Returns:\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def percent_enrollment(df):\n",
    "    \n",
    "    enrollments = df.copy()\n",
    "    for i in range(len(enrollments)):\n",
    "        for j in range(enrollments.shape[1]):\n",
    "            enrollments.iloc[i,j] = round(enrollments.iloc[i,j]*100.0/enrollments.iloc[-1,j],1)\n",
    "            \n",
    "    return enrollments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "vegas_percents = percent_enrollment(vegas_enrollments_by_type)\n",
    "milwaukee_percents = percent_enrollment(milwaukee_enrollments_by_type)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking once again at the data we have:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Grade 9</th>\n",
       "      <th>Grade 10</th>\n",
       "      <th>Grade 11</th>\n",
       "      <th>Grade 12</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>11.5</td>\n",
       "      <td>9.8</td>\n",
       "      <td>9.4</td>\n",
       "      <td>8.6</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>2.9</td>\n",
       "      <td>4.3</td>\n",
       "      <td>6.8</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Regular Public</th>\n",
       "      <td>61.6</td>\n",
       "      <td>58.2</td>\n",
       "      <td>58.1</td>\n",
       "      <td>59.7</td>\n",
       "      <td>59.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Public</th>\n",
       "      <td>76.0</td>\n",
       "      <td>72.2</td>\n",
       "      <td>74.3</td>\n",
       "      <td>73.0</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>24.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>25.7</td>\n",
       "      <td>27.0</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total All Types</th>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Grade 9  Grade 10  Grade 11  Grade 12  Total Enrollment\n",
       "Charter             11.5       9.8       9.4       8.6              10.0\n",
       "Alternative          2.9       4.3       6.8       4.7               4.5\n",
       "Regular Public      61.6      58.2      58.1      59.7              59.5\n",
       "Total Public        76.0      72.2      74.3      73.0              74.0\n",
       "Private             24.0      27.8      25.7      27.0              26.0\n",
       "Total All Types    100.0     100.0     100.0     100.0             100.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_percents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Grade 9</th>\n",
       "      <th>Grade 10</th>\n",
       "      <th>Grade 11</th>\n",
       "      <th>Grade 12</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>5.4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.8</td>\n",
       "      <td>5.3</td>\n",
       "      <td>5.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.6</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Regular Public</th>\n",
       "      <td>92.7</td>\n",
       "      <td>92.7</td>\n",
       "      <td>91.5</td>\n",
       "      <td>91.1</td>\n",
       "      <td>92.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Public</th>\n",
       "      <td>99.1</td>\n",
       "      <td>98.8</td>\n",
       "      <td>98.9</td>\n",
       "      <td>98.7</td>\n",
       "      <td>98.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>0.9</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total All Types</th>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Grade 9  Grade 10  Grade 11  Grade 12  Total Enrollment\n",
       "Charter              5.4       5.0       5.8       5.3               5.4\n",
       "Alternative          1.0       1.1       1.6       2.4               1.5\n",
       "Regular Public      92.7      92.7      91.5      91.1              92.0\n",
       "Total Public        99.1      98.8      98.9      98.7              98.9\n",
       "Private              0.9       1.2       1.1       1.3               1.1\n",
       "Total All Types    100.0     100.0     100.0     100.0             100.0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_percents"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A quick glance at these data tables makes it clear that a far higher percentage of students in Las Vegas attend regular public schools than do students in Milwaukee. In order to have a clearer picture of what is going on, we can look at some visualizations of our data. The most straightforward choice here is a side-by-side bar chart."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_groups = 5\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (15,8))\n",
    "\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.35\n",
    "\n",
    "opacity = 0.7\n",
    "error_config = {'ecolor': '0.3'}\n",
    "\n",
    "rects1 = ax.bar(index, milwaukee_percents['Total Enrollment'].tolist()[:5], bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Milwaukee')\n",
    "\n",
    "rects2 = ax.bar(index + bar_width, vegas_percents['Total Enrollment'].tolist()[:5], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Las Vegas')\n",
    "\n",
    "ax.set_xlabel('Type of School')\n",
    "ax.set_ylabel('Total Enrollment')\n",
    "ax.set_title('High School Enrollment by Type of School (percent of total)')\n",
    "ax.set_xticks(index + bar_width / 2)\n",
    "ax.set_xticklabels(('Charter', 'Alternative', 'Public', 'Total Public', 'Private'))\n",
    "ax.legend()\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From our graph, it is clear that the percentage of students in regular public high schools in Las Vegas far exceeds the percentage of students in regular public high schools in Milwaukee. While some of this difference is driven by the increased enrollment in charter schools and alternative schools in Milwaukee, the bulk of it is driven by enrollment in private schools. This accounts for nearly 26% of Milwaukee high school enrollment, but only around 1% of Las Vegas high school enrollment. \n",
    "\n",
    "Next, let's look at how these distributions change from class year to class year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(1, 2, figsize = (15,8), sharey = True)\n",
    "\n",
    "# First subplot\n",
    "\n",
    "grades = ['Grade 9', 'Grade 10', 'Grade 11', 'Grade 12']\n",
    "\n",
    "Charter = milwaukee_percents.loc['Charter'].tolist()[:4]\n",
    "Alternative = milwaukee_percents.loc['Alternative'].tolist()[:4]\n",
    "Public = milwaukee_percents.loc['Regular Public'].tolist()[:4]\n",
    "Total_Public = milwaukee_percents.loc['Total Public'].tolist()[:4]\n",
    "Private = milwaukee_percents.loc['Private'].tolist()[:4]\n",
    "\n",
    "axs[0].plot(grades, Charter, label=\"Charter\")\n",
    "axs[0].plot(grades, Alternative, label=\"Alternative\")\n",
    "axs[0].plot(grades, Public, label=\"Regular Public\")\n",
    "axs[0].plot(grades, Total_Public, label=\"Total Public\")\n",
    "axs[0].plot(grades, Private, label=\"Private\")\n",
    "axs[0].set_title('Milwaukee Percent Enrollment by School Type')\n",
    "axs[0].set_ylabel('% of Total Enrollment')\n",
    "axs[0].legend()\n",
    "\n",
    "# Second subplot\n",
    "\n",
    "grades = ['Grade 9', 'Grade 10', 'Grade 11', 'Grade 12']\n",
    "\n",
    "Charter = vegas_percents.loc['Charter'].tolist()[:4]\n",
    "Alternative = vegas_percents.loc['Alternative'].tolist()[:4]\n",
    "Public = vegas_percents.loc['Regular Public'].tolist()[:4]\n",
    "Total_Public = vegas_percents.loc['Total Public'].tolist()[:4]\n",
    "Private = vegas_percents.loc['Private'].tolist()[:4]\n",
    "\n",
    "axs[1].plot(grades, Charter, label=\"Charter\")\n",
    "axs[1].plot(grades, Alternative, label=\"Alternative\")\n",
    "axs[1].plot(grades, Public, label=\"Regular Public\")\n",
    "axs[1].plot(grades, Total_Public, label=\"Total Public\")\n",
    "axs[1].plot(grades, Private, label=\"Private\")\n",
    "axs[1].set_title('Las Vegas Percent Enrollment by School Type')\n",
    "axs[1].legend()\n",
    "\n",
    "# Show the plots\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": false
   },
   "source": [
    "While these plots are somewhat informative, (we see for instance that the division of enrollments is more stable for Las Vegas than for Milwaukee), it might be even more interesting to look at the raw numbers of enrollments in each grade and for each type and to see how those change through the high school grades."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(1, 2, figsize = (15,8), sharey = True)\n",
    "\n",
    "# First subplot\n",
    "\n",
    "grades = ['Grade 9', 'Grade 10', 'Grade 11', 'Grade 12']\n",
    "\n",
    "Charter = milwaukee_enrollments_by_type.loc['Charter'].tolist()[:4]\n",
    "Alternative = milwaukee_enrollments_by_type.loc['Alternative'].tolist()[:4]\n",
    "Public = milwaukee_enrollments_by_type.loc['Regular Public'].tolist()[:4]\n",
    "Total_Public = milwaukee_enrollments_by_type.loc['Total Public'].tolist()[:4]\n",
    "Private = milwaukee_enrollments_by_type.loc['Private'].tolist()[:4]\n",
    "Total = milwaukee_enrollments_by_type.loc['Total All Types'].tolist()[:4]\n",
    "\n",
    "axs[0].plot(grades, Charter, label=\"Charter\")\n",
    "axs[0].plot(grades, Alternative, label=\"Alternative\")\n",
    "axs[0].plot(grades, Public, label=\"Regular Public\")\n",
    "axs[0].plot(grades, Total_Public, label=\"Total Public\")\n",
    "axs[0].plot(grades, Private, label=\"Private\")\n",
    "axs[0].plot(grades, Total, label = \"Total All Types\")\n",
    "\n",
    "axs[0].set_title('Milwaukee Enrollment by School Type')\n",
    "axs[0].set_ylabel('Number of Students')\n",
    "axs[0].legend()\n",
    "\n",
    "# Second subplot\n",
    "\n",
    "grades = ['Grade 9', 'Grade 10', 'Grade 11', 'Grade 12']\n",
    "\n",
    "Charter = vegas_enrollments_by_type.loc['Charter'].tolist()[:4]\n",
    "Alternative = vegas_enrollments_by_type.loc['Alternative'].tolist()[:4]\n",
    "Public = vegas_enrollments_by_type.loc['Regular Public'].tolist()[:4]\n",
    "Total_Public = vegas_enrollments_by_type.loc['Total Public'].tolist()[:4]\n",
    "Private = vegas_enrollments_by_type.loc['Private'].tolist()[:4]\n",
    "Total = vegas_enrollments_by_type.loc['Total All Types'].tolist()[:4]\n",
    "\n",
    "axs[1].plot(grades, Charter, label=\"Charter\")\n",
    "axs[1].plot(grades, Alternative, label=\"Alternative\")\n",
    "axs[1].plot(grades, Public, label=\"Regular Public\")\n",
    "axs[1].plot(grades, Total_Public, label=\"Total Public\")\n",
    "axs[1].plot(grades, Private, label=\"Private\")\n",
    "axs[1].plot(grades, Total, label = \"Total All Types\")\n",
    "\n",
    "axs[1].set_title('Las Vegas Enrollment by School Type')\n",
    "axs[1].set_ylabel('Number of Students')\n",
    "axs[1].legend()\n",
    "\n",
    "# Show the plots\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we see something far more interesting. Looking first at the plot for Milwaukee, we see that total school enrollment drops precipitously between ninth and tenth grade. This appears to be driven primarily by a drop off in enrollment in the regular public schools. Charter schools and private schools also display somewhat of a drop in enrollment, though much less, and alternative high schools actually show a slight increase in enrollment from ninth grade to tenth grade. Although enrollment flattens considerably between tenth and eleventh grades, we once again see a significant drop in school enrollment between eleventh and twelth grades. \n",
    "\n",
    "Here it is worth noting that, although the drop off between eleventh and twelth grade is likely driven primarily by students dropping out of school (although school attendance is [mandatory in Wisconsin until the age of 18](https://statelaws.findlaw.com/wisconsin-law/wisconsin-compulsory-education-laws.html), 16 and 17 year olds may be excused from regular school attendence), it seems that the drop off between ninth and tenth grades is most likely due to students failing to earn enough credits in their first year of high school to qualify as tenth graders the following year. This theory is strengthened by observing that, while there were only [4874 eighth graders](http://mps.milwaukee.k12.wi.us/en/District/About-MPS/School-Board/Office-of-Accountability-Efficiency/Public-Items-Emjay/District-Enrollment.htm) enrolled in the Milwaukee Public Schools in 2016-17, there were 6373 ninth graders enrolled in the Milwaukee Public Schools in 2017-18.\n",
    "\n",
    "For Las Vegas, the trends are quite different. Here we observe that enrollment in private schools, charter schools, and alternative schools is very nearly flat across all four years. Overall enrollment and public school enrollment are flat through tenth grade, and then drop off at a nearly constant rate in eleventh and twelth grades. (Note that Nevada only has compulsory attendance through the [age of 17](https://statelaws.findlaw.com/nevada-law/nevada-compulsory-education-laws.html))\n",
    "\n",
    "Also of note, while the total enrollments for Milwaukee and Las Vegas in ninth grade are quite similar, by twelth grade school enrollment in Las Vegas is substantially higher than it is in Milwaukee."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2: How does the racial makeup of the different types of schools compare with the racial makeup of the cities as a whole?\n",
    "\n",
    "Here, beginning with the dataframes that I created previously, namely ```milwaukee_school_enrollments``` and ```vegas_school_enrollments```, I want to add race data from Milwaukee_AP_courses.csv and Las_vegas_AP_courses.csv for the publicly funded schools. For the private schools, I will add it from ```milwaukee_private``` and ```vegas_private```. Here, I will need to be a little bit careful, because many of the private schools combined schools with grades from kindergarten through the end of high school with the racial breakdown given for the student body as a whole rather than for individual grades. As a result, I will make the assumption that on the whole, the diversity of the total student body is a good approximation for the diversity of the high school students, and I will use percentages from there to estimate the race breakdown of the high school population."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_AP = pd.read_csv('Education_Project/Milwaukee_AP_courses.csv')\n",
    "vegas_AP = pd.read_csv('Education_Project/Las_Vegas_AP_courses.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lea State</th>\n",
       "      <th>LEA</th>\n",
       "      <th>School State</th>\n",
       "      <th>School</th>\n",
       "      <th>ID</th>\n",
       "      <th>Year</th>\n",
       "      <th>Category</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <th>Asian or Pacific Islander</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Hawaiian/ Pacific Islander</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Black</th>\n",
       "      <th>White</th>\n",
       "      <th>Two or more races</th>\n",
       "      <th>Total</th>\n",
       "      <th>SWD (IDEA-Eligible)</th>\n",
       "      <th>LEP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL DISTRICT</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL OF LANGUAGES</td>\n",
       "      <td>550960001273</td>\n",
       "      <td>2011</td>\n",
       "      <td>Enrollment in AP classes</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>76.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>160.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL DISTRICT</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL OF LANGUAGES</td>\n",
       "      <td>550960001273</td>\n",
       "      <td>2011</td>\n",
       "      <td>Taking AP tests for some AP courses taken</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL DISTRICT</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL OF LANGUAGES</td>\n",
       "      <td>550960001273</td>\n",
       "      <td>2011</td>\n",
       "      <td>Taking AP tests for all AP courses taken</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>67.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>136.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL DISTRICT</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL OF LANGUAGES</td>\n",
       "      <td>550960001273</td>\n",
       "      <td>2011</td>\n",
       "      <td>Students who took AP courses but did not take ...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL DISTRICT</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE SCHOOL OF LANGUAGES</td>\n",
       "      <td>550960001273</td>\n",
       "      <td>2011</td>\n",
       "      <td>Passing all AP tests taken</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.00</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>20.00</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>24.00</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Lea State                        LEA School State  \\\n",
       "0        WI  MILWAUKEE SCHOOL DISTRICT           WI   \n",
       "1        WI  MILWAUKEE SCHOOL DISTRICT           WI   \n",
       "2        WI  MILWAUKEE SCHOOL DISTRICT           WI   \n",
       "3        WI  MILWAUKEE SCHOOL DISTRICT           WI   \n",
       "4        WI  MILWAUKEE SCHOOL DISTRICT           WI   \n",
       "\n",
       "                          School            ID  Year  \\\n",
       "0  MILWAUKEE SCHOOL OF LANGUAGES  550960001273  2011   \n",
       "1  MILWAUKEE SCHOOL OF LANGUAGES  550960001273  2011   \n",
       "2  MILWAUKEE SCHOOL OF LANGUAGES  550960001273  2011   \n",
       "3  MILWAUKEE SCHOOL OF LANGUAGES  550960001273  2011   \n",
       "4  MILWAUKEE SCHOOL OF LANGUAGES  550960001273  2011   \n",
       "\n",
       "                                            Category  \\\n",
       "0                           Enrollment in AP classes   \n",
       "1          Taking AP tests for some AP courses taken   \n",
       "2           Taking AP tests for all AP courses taken   \n",
       "3  Students who took AP courses but did not take ...   \n",
       "4                         Passing all AP tests taken   \n",
       "\n",
       "  American Indian or Alaska Native  Asian or Pacific Islander  Asian  \\\n",
       "0                             0.00                        NaN  19.00   \n",
       "1                             0.00                        NaN   0.00   \n",
       "2                             0.00                        NaN  16.00   \n",
       "3                             0.00                        NaN   0.00   \n",
       "4                              <=2                        NaN   4.00   \n",
       "\n",
       "  Hawaiian/ Pacific Islander Hispanic  Black  White Two or more races   Total  \\\n",
       "0                       0.00    22.00  43.00  76.00              0.00  160.00   \n",
       "1                       0.00     0.00   4.00   4.00              0.00    8.00   \n",
       "2                       0.00    22.00  31.00  67.00              0.00  136.00   \n",
       "3                       0.00     2.00   4.00   4.00              0.00   10.00   \n",
       "4                        <=2      <=2    <=2  20.00               <=2   24.00   \n",
       "\n",
       "  SWD (IDEA-Eligible)   LEP  \n",
       "0                2.00  0.00  \n",
       "1                0.00  0.00  \n",
       "2                2.00  0.00  \n",
       "3                0.00  0.00  \n",
       "4                 <=2   <=2  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_AP.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at what we have here, it is clear that we have far more data than we need, and that much of it is irrelevent to our current problem. To begin with, we only need to keep the rows from the year 2015 (the latest year for which data is available) which have the category 'Total Enrollment (Secondary Schools)'. From there, we can eliminate all columns other than u'School', u'ID', u'American Indian or Alaska Native', u'Asian or Pacific Islander', u'Asian', u'Hawaiian/ Pacific Islander', u'Hispanic', u'Black', u'White', u'Two or more races', and u'Total'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_demographics = milwaukee_AP.loc[(milwaukee_AP['Year'] == 2015) & \n",
    "                                          (milwaukee_AP['Category'] == 'Total Enrollment (Secondary Schools)')].copy()\n",
    "milwaukee_demographics = milwaukee_demographics[[u'ID', u'American Indian or Alaska Native', \n",
    "                                                  u'Asian', u'Hawaiian/ Pacific Islander', \n",
    "                                                 u'Hispanic', u'Black', u'White', u'Two or more races', u'Total']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "vegas_demographics = vegas_AP.loc[(vegas_AP['Year'] == 2015) & \n",
    "                                          (vegas_AP['Category'] == 'Total Enrollment (Secondary Schools)')].copy()\n",
    "vegas_demographics = vegas_demographics[[u'ID', u'American Indian or Alaska Native', \n",
    "                                                  u'Asian', u'Hawaiian/ Pacific Islander', \n",
    "                                                 u'Hispanic', u'Black', u'White', u'Two or more races', u'Total']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# I want the school ID numbers to be strings rather than integers because the private school IDs include letters\n",
    "\n",
    "for i in milwaukee_demographics.index.tolist():\n",
    "    milwaukee_demographics.loc[i,'ID'] = str(milwaukee_demographics.loc[i,'ID'])\n",
    "    \n",
    "for i in vegas_demographics.index.tolist():\n",
    "    vegas_demographics.loc[i,'ID'] = str(vegas_demographics.loc[i,'ID'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, as above, we need to eliminate those schools (particularly for Las Vegas), that aren't actually in the cities. The easiest way to do this is to add the demographics data to the school enrollment dataframes, which will naturally eliminate any suburban or rural schools. We begin by using the school ID as the index column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_demographics.set_index('ID', drop = True, inplace = True)\n",
    "\n",
    "vegas_demographics.set_index('ID', drop = True, inplace = True)\n",
    "\n",
    "milwaukee_school_enrollments.set_index('School', drop = True, inplace = True)\n",
    "\n",
    "vegas_school_enrollments.set_index('School', drop = True, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "vegas_school_enrollments = vegas_school_enrollments.merge(vegas_demographics, \n",
    "                                                          how='left', left_index = True, right_index = True)\n",
    "\n",
    "milwaukee_school_enrollments = milwaukee_school_enrollments.merge(milwaukee_demographics,\n",
    "                                                                  how='left', left_index = True, right_index = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now I've added information on the racial/ethnic demographics of the public schools to my dataframes, I want to add the same sort of information on the private schools to my dataframes. This will be somewhat trickier than for the public schools, simply because I don't have data on demographics restricted to high school students here. As a result, I'm going to make the assumption that the ethnic breakdown of the school as a whole is a reasonable approximation of the ethnic breakdown of the high school.\n",
    "\n",
    "In order to make things simpler, I'm going to begin by changing the index of the private school dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_private.set_index('PSS_SCHOOL_ID', drop = True, inplace = True)\n",
    "vegas_private.set_index('PSS_SCHOOL_ID', drop = True, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function:\n",
    "\n",
    "Inputs:\n",
    "\n",
    "Returns:\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def race_breakdown_private(school_id, city):\n",
    "    \n",
    "    if city == 'milwaukee':\n",
    "        private = milwaukee_private\n",
    "    else:\n",
    "        private = vegas_private\n",
    "        \n",
    "    percent_black = int(private.loc[school_id,'PSS_RACE_B'])*1.0/int(private.loc[school_id,'PSS_ENROLL_TK12'])\n",
    "    percent_white = int(private.loc[school_id,'PSS_RACE_W'])*1.0/int(private.loc[school_id,'PSS_ENROLL_TK12'])\n",
    "    percent_hispanic = int(private.loc[school_id,'PSS_RACE_H'])*1.0/int(private.loc[school_id,'PSS_ENROLL_TK12'])\n",
    "    percent_native_american = int(private.loc[school_id,'PSS_RACE_AI'])*1.0/int(private.loc[school_id,'PSS_ENROLL_TK12'])\n",
    "    percent_asian = int(private.loc[school_id,'PSS_RACE_AS'])*1.0/int(private.loc[school_id,'PSS_ENROLL_TK12'])\n",
    "    percent_pacific_islander = int(private.loc[school_id,'PSS_RACE_P'])*1.0/int(private.loc[school_id,'PSS_ENROLL_TK12'])\n",
    "    percent_two_races = int(private.loc[school_id,'PSS_RACE_2'])*1.0/int(private.loc[school_id,'PSS_ENROLL_TK12'])\n",
    "    \n",
    "    high_school_population = (int(private.loc[school_id,'PSS_ENROLL_9']) + int(private.loc[school_id,'PSS_ENROLL_10']) + \n",
    "                             int(private.loc[school_id,'PSS_ENROLL_11']) + int(private.loc[school_id,'PSS_ENROLL_12']))\n",
    "    \n",
    "    high_school_by_race = pd.DataFrame(columns = ['Black','White','Hispanic','Native American','Asian',\n",
    "                                                  'Pacific Islander','Two Races'])\n",
    "    \n",
    "    high_school_by_race.loc[school_id, 'Black'] = round(percent_black * high_school_population)\n",
    "    high_school_by_race.loc[school_id, 'White'] = round(percent_white * high_school_population)\n",
    "    high_school_by_race.loc[school_id, 'Hispanic'] = round(percent_hispanic * high_school_population)\n",
    "    high_school_by_race.loc[school_id, 'Native American'] = round(percent_native_american * high_school_population)\n",
    "    high_school_by_race.loc[school_id, 'Asian'] = round(percent_asian * high_school_population)\n",
    "    high_school_by_race.loc[school_id, 'Pacific Islander'] = round(percent_pacific_islander * high_school_population)\n",
    "    high_school_by_race.loc[school_id, 'Two Races'] = round(percent_two_races * high_school_population)\n",
    "    \n",
    "    return high_school_by_race"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And now that I have, in theory, a way of calculating/estimating the racial makeup of high school students for each school, I'm ready to try to pull this together.\n",
    "\n",
    "Beginning with Milwaukee..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in milwaukee_school_enrollments.index.tolist():\n",
    "    if milwaukee_school_enrollments.loc[i,'Private'] == 'Y':\n",
    "        school_id = i\n",
    "        \n",
    "        race_breakdown = race_breakdown_private(school_id, 'milwaukee')\n",
    "        \n",
    "        milwaukee_school_enrollments.loc[i,'Black'] = race_breakdown.loc[school_id, 'Black']\n",
    "        milwaukee_school_enrollments.loc[i,'White'] = race_breakdown.loc[school_id, 'White']\n",
    "        milwaukee_school_enrollments.loc[i,'Hispanic'] = race_breakdown.loc[school_id, 'Hispanic']\n",
    "        milwaukee_school_enrollments.loc[i,'American Indian or Alaska Native'] = race_breakdown.loc[school_id, 'Native American']\n",
    "        milwaukee_school_enrollments.loc[i,'Asian'] = race_breakdown.loc[school_id, 'Asian']\n",
    "        milwaukee_school_enrollments.loc[i,'Hawaiian/ Pacific Islander'] = race_breakdown.loc[school_id, 'Pacific Islander']\n",
    "        milwaukee_school_enrollments.loc[i,'Two or more races'] = race_breakdown.loc[school_id, 'Two Races']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in vegas_school_enrollments.index.tolist():\n",
    "    if vegas_school_enrollments.loc[i,'Private'] == 'Y':\n",
    "        school_id = i\n",
    "        \n",
    "        race_breakdown = race_breakdown_private(school_id, 'vegas')\n",
    "        \n",
    "        vegas_school_enrollments.loc[i,'Black'] = race_breakdown.loc[school_id, 'Black']\n",
    "        vegas_school_enrollments.loc[i,'White'] = race_breakdown.loc[school_id, 'White']\n",
    "        vegas_school_enrollments.loc[i,'Hispanic'] = race_breakdown.loc[school_id, 'Hispanic']\n",
    "        vegas_school_enrollments.loc[i,'American Indian or Alaska Native'] = race_breakdown.loc[school_id, 'Native American']\n",
    "        vegas_school_enrollments.loc[i,'Asian'] = race_breakdown.loc[school_id, 'Asian']\n",
    "        vegas_school_enrollments.loc[i,'Hawaiian/ Pacific Islander'] = race_breakdown.loc[school_id, 'Pacific Islander']\n",
    "        vegas_school_enrollments.loc[i,'Two or more races'] = race_breakdown.loc[school_id, 'Two Races']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Charter</th>\n",
       "      <th>Alternative</th>\n",
       "      <th>Private</th>\n",
       "      <th>Public</th>\n",
       "      <th>Other</th>\n",
       "      <th>Grade 9</th>\n",
       "      <th>Grade 10</th>\n",
       "      <th>Grade 11</th>\n",
       "      <th>Grade 12</th>\n",
       "      <th>Total Enrollment</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Hawaiian/ Pacific Islander</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Black</th>\n",
       "      <th>White</th>\n",
       "      <th>Two or more races</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>School</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>550960002603</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>65</td>\n",
       "      <td>52</td>\n",
       "      <td>49</td>\n",
       "      <td>34</td>\n",
       "      <td>200</td>\n",
       "      <td>4.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>37.00</td>\n",
       "      <td>103.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>210.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000792</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>30</td>\n",
       "      <td>21</td>\n",
       "      <td>38</td>\n",
       "      <td>19</td>\n",
       "      <td>108</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>109.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>122.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002782</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>100</td>\n",
       "      <td>84</td>\n",
       "      <td>96</td>\n",
       "      <td>91</td>\n",
       "      <td>371</td>\n",
       "      <td>10.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>211.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>82.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>367.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002707</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>17</td>\n",
       "      <td>19</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>51</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>55.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001127</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>309</td>\n",
       "      <td>204</td>\n",
       "      <td>174</td>\n",
       "      <td>133</td>\n",
       "      <td>820</td>\n",
       "      <td>13.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>253.00</td>\n",
       "      <td>478.00</td>\n",
       "      <td>106.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>886.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001218</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>335</td>\n",
       "      <td>188</td>\n",
       "      <td>182</td>\n",
       "      <td>141</td>\n",
       "      <td>846</td>\n",
       "      <td>4.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>133.00</td>\n",
       "      <td>661.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>858.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960003054</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>169</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>169</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002755</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>112</td>\n",
       "      <td>84</td>\n",
       "      <td>83</td>\n",
       "      <td>79</td>\n",
       "      <td>358</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>355.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>366.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002980</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>213</td>\n",
       "      <td>104</td>\n",
       "      <td>80</td>\n",
       "      <td>61</td>\n",
       "      <td>458</td>\n",
       "      <td>4.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>67.00</td>\n",
       "      <td>397.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>507.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960003053</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550006902920</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>20</td>\n",
       "      <td>43</td>\n",
       "      <td>29</td>\n",
       "      <td>10</td>\n",
       "      <td>102</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>88.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>111.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550003502843</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002577</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>52</td>\n",
       "      <td>48</td>\n",
       "      <td>71</td>\n",
       "      <td>63</td>\n",
       "      <td>234</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>169.00</td>\n",
       "      <td>37.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>236.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000963</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>15</td>\n",
       "      <td>37</td>\n",
       "      <td>80</td>\n",
       "      <td>59</td>\n",
       "      <td>191</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>214.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>233.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001180</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>661</td>\n",
       "      <td>468</td>\n",
       "      <td>385</td>\n",
       "      <td>302</td>\n",
       "      <td>1816</td>\n",
       "      <td>28.00</td>\n",
       "      <td>76.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>754.00</td>\n",
       "      <td>601.00</td>\n",
       "      <td>268.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>1737.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002979</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>75</td>\n",
       "      <td>70</td>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>268</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1288.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>1323.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002700</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>209</td>\n",
       "      <td>172</td>\n",
       "      <td>163</td>\n",
       "      <td>158</td>\n",
       "      <td>702</td>\n",
       "      <td>4.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>652.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>737.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001199</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>400</td>\n",
       "      <td>380</td>\n",
       "      <td>370</td>\n",
       "      <td>379</td>\n",
       "      <td>1529</td>\n",
       "      <td>7.00</td>\n",
       "      <td>148.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>139.00</td>\n",
       "      <td>856.00</td>\n",
       "      <td>298.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>1464.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002567</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>20</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>51</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>39.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002931</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>87</td>\n",
       "      <td>49</td>\n",
       "      <td>36</td>\n",
       "      <td>30</td>\n",
       "      <td>202</td>\n",
       "      <td>10.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>436.00</td>\n",
       "      <td>166.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>690.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001215</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>323</td>\n",
       "      <td>181</td>\n",
       "      <td>188</td>\n",
       "      <td>184</td>\n",
       "      <td>876</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001164</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>148</td>\n",
       "      <td>88</td>\n",
       "      <td>119</td>\n",
       "      <td>0</td>\n",
       "      <td>355</td>\n",
       "      <td>4.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>94.00</td>\n",
       "      <td>532.00</td>\n",
       "      <td>205.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>892.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550004202234</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>84</td>\n",
       "      <td>44</td>\n",
       "      <td>45</td>\n",
       "      <td>27</td>\n",
       "      <td>200</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>1024.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1044.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550006602865</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>92</td>\n",
       "      <td>85</td>\n",
       "      <td>75</td>\n",
       "      <td>45</td>\n",
       "      <td>297</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>295.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>301.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002822</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>47</td>\n",
       "      <td>37</td>\n",
       "      <td>31</td>\n",
       "      <td>37</td>\n",
       "      <td>152</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>94.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>169.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001306</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>34</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>25.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960003036</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002339</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>265</td>\n",
       "      <td>217</td>\n",
       "      <td>234</td>\n",
       "      <td>200</td>\n",
       "      <td>916</td>\n",
       "      <td>4.00</td>\n",
       "      <td>67.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>121.00</td>\n",
       "      <td>580.00</td>\n",
       "      <td>136.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>917.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001273</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>140</td>\n",
       "      <td>153</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>557</td>\n",
       "      <td>10.00</td>\n",
       "      <td>82.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>142.00</td>\n",
       "      <td>637.00</td>\n",
       "      <td>316.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>1203.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002730</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>144</td>\n",
       "      <td>106</td>\n",
       "      <td>81</td>\n",
       "      <td>69</td>\n",
       "      <td>400</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>472.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>497.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960003055</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002272</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>337</td>\n",
       "      <td>235</td>\n",
       "      <td>219</td>\n",
       "      <td>200</td>\n",
       "      <td>991</td>\n",
       "      <td>0.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>1111.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1190.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002608</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>212</td>\n",
       "      <td>144</td>\n",
       "      <td>175</td>\n",
       "      <td>131</td>\n",
       "      <td>662</td>\n",
       "      <td>4.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>628.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>690.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000681</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>91</td>\n",
       "      <td>41</td>\n",
       "      <td>49</td>\n",
       "      <td>35</td>\n",
       "      <td>216</td>\n",
       "      <td>7.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>544.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>634.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A9304123</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A0503704</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A9904483</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>24</td>\n",
       "      <td>26</td>\n",
       "      <td>86</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2068544</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A0702458</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A0702459</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>67</td>\n",
       "      <td>98</td>\n",
       "      <td>77</td>\n",
       "      <td>56</td>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>292</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1506092</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>177</td>\n",
       "      <td>174</td>\n",
       "      <td>177</td>\n",
       "      <td>158</td>\n",
       "      <td>686</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>87</td>\n",
       "      <td>29</td>\n",
       "      <td>522</td>\n",
       "      <td>27</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A9904514</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>60</td>\n",
       "      <td>20</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "      <td>114</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>109</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A0110249</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>36</td>\n",
       "      <td>19</td>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A9301062</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>90</td>\n",
       "      <td>30</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>298</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A0702497</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>116</td>\n",
       "      <td>57</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>268</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1507507</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>263</td>\n",
       "      <td>289</td>\n",
       "      <td>272</td>\n",
       "      <td>249</td>\n",
       "      <td>1073</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>183</td>\n",
       "      <td>54</td>\n",
       "      <td>781</td>\n",
       "      <td>21</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A9106937</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>230</td>\n",
       "      <td>193</td>\n",
       "      <td>162</td>\n",
       "      <td>134</td>\n",
       "      <td>719</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>82</td>\n",
       "      <td>585</td>\n",
       "      <td>2</td>\n",
       "      <td>22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1514354</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>197</td>\n",
       "      <td>171</td>\n",
       "      <td>142</td>\n",
       "      <td>135</td>\n",
       "      <td>645</td>\n",
       "      <td>5</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>388</td>\n",
       "      <td>174</td>\n",
       "      <td>35</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1516147</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>15</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1507609</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>184</td>\n",
       "      <td>222</td>\n",
       "      <td>218</td>\n",
       "      <td>226</td>\n",
       "      <td>850</td>\n",
       "      <td>12</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>154</td>\n",
       "      <td>163</td>\n",
       "      <td>333</td>\n",
       "      <td>115</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A0903869</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>28</td>\n",
       "      <td>25</td>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>82</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1504172</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A9504572</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>34</td>\n",
       "      <td>38</td>\n",
       "      <td>36</td>\n",
       "      <td>29</td>\n",
       "      <td>137</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>119</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1507711</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>167</td>\n",
       "      <td>175</td>\n",
       "      <td>139</td>\n",
       "      <td>119</td>\n",
       "      <td>600</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>587</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A9301055</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1506638</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>66</td>\n",
       "      <td>28</td>\n",
       "      <td>42</td>\n",
       "      <td>31</td>\n",
       "      <td>167</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>78</td>\n",
       "      <td>67</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A9703704</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1303772</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>30</td>\n",
       "      <td>20</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>100</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>76</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1933615</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>19</td>\n",
       "      <td>15</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1513554</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>236</td>\n",
       "      <td>181</td>\n",
       "      <td>161</td>\n",
       "      <td>180</td>\n",
       "      <td>758</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>316</td>\n",
       "      <td>358</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>74 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Charter Alternative Private Public Other Grade 9 Grade 10  \\\n",
       "School                                                                   \n",
       "550960002603     Yes           N       N      N     N      65       52   \n",
       "550960000792      No           Y       N      N     N      30       21   \n",
       "550960002782      No           N       N      Y     N     100       84   \n",
       "550960002707      No           Y       N      N     N      17       19   \n",
       "550960001127      No           N       N      Y     N     309      204   \n",
       "550960001218      No           N       N      Y     N     335      188   \n",
       "550960003054     Yes           N       N      N     N     169        0   \n",
       "550960002755     Yes           N       N      N     N     112       84   \n",
       "550960002980     Yes           N       N      N     N     213      104   \n",
       "550960003053      No           N       N      Y     N       0        0   \n",
       "550006902920     Yes           N       N      N     N      20       43   \n",
       "550003502843      No           Y       N      N     N       0        0   \n",
       "550960002577      No           Y       N      N     N      52       48   \n",
       "550960000963      No           Y       N      N     N      15       37   \n",
       "550960001180      No           N       N      Y     N     661      468   \n",
       "550960002979     Yes           N       N      N     N      75       70   \n",
       "550960002700      No           N       N      Y     N     209      172   \n",
       "550960001199      No           N       N      Y     N     400      380   \n",
       "550960002567      No           Y       N      N     N      20       14   \n",
       "550960002931      No           N       N      Y     N      87       49   \n",
       "550960001215      No           N       N      Y     N     323      181   \n",
       "550960001164      No           N       N      Y     N     148       88   \n",
       "550004202234     Yes           N       N      N     N      84       44   \n",
       "550006602865     Yes           N       N      N     N      92       85   \n",
       "550960002822     Yes           N       N      N     N      47       37   \n",
       "550960001306      No           Y       N      N     N      15        6   \n",
       "550960003036     Yes           N       N      N     N       0        0   \n",
       "550960002339      No           N       N      Y     N     265      217   \n",
       "550960001273      No           N       N      Y     N     140      153   \n",
       "550960002730      No           N       N      Y     N     144      106   \n",
       "...              ...         ...     ...    ...   ...     ...      ...   \n",
       "550960003055      No           Y       N      N     N       0        0   \n",
       "550960002272      No           N       N      Y     N     337      235   \n",
       "550960002608      No           N       N      Y     N     212      144   \n",
       "550960000681      No           N       N      Y     N      91       41   \n",
       "A9304123           N           N       Y      N     N      11        9   \n",
       "A0503704           N           N       Y      N     N      23        0   \n",
       "A9904483           N           N       Y      N     N      18       18   \n",
       "2068544            N           N       Y      N     N       9        7   \n",
       "A0702458           N           N       Y      N     N      15        0   \n",
       "A0702459           N           N       Y      N     N      67       98   \n",
       "1506092            N           N       Y      N     N     177      174   \n",
       "A9904514           N           N       Y      N     N      60       20   \n",
       "A0110249           N           N       Y      N     N      20       19   \n",
       "A9301062           N           N       Y      N     N      90       90   \n",
       "A0702497           N           N       Y      N     N     116       57   \n",
       "1507507            N           N       Y      N     N     263      289   \n",
       "A9106937           N           N       Y      N     N     230      193   \n",
       "1514354            N           N       Y      N     N     197      171   \n",
       "1516147            N           N       Y      N     N      15       12   \n",
       "1507609            N           N       Y      N     N     184      222   \n",
       "A0903869           N           N       Y      N     N      28       25   \n",
       "A1504172           N           N       Y      N     N       4        3   \n",
       "A9504572           N           N       Y      N     N      34       38   \n",
       "1507711            N           N       Y      N     N     167      175   \n",
       "A9301055           N           N       Y      N     N       3        4   \n",
       "1506638            N           N       Y      N     N      66       28   \n",
       "A9703704           N           N       Y      N     N      18       18   \n",
       "A1303772           N           N       Y      N     N      30       20   \n",
       "1933615            N           N       Y      N     N      19       15   \n",
       "1513554            N           N       Y      N     N     236      181   \n",
       "\n",
       "             Grade 11 Grade 12 Total Enrollment  \\\n",
       "School                                            \n",
       "550960002603       49       34              200   \n",
       "550960000792       38       19              108   \n",
       "550960002782       96       91              371   \n",
       "550960002707       11        4               51   \n",
       "550960001127      174      133              820   \n",
       "550960001218      182      141              846   \n",
       "550960003054        0        0              169   \n",
       "550960002755       83       79              358   \n",
       "550960002980       80       61              458   \n",
       "550960003053        0        0                0   \n",
       "550006902920       29       10              102   \n",
       "550003502843        0        0                0   \n",
       "550960002577       71       63              234   \n",
       "550960000963       80       59              191   \n",
       "550960001180      385      302             1816   \n",
       "550960002979       69       54              268   \n",
       "550960002700      163      158              702   \n",
       "550960001199      370      379             1529   \n",
       "550960002567       15        2               51   \n",
       "550960002931       36       30              202   \n",
       "550960001215      188      184              876   \n",
       "550960001164      119        0              355   \n",
       "550004202234       45       27              200   \n",
       "550006602865       75       45              297   \n",
       "550960002822       31       37              152   \n",
       "550960001306        8        5               34   \n",
       "550960003036        0        0                0   \n",
       "550960002339      234      200              916   \n",
       "550960001273      132      132              557   \n",
       "550960002730       81       69              400   \n",
       "...               ...      ...              ...   \n",
       "550960003055        0        0                0   \n",
       "550960002272      219      200              991   \n",
       "550960002608      175      131              662   \n",
       "550960000681       49       35              216   \n",
       "A9304123            8        7               35   \n",
       "A0503704            0        0               23   \n",
       "A9904483           24       26               86   \n",
       "2068544             6        4               26   \n",
       "A0702458            0        0               15   \n",
       "A0702459           77       56              298   \n",
       "1506092           177      158              686   \n",
       "A9904514           16       18              114   \n",
       "A0110249           13       11               63   \n",
       "A9301062           90       30              300   \n",
       "A0702497           58       41              272   \n",
       "1507507           272      249             1073   \n",
       "A9106937          162      134              719   \n",
       "1514354           142      135              645   \n",
       "1516147             0        0               27   \n",
       "1507609           218      226              850   \n",
       "A0903869           10       25               88   \n",
       "A1504172            1        0                8   \n",
       "A9504572           36       29              137   \n",
       "1507711           139      119              600   \n",
       "A9301055            1        2               10   \n",
       "1506638            42       31              167   \n",
       "A9703704            0        0               36   \n",
       "A1303772           25       25              100   \n",
       "1933615            18       15               67   \n",
       "1513554           161      180              758   \n",
       "\n",
       "             American Indian or Alaska Native    Asian  \\\n",
       "School                                                   \n",
       "550960002603                             4.00    13.00   \n",
       "550960000792                             0.00     0.00   \n",
       "550960002782                            10.00    13.00   \n",
       "550960002707                             0.00     2.00   \n",
       "550960001127                            13.00    22.00   \n",
       "550960001218                             4.00     7.00   \n",
       "550960003054                              NaN      NaN   \n",
       "550960002755                             0.00     2.00   \n",
       "550960002980                             4.00    10.00   \n",
       "550960003053                              NaN      NaN   \n",
       "550006902920                             4.00     0.00   \n",
       "550003502843                              NaN      NaN   \n",
       "550960002577                             4.00     2.00   \n",
       "550960000963                             4.00     2.00   \n",
       "550960001180                            28.00    76.00   \n",
       "550960002979                             2.00  1288.00   \n",
       "550960002700                             4.00    31.00   \n",
       "550960001199                             7.00   148.00   \n",
       "550960002567                             0.00     0.00   \n",
       "550960002931                            10.00    13.00   \n",
       "550960001215                              NaN      NaN   \n",
       "550960001164                             4.00    43.00   \n",
       "550004202234                             0.00     0.00   \n",
       "550006602865                             0.00     0.00   \n",
       "550960002822                             2.00     0.00   \n",
       "550960001306                             0.00     0.00   \n",
       "550960003036                              NaN      NaN   \n",
       "550960002339                             4.00    67.00   \n",
       "550960001273                            10.00    82.00   \n",
       "550960002730                             2.00     0.00   \n",
       "...                                       ...      ...   \n",
       "550960003055                              NaN      NaN   \n",
       "550960002272                             0.00    19.00   \n",
       "550960002608                             4.00    28.00   \n",
       "550960000681                             7.00    34.00   \n",
       "A9304123                                    0        0   \n",
       "A0503704                                    0        0   \n",
       "A9904483                                    0        0   \n",
       "2068544                                     0        0   \n",
       "A0702458                                    0        0   \n",
       "A0702459                                    0        2   \n",
       "1506092                                     3       18   \n",
       "A9904514                                    1        0   \n",
       "A0110249                                    0        2   \n",
       "A9301062                                    1        0   \n",
       "A0702497                                    0        0   \n",
       "1507507                                     4       30   \n",
       "A9106937                                    1       27   \n",
       "1514354                                     5       21   \n",
       "1516147                                     0        1   \n",
       "1507609                                    12       73   \n",
       "A0903869                                    0        0   \n",
       "A1504172                                    0        0   \n",
       "A9504572                                    0       12   \n",
       "1507711                                     0        3   \n",
       "A9301055                                    0        0   \n",
       "1506638                                     0        2   \n",
       "A9703704                                    0        1   \n",
       "A1303772                                    4        0   \n",
       "1933615                                     0        0   \n",
       "1513554                                     0       34   \n",
       "\n",
       "             Hawaiian/ Pacific Islander Hispanic    Black   White  \\\n",
       "School                                                              \n",
       "550960002603                       2.00    37.00   103.00   49.00   \n",
       "550960000792                       0.00     4.00   109.00    2.00   \n",
       "550960002782                       0.00   211.00    49.00   82.00   \n",
       "550960002707                       0.00     4.00    55.00    7.00   \n",
       "550960001127                       4.00   253.00   478.00  106.00   \n",
       "550960001218                       0.00   133.00   661.00   46.00   \n",
       "550960003054                        NaN      NaN      NaN     NaN   \n",
       "550960002755                       0.00   355.00     2.00    7.00   \n",
       "550960002980                       2.00    67.00   397.00   25.00   \n",
       "550960003053                        NaN      NaN      NaN     NaN   \n",
       "550006902920                       0.00    88.00     7.00   10.00   \n",
       "550003502843                        NaN      NaN      NaN     NaN   \n",
       "550960002577                       0.00   169.00    37.00   22.00   \n",
       "550960000963                       0.00     4.00   214.00    7.00   \n",
       "550960001180                       0.00   754.00   601.00  268.00   \n",
       "550960002979                       4.00     7.00    10.00    5.00   \n",
       "550960002700                       2.00    16.00   652.00   25.00   \n",
       "550960001199                       0.00   139.00   856.00  298.00   \n",
       "550960002567                       0.00     4.00    31.00    4.00   \n",
       "550960002931                       0.00    52.00   436.00  166.00   \n",
       "550960001215                        NaN      NaN      NaN     NaN   \n",
       "550960001164                       4.00    94.00   532.00  205.00   \n",
       "550004202234                       0.00    13.00  1024.00    5.00   \n",
       "550006602865                       2.00     0.00   295.00    4.00   \n",
       "550960002822                       0.00    49.00    94.00   22.00   \n",
       "550960001306                       0.00     2.00    19.00    4.00   \n",
       "550960003036                        NaN      NaN      NaN     NaN   \n",
       "550960002339                       2.00   121.00   580.00  136.00   \n",
       "550960001273                       0.00   142.00   637.00  316.00   \n",
       "550960002730                       2.00    10.00   472.00    7.00   \n",
       "...                                 ...      ...      ...     ...   \n",
       "550960003055                        NaN      NaN      NaN     NaN   \n",
       "550960002272                       0.00    28.00  1111.00   28.00   \n",
       "550960002608                       0.00     7.00   628.00   19.00   \n",
       "550960000681                       0.00    25.00   544.00   22.00   \n",
       "A9304123                              0        0       33       0   \n",
       "A0503704                              0        0       23       0   \n",
       "A9904483                              0        0       86       0   \n",
       "2068544                               0        0       26       0   \n",
       "A0702458                              0        0       15       0   \n",
       "A0702459                              0        4      292       0   \n",
       "1506092                               0       87       29     522   \n",
       "A9904514                              0        4      109       0   \n",
       "A0110249                              0        1       36      19   \n",
       "A9301062                              0        0      298       1   \n",
       "A0702497                              0        4      268       0   \n",
       "1507507                               0      183       54     781   \n",
       "A9106937                              0       82      585       2   \n",
       "1514354                               0       22      388     174   \n",
       "1516147                               0       17        8       1   \n",
       "1507609                               0      154      163     333   \n",
       "A0903869                              0        3       82       2   \n",
       "A1504172                              0        0        3       4   \n",
       "A9504572                              0        1        5     119   \n",
       "1507711                               0      587        7       3   \n",
       "A9301055                              0        3        3       3   \n",
       "1506638                               0       78       67      20   \n",
       "A9703704                              0        7        6      18   \n",
       "A1303772                              0       76       18       2   \n",
       "1933615                               0        0        0      67   \n",
       "1513554                               0       42      316     358   \n",
       "\n",
       "             Two or more races    Total  \n",
       "School                                   \n",
       "550960002603              2.00   210.00  \n",
       "550960000792              7.00   122.00  \n",
       "550960002782              2.00   367.00  \n",
       "550960002707              2.00    70.00  \n",
       "550960001127             10.00   886.00  \n",
       "550960001218              7.00   858.00  \n",
       "550960003054               NaN      NaN  \n",
       "550960002755              0.00   366.00  \n",
       "550960002980              2.00   507.00  \n",
       "550960003053               NaN      NaN  \n",
       "550006902920              2.00   111.00  \n",
       "550003502843               NaN      NaN  \n",
       "550960002577              2.00   236.00  \n",
       "550960000963              2.00   233.00  \n",
       "550960001180             10.00  1737.00  \n",
       "550960002979              7.00  1323.00  \n",
       "550960002700              7.00   737.00  \n",
       "550960001199             16.00  1464.00  \n",
       "550960002567              0.00    39.00  \n",
       "550960002931             13.00   690.00  \n",
       "550960001215               NaN      NaN  \n",
       "550960001164             10.00   892.00  \n",
       "550004202234              2.00  1044.00  \n",
       "550006602865              0.00   301.00  \n",
       "550960002822              2.00   169.00  \n",
       "550960001306              0.00    25.00  \n",
       "550960003036               NaN      NaN  \n",
       "550960002339              7.00   917.00  \n",
       "550960001273             16.00  1203.00  \n",
       "550960002730              4.00   497.00  \n",
       "...                        ...      ...  \n",
       "550960003055               NaN      NaN  \n",
       "550960002272              4.00  1190.00  \n",
       "550960002608              4.00   690.00  \n",
       "550960000681              2.00   634.00  \n",
       "A9304123                     1      NaN  \n",
       "A0503704                     0      NaN  \n",
       "A9904483                     0      NaN  \n",
       "2068544                      0      NaN  \n",
       "A0702458                     0      NaN  \n",
       "A0702459                     0      NaN  \n",
       "1506092                     27      NaN  \n",
       "A9904514                     0      NaN  \n",
       "A0110249                     5      NaN  \n",
       "A9301062                     0      NaN  \n",
       "A0702497                     0      NaN  \n",
       "1507507                     21      NaN  \n",
       "A9106937                    22      NaN  \n",
       "1514354                     35      NaN  \n",
       "1516147                      0      NaN  \n",
       "1507609                    115      NaN  \n",
       "A0903869                     0      NaN  \n",
       "A1504172                     1      NaN  \n",
       "A9504572                     0      NaN  \n",
       "1507711                      0      NaN  \n",
       "A9301055                     0      NaN  \n",
       "1506638                      0      NaN  \n",
       "A9703704                     4      NaN  \n",
       "A1303772                     0      NaN  \n",
       "1933615                      0      NaN  \n",
       "1513554                      8      NaN  \n",
       "\n",
       "[74 rows x 18 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_school_enrollments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the dataframe above, we see that there are still some problems, namely that there seem to be a number of schools for which we have no demographic information at all. Furthermore, these all seem to be public schools. In a few cases, they seem to be public schools for which there were not actually any students enrolled at the high school level. In this case, those schools can probably simply be eliminated from our data. In a few other cases, however, the issue seems to be with the fact that our civil rights data comes from 2015 while our public school enrollment data comes from a few years later. In other words, the most likely explanation is that, due to some sort of merging or splitting of schools, we have schools that existed in only one of these two periods.\n",
    "\n",
    "Here, I use geographic data from 2014-15 [school location assignments](https://nces.ed.gov/ccd/Data/zip/EDGE_GEOIDS_201415_PUBLIC_SCHOOL_csv.zip]) to determine which schools from the 2015 data should be included in our city data. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>NCESSCH</th>\n",
       "      <th>FIPST</th>\n",
       "      <th>LSTREE</th>\n",
       "      <th>LCITY</th>\n",
       "      <th>LSTATE</th>\n",
       "      <th>LZIP</th>\n",
       "      <th>LZIP4</th>\n",
       "      <th>LATCODE</th>\n",
       "      <th>LONGCODE</th>\n",
       "      <th>CONUM</th>\n",
       "      <th>CONAME</th>\n",
       "      <th>CD</th>\n",
       "      <th>LOCALE</th>\n",
       "      <th>CSA</th>\n",
       "      <th>CBSA</th>\n",
       "      <th>NECTA</th>\n",
       "      <th>METMIC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014</td>\n",
       "      <td>10000200277</td>\n",
       "      <td>1</td>\n",
       "      <td>1000 INDUSTRIAL SCHOOL ROAD</td>\n",
       "      <td>BIRMINGHAM</td>\n",
       "      <td>AL</td>\n",
       "      <td>35220</td>\n",
       "      <td>486.0</td>\n",
       "      <td>33.673661</td>\n",
       "      <td>-86.628755</td>\n",
       "      <td>1073</td>\n",
       "      <td>JEFFERSON COUNTY</td>\n",
       "      <td>106</td>\n",
       "      <td>21</td>\n",
       "      <td>142</td>\n",
       "      <td>13820</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014</td>\n",
       "      <td>10000201402</td>\n",
       "      <td>1</td>\n",
       "      <td>315 OUTBACK ROAD</td>\n",
       "      <td>CLAYTON</td>\n",
       "      <td>AL</td>\n",
       "      <td>36016</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.881567</td>\n",
       "      <td>-85.252761</td>\n",
       "      <td>1005</td>\n",
       "      <td>BARBOUR COUNTY</td>\n",
       "      <td>102</td>\n",
       "      <td>42</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014</td>\n",
       "      <td>10000201667</td>\n",
       "      <td>1</td>\n",
       "      <td>1601 COUNTY RD. 57</td>\n",
       "      <td>PRATTVILLE</td>\n",
       "      <td>AL</td>\n",
       "      <td>36067</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.521681</td>\n",
       "      <td>-86.530132</td>\n",
       "      <td>1001</td>\n",
       "      <td>AUTAUGA COUNTY</td>\n",
       "      <td>102</td>\n",
       "      <td>41</td>\n",
       "      <td>N</td>\n",
       "      <td>33860</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014</td>\n",
       "      <td>10000201670</td>\n",
       "      <td>1</td>\n",
       "      <td>2109 BASHI RD, BLDG 509</td>\n",
       "      <td>THOMASVILLE</td>\n",
       "      <td>AL</td>\n",
       "      <td>36784</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.938444</td>\n",
       "      <td>-87.750529</td>\n",
       "      <td>1025</td>\n",
       "      <td>CLARKE COUNTY</td>\n",
       "      <td>107</td>\n",
       "      <td>41</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014</td>\n",
       "      <td>10000201705</td>\n",
       "      <td>1</td>\n",
       "      <td>1000 INDUSTRIAL SCHOOL ROAD</td>\n",
       "      <td>MOUNT MEIGS</td>\n",
       "      <td>AL</td>\n",
       "      <td>36057</td>\n",
       "      <td>66.0</td>\n",
       "      <td>32.374812</td>\n",
       "      <td>-86.082360</td>\n",
       "      <td>1101</td>\n",
       "      <td>MONTGOMERY COUNTY</td>\n",
       "      <td>103</td>\n",
       "      <td>41</td>\n",
       "      <td>N</td>\n",
       "      <td>33860</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SURVYEAR      NCESSCH  FIPST                       LSTREE        LCITY  \\\n",
       "0      2014  10000200277      1  1000 INDUSTRIAL SCHOOL ROAD   BIRMINGHAM   \n",
       "1      2014  10000201402      1             315 OUTBACK ROAD      CLAYTON   \n",
       "2      2014  10000201667      1           1601 COUNTY RD. 57   PRATTVILLE   \n",
       "3      2014  10000201670      1      2109 BASHI RD, BLDG 509  THOMASVILLE   \n",
       "4      2014  10000201705      1  1000 INDUSTRIAL SCHOOL ROAD  MOUNT MEIGS   \n",
       "\n",
       "  LSTATE   LZIP  LZIP4    LATCODE   LONGCODE  CONUM             CONAME   CD  \\\n",
       "0     AL  35220  486.0  33.673661 -86.628755   1073   JEFFERSON COUNTY  106   \n",
       "1     AL  36016    NaN  31.881567 -85.252761   1005     BARBOUR COUNTY  102   \n",
       "2     AL  36067    NaN  32.521681 -86.530132   1001     AUTAUGA COUNTY  102   \n",
       "3     AL  36784    NaN  31.938444 -87.750529   1025      CLARKE COUNTY  107   \n",
       "4     AL  36057   66.0  32.374812 -86.082360   1101  MONTGOMERY COUNTY  103   \n",
       "\n",
       "   LOCALE  CSA   CBSA NECTA  METMIC  \n",
       "0      21  142  13820     N       1  \n",
       "1      42    N      N     N       0  \n",
       "2      41    N  33860     N       1  \n",
       "3      41    N      N     N       0  \n",
       "4      41    N  33860     N       1  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "locations = pd.read_csv('Education_Project/Locations_2015.csv', encoding = 'latin-1')\n",
    "locations.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "locations = locations.loc[locations[u'LOCALE'] == 11]\n",
    "locations.reset_index(inplace = True, drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "to_keep = []\n",
    "for i in range(len(locations)):\n",
    "    if locations.loc[i, 'LCITY'] == 'MILWAUKEE':\n",
    "        to_keep.append(i)\n",
    "    elif locations.loc[i, 'LCITY'] == 'LAS VEGAS':\n",
    "        to_keep.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "locations = locations.loc[to_keep]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I now have a list of schools in Milwaukee and Las Vegas that were open in the 2014-2015 school year. Naturally, this is all of the public schools, which means that this list includes elementary and middle schools as well as high schools. Furthermore, as it stands, this list doesn't include any information about school type, however, that is available in the [Public School Directory](https://nces.ed.gov/ccd/Data/zip/ccd_sch_029_1415_w_0216601a_txt.zip), for the 2014-2015 academic year, also found on the NCES website. From here we should be able to filter out the information that we need."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SURVYEAR</th>\n",
       "      <th>FIPST</th>\n",
       "      <th>STABR</th>\n",
       "      <th>STATENAME</th>\n",
       "      <th>SEANAME</th>\n",
       "      <th>LEAID</th>\n",
       "      <th>ST_LEAID</th>\n",
       "      <th>LEA_NAME</th>\n",
       "      <th>SCHID</th>\n",
       "      <th>ST_SCHID</th>\n",
       "      <th>NCESSCH</th>\n",
       "      <th>SCH_NAME</th>\n",
       "      <th>MSTREET1</th>\n",
       "      <th>MSTREET2</th>\n",
       "      <th>MSTREET3</th>\n",
       "      <th>MCITY</th>\n",
       "      <th>MSTATE</th>\n",
       "      <th>MZIP</th>\n",
       "      <th>MZIP4</th>\n",
       "      <th>PHONE</th>\n",
       "      <th>LSTREET1</th>\n",
       "      <th>LSTREET2</th>\n",
       "      <th>LSTREET3</th>\n",
       "      <th>LCITY</th>\n",
       "      <th>LSTATE</th>\n",
       "      <th>LZIP</th>\n",
       "      <th>LZIP4</th>\n",
       "      <th>UNION</th>\n",
       "      <th>OUT_OF_STATE_FLAG</th>\n",
       "      <th>SCH_TYPE_TEXT</th>\n",
       "      <th>SCH_TYPE</th>\n",
       "      <th>RECON_STATUS</th>\n",
       "      <th>GSLO</th>\n",
       "      <th>GSHI</th>\n",
       "      <th>LEVEL</th>\n",
       "      <th>VIRTUAL</th>\n",
       "      <th>BIES</th>\n",
       "      <th>SY_STATUS_TEXT</th>\n",
       "      <th>SY_STATUS</th>\n",
       "      <th>UPDATED_STATUS_TEXT</th>\n",
       "      <th>UPDATED_STATUS</th>\n",
       "      <th>EFFECTIVE_DATE</th>\n",
       "      <th>CHARTER_TEXT</th>\n",
       "      <th>PKOFFERED</th>\n",
       "      <th>KGOFFERED</th>\n",
       "      <th>G1OFFERED</th>\n",
       "      <th>G2OFFERED</th>\n",
       "      <th>G3OFFERED</th>\n",
       "      <th>G4OFFERED</th>\n",
       "      <th>G5OFFERED</th>\n",
       "      <th>G6OFFERED</th>\n",
       "      <th>G7OFFERED</th>\n",
       "      <th>G8OFFERED</th>\n",
       "      <th>G9OFFERED</th>\n",
       "      <th>G10OFFERED</th>\n",
       "      <th>G11OFFERED</th>\n",
       "      <th>G12OFFERED</th>\n",
       "      <th>G13OFFERED</th>\n",
       "      <th>AEOFFERED</th>\n",
       "      <th>UGOFFERED</th>\n",
       "      <th>NOGRADES</th>\n",
       "      <th>CHARTAUTH1</th>\n",
       "      <th>CHARTAUTHN1</th>\n",
       "      <th>CHARTAUTH2</th>\n",
       "      <th>CHARTAUTHN2</th>\n",
       "      <th>IGOFFERED</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014-2015</td>\n",
       "      <td>32</td>\n",
       "      <td>NV</td>\n",
       "      <td>NEVADA</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>3200001</td>\n",
       "      <td>18</td>\n",
       "      <td>STATE-SPONSORED CHARTER SCHOOLS</td>\n",
       "      <td>608</td>\n",
       "      <td>18401</td>\n",
       "      <td>320000100608</td>\n",
       "      <td>Nevada State High School</td>\n",
       "      <td>233 N. Stephanie Street</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Henderson</td>\n",
       "      <td>NV</td>\n",
       "      <td>89074</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7029532600</td>\n",
       "      <td>233 N. Stephanie Street</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Henderson</td>\n",
       "      <td>NV</td>\n",
       "      <td>89074</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Regular School</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>25MAR2015:16:45:36</td>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>0000000</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014-2015</td>\n",
       "      <td>32</td>\n",
       "      <td>NV</td>\n",
       "      <td>NEVADA</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>3200001</td>\n",
       "      <td>18</td>\n",
       "      <td>STATE-SPONSORED CHARTER SCHOOLS</td>\n",
       "      <td>614</td>\n",
       "      <td>18400</td>\n",
       "      <td>320000100614</td>\n",
       "      <td>Silver State High School</td>\n",
       "      <td>788 Fairview Drive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Carson City</td>\n",
       "      <td>NV</td>\n",
       "      <td>89701</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7758837900</td>\n",
       "      <td>788 Fairview Drive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Carson City</td>\n",
       "      <td>NV</td>\n",
       "      <td>89701</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Regular School</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>07</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>25MAR2015:16:45:35</td>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>0000000</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014-2015</td>\n",
       "      <td>32</td>\n",
       "      <td>NV</td>\n",
       "      <td>NEVADA</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>3200001</td>\n",
       "      <td>18</td>\n",
       "      <td>STATE-SPONSORED CHARTER SCHOOLS</td>\n",
       "      <td>731</td>\n",
       "      <td>18405</td>\n",
       "      <td>320000100731</td>\n",
       "      <td>Nevada Connections Academy</td>\n",
       "      <td>555 Double Eagle Court Suite 2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reno</td>\n",
       "      <td>NV</td>\n",
       "      <td>89521</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7758264200</td>\n",
       "      <td>555 Double Eagle Court Suite 2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reno</td>\n",
       "      <td>NV</td>\n",
       "      <td>89521</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Regular School</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>KG</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>25MAR2015:16:45:36</td>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>0000000</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014-2015</td>\n",
       "      <td>32</td>\n",
       "      <td>NV</td>\n",
       "      <td>NEVADA</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>3200001</td>\n",
       "      <td>18</td>\n",
       "      <td>STATE-SPONSORED CHARTER SCHOOLS</td>\n",
       "      <td>734</td>\n",
       "      <td>18404</td>\n",
       "      <td>320000100734</td>\n",
       "      <td>Nevada Virtual Academy</td>\n",
       "      <td>8965 S. Eastern Ave  Ste 330</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Las Vegas</td>\n",
       "      <td>NV</td>\n",
       "      <td>89123</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7024077001</td>\n",
       "      <td>8965 S. Eastern Ave  Ste 330</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Las Vegas</td>\n",
       "      <td>NV</td>\n",
       "      <td>89123</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Regular School</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>KG</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>25MAR2015:16:45:36</td>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>0000000</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014-2015</td>\n",
       "      <td>32</td>\n",
       "      <td>NV</td>\n",
       "      <td>NEVADA</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>3200001</td>\n",
       "      <td>18</td>\n",
       "      <td>STATE-SPONSORED CHARTER SCHOOLS</td>\n",
       "      <td>742</td>\n",
       "      <td>18407</td>\n",
       "      <td>320000100742</td>\n",
       "      <td>Coral Academy of Science Las Vegas</td>\n",
       "      <td>8185 Tamarus Street</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Las Vegas</td>\n",
       "      <td>NV</td>\n",
       "      <td>89123</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7022698512</td>\n",
       "      <td>8185 Tamarus Street</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Las Vegas</td>\n",
       "      <td>NV</td>\n",
       "      <td>89123</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "      <td>Regular School</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>KG</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>Open</td>\n",
       "      <td>1</td>\n",
       "      <td>25MAR2015:16:45:37</td>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Nevada Department of Education</td>\n",
       "      <td>0000000</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>NOT APPLICABLE</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    SURVYEAR  FIPST STABR STATENAME                         SEANAME    LEAID  \\\n",
       "0  2014-2015     32    NV    NEVADA  Nevada Department of Education  3200001   \n",
       "1  2014-2015     32    NV    NEVADA  Nevada Department of Education  3200001   \n",
       "2  2014-2015     32    NV    NEVADA  Nevada Department of Education  3200001   \n",
       "3  2014-2015     32    NV    NEVADA  Nevada Department of Education  3200001   \n",
       "4  2014-2015     32    NV    NEVADA  Nevada Department of Education  3200001   \n",
       "\n",
       "   ST_LEAID                         LEA_NAME  SCHID  ST_SCHID       NCESSCH  \\\n",
       "0        18  STATE-SPONSORED CHARTER SCHOOLS    608     18401  320000100608   \n",
       "1        18  STATE-SPONSORED CHARTER SCHOOLS    614     18400  320000100614   \n",
       "2        18  STATE-SPONSORED CHARTER SCHOOLS    731     18405  320000100731   \n",
       "3        18  STATE-SPONSORED CHARTER SCHOOLS    734     18404  320000100734   \n",
       "4        18  STATE-SPONSORED CHARTER SCHOOLS    742     18407  320000100742   \n",
       "\n",
       "                             SCH_NAME                        MSTREET1  \\\n",
       "0            Nevada State High School         233 N. Stephanie Street   \n",
       "1            Silver State High School              788 Fairview Drive   \n",
       "2          Nevada Connections Academy  555 Double Eagle Court Suite 2   \n",
       "3              Nevada Virtual Academy    8965 S. Eastern Ave  Ste 330   \n",
       "4  Coral Academy of Science Las Vegas             8185 Tamarus Street   \n",
       "\n",
       "  MSTREET2  MSTREET3        MCITY MSTATE   MZIP  MZIP4       PHONE  \\\n",
       "0      NaN       NaN    Henderson     NV  89074    NaN  7029532600   \n",
       "1      NaN       NaN  Carson City     NV  89701    NaN  7758837900   \n",
       "2      NaN       NaN         Reno     NV  89521    NaN  7758264200   \n",
       "3      NaN       NaN    Las Vegas     NV  89123    NaN  7024077001   \n",
       "4      NaN       NaN    Las Vegas     NV  89123    NaN  7022698512   \n",
       "\n",
       "                         LSTREET1 LSTREET2  LSTREET3        LCITY LSTATE  \\\n",
       "0         233 N. Stephanie Street      NaN       NaN    Henderson     NV   \n",
       "1              788 Fairview Drive      NaN       NaN  Carson City     NV   \n",
       "2  555 Double Eagle Court Suite 2      NaN       NaN         Reno     NV   \n",
       "3    8965 S. Eastern Ave  Ste 330      NaN       NaN    Las Vegas     NV   \n",
       "4             8185 Tamarus Street      NaN       NaN    Las Vegas     NV   \n",
       "\n",
       "    LZIP  LZIP4  UNION OUT_OF_STATE_FLAG   SCH_TYPE_TEXT  SCH_TYPE  \\\n",
       "0  89074    NaN      0                 N  Regular School         1   \n",
       "1  89701    NaN      0                 N  Regular School         1   \n",
       "2  89521    NaN      0                 N  Regular School         1   \n",
       "3  89123    NaN      0                 N  Regular School         1   \n",
       "4  89123    NaN      0                 N  Regular School         1   \n",
       "\n",
       "  RECON_STATUS GSLO GSHI LEVEL VIRTUAL  BIES SY_STATUS_TEXT  SY_STATUS  \\\n",
       "0           No   11   12     3      No     2           Open          1   \n",
       "1           No   07   12     3      No     2           Open          1   \n",
       "2           No   KG   12     4     Yes     2           Open          1   \n",
       "3           No   KG   12     4     Yes     2           Open          1   \n",
       "4           No   KG   12     4      No     2           Open          1   \n",
       "\n",
       "  UPDATED_STATUS_TEXT  UPDATED_STATUS      EFFECTIVE_DATE CHARTER_TEXT  \\\n",
       "0                Open               1  25MAR2015:16:45:36          Yes   \n",
       "1                Open               1  25MAR2015:16:45:35          Yes   \n",
       "2                Open               1  25MAR2015:16:45:36          Yes   \n",
       "3                Open               1  25MAR2015:16:45:36          Yes   \n",
       "4                Open               1  25MAR2015:16:45:37          Yes   \n",
       "\n",
       "  PKOFFERED KGOFFERED G1OFFERED G2OFFERED G3OFFERED G4OFFERED G5OFFERED  \\\n",
       "0         N         N         N         N         N         N         N   \n",
       "1         N         N         N         N         N         N         N   \n",
       "2         N         Y         Y         Y         Y         Y         Y   \n",
       "3         N         Y         Y         Y         Y         Y         Y   \n",
       "4         N         Y         Y         Y         Y         Y         Y   \n",
       "\n",
       "  G6OFFERED G7OFFERED G8OFFERED G9OFFERED G10OFFERED G11OFFERED G12OFFERED  \\\n",
       "0         N         N         N         N          N          Y          Y   \n",
       "1         N         Y         Y         Y          Y          Y          Y   \n",
       "2         Y         Y         Y         Y          Y          Y          Y   \n",
       "3         Y         Y         Y         Y          Y          Y          Y   \n",
       "4         Y         Y         Y         Y          Y          Y          Y   \n",
       "\n",
       "  G13OFFERED AEOFFERED UGOFFERED NOGRADES                      CHARTAUTH1  \\\n",
       "0          N         N         N        N  Nevada Department of Education   \n",
       "1          N         N         N        N  Nevada Department of Education   \n",
       "2          N         N         N        N  Nevada Department of Education   \n",
       "3          N         N         N        N  Nevada Department of Education   \n",
       "4          N         N         N        N  Nevada Department of Education   \n",
       "\n",
       "  CHARTAUTHN1      CHARTAUTH2     CHARTAUTHN2 IGOFFERED  \n",
       "0     0000000  NOT APPLICABLE  NOT APPLICABLE         R  \n",
       "1     0000000  NOT APPLICABLE  NOT APPLICABLE         R  \n",
       "2     0000000  NOT APPLICABLE  NOT APPLICABLE         R  \n",
       "3     0000000  NOT APPLICABLE  NOT APPLICABLE         R  \n",
       "4     0000000  NOT APPLICABLE  NOT APPLICABLE         R  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.options.display.max_columns = 70\n",
    "directory = pd.read_csv('Education_Project/Directory_2015.csv')\n",
    "directory.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at this dataframe, we're primarily interested in the columns ```SCH_TYPE_TEXT```, ```CHARTER_TEXT```, and ```NCESSCH```. All of the rest of this data is unnecessary. Therefore, we can delete it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "directory = directory[['NCESSCH', 'SCH_TYPE_TEXT', 'CHARTER_TEXT']]\n",
    "for i in directory.index.tolist():\n",
    "    directory.loc[i, 'NCESSCH'] = str(directory.loc[i, 'NCESSCH'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, for those schools in ```milwaukee_demographics``` or ```vegas_demographics```, we first check whether or a school with that ID number can be found in ```locations```. If so, we use ```directory``` to determine what type of school it is: charter, alternative, regular, or other. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Before I do anything else:\n",
    "\n",
    "I want to figure out exactly what I'm putting together here. I want a dataframe that contains data for each school that existed in 2015 broken down by racial/ethnic enrollment. What I have right now for each city is a dataframe of schools with AP testing availability, which should give me data on what the potential public high schools are. I also have data on which public schools (of any grades) were actually located in the cities in 2014-15, and which were actually located in the cities in 2017-18. Finally, I have racial breakdowns for the private schools that were located in the cities for 2015-16, which need to be interpolated to estimate the racial breakdown when we restrict to high school students. This is going to make a great deal of the last few cells irrelevant, but that can be dealt with on a third pass."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Hawaiian/ Pacific Islander</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Black</th>\n",
       "      <th>White</th>\n",
       "      <th>Two or more races</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>550007402637</th>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>133.00</td>\n",
       "      <td>85.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>249.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000670</th>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>151.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>173.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000681</th>\n",
       "      <td>7.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>544.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>634.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000792</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>109.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>122.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000843</th>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>103.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>113.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             American Indian or Alaska Native  Asian  \\\n",
       "ID                                                     \n",
       "550007402637                             4.00   2.00   \n",
       "550960000670                             2.00   4.00   \n",
       "550960000681                             7.00  34.00   \n",
       "550960000792                             0.00   0.00   \n",
       "550960000843                             2.00   2.00   \n",
       "\n",
       "             Hawaiian/ Pacific Islander Hispanic   Black  White  \\\n",
       "ID                                                                \n",
       "550007402637                       0.00   133.00   85.00  25.00   \n",
       "550960000670                       0.00     4.00  151.00  10.00   \n",
       "550960000681                       0.00    25.00  544.00  22.00   \n",
       "550960000792                       0.00     4.00  109.00   2.00   \n",
       "550960000843                       0.00     4.00  103.00   2.00   \n",
       "\n",
       "             Two or more races   Total  \n",
       "ID                                      \n",
       "550007402637              0.00  249.00  \n",
       "550960000670              2.00  173.00  \n",
       "550960000681              2.00  634.00  \n",
       "550960000792              7.00  122.00  \n",
       "550960000843              0.00  113.00  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_demographics.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SCH_TYPE_TEXT</th>\n",
       "      <th>CHARTER_TEXT</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NCESSCH</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>320000100608</th>\n",
       "      <td>Regular School</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100614</th>\n",
       "      <td>Regular School</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100731</th>\n",
       "      <td>Regular School</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100734</th>\n",
       "      <td>Regular School</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100742</th>\n",
       "      <td>Regular School</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               SCH_TYPE_TEXT CHARTER_TEXT\n",
       "NCESSCH                                  \n",
       "320000100608  Regular School          Yes\n",
       "320000100614  Regular School          Yes\n",
       "320000100731  Regular School          Yes\n",
       "320000100734  Regular School          Yes\n",
       "320000100742  Regular School          Yes"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "locations.set_index('NCESSCH', inplace = True, drop = True)\n",
    "directory.set_index('NCESSCH', inplace = True, drop = True)\n",
    "\n",
    "directory.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Alternative Education School',\n",
       " 'Regular School',\n",
       " 'Special Education School',\n",
       " 'Vocational Education School'}"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(directory['SCH_TYPE_TEXT'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Charter</th>\n",
       "      <th>Alternative</th>\n",
       "      <th>Private</th>\n",
       "      <th>Public</th>\n",
       "      <th>Other</th>\n",
       "      <th>Black</th>\n",
       "      <th>White</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Hawaiian/ Pacific Islander</th>\n",
       "      <th>Two or more races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>550007402637</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>85.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>133.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000670</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>151.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000681</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>544.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000792</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>109.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000843</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>103.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000856</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>115.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960000963</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>214.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001007</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>163.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001127</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>478.00</td>\n",
       "      <td>106.00</td>\n",
       "      <td>253.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001164</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>532.00</td>\n",
       "      <td>205.00</td>\n",
       "      <td>94.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001180</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>601.00</td>\n",
       "      <td>268.00</td>\n",
       "      <td>754.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>76.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001199</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>856.00</td>\n",
       "      <td>298.00</td>\n",
       "      <td>139.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>148.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>16.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001218</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>661.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>133.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001221</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>892.00</td>\n",
       "      <td>91.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>118.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001235</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>499.00</td>\n",
       "      <td>61.00</td>\n",
       "      <td>292.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>85.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001237</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>1033.00</td>\n",
       "      <td>88.00</td>\n",
       "      <td>250.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>139.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001247</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>391.00</td>\n",
       "      <td>76.00</td>\n",
       "      <td>718.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>154.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001273</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>637.00</td>\n",
       "      <td>316.00</td>\n",
       "      <td>142.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>82.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>16.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960001306</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>19.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002272</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>1111.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002339</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>580.00</td>\n",
       "      <td>136.00</td>\n",
       "      <td>121.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>67.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002555</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>7.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002567</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>31.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002577</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>37.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>169.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002603</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>103.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>37.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002608</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>628.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002700</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>652.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002707</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>55.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002730</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>472.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002755</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>2.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>355.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002760</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>154.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002782</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>49.00</td>\n",
       "      <td>82.00</td>\n",
       "      <td>211.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002822</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>94.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002931</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>436.00</td>\n",
       "      <td>166.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002967</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>994.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002979</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>10.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1288.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002980</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>397.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>67.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960002993</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>661.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960003010</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>88.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550004202234</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1024.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550006602865</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>295.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550006902920</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>7.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>88.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550007402496</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>10.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>217.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960003342</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>142.00</td>\n",
       "      <td>409.00</td>\n",
       "      <td>661.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>76.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>550960003370</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>226.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Charter Alternative Private Public Other    Black   White  \\\n",
       "550007402637     Yes           N       N      N     N    85.00   25.00   \n",
       "550960000670      No           N       N      Y     N   151.00   10.00   \n",
       "550960000681      No           N       N      Y     N   544.00   22.00   \n",
       "550960000792      No           Y       N      N     N   109.00    2.00   \n",
       "550960000843      No           Y       N      N     N   103.00    2.00   \n",
       "550960000856      No           Y       N      N     N   115.00    2.00   \n",
       "550960000963      No           Y       N      N     N   214.00    7.00   \n",
       "550960001007      No           Y       N      N     N   163.00    7.00   \n",
       "550960001127      No           N       N      Y     N   478.00  106.00   \n",
       "550960001164      No           N       N      Y     N   532.00  205.00   \n",
       "550960001180      No           N       N      Y     N   601.00  268.00   \n",
       "550960001199      No           N       N      Y     N   856.00  298.00   \n",
       "550960001218      No           N       N      Y     N   661.00   46.00   \n",
       "550960001221      No           N       N      Y     N   892.00   91.00   \n",
       "550960001235      No           N       N      Y     N   499.00   61.00   \n",
       "550960001237      No           N       N      Y     N  1033.00   88.00   \n",
       "550960001247      No           N       N      Y     N   391.00   76.00   \n",
       "550960001273      No           N       N      Y     N   637.00  316.00   \n",
       "550960001306      No           Y       N      N     N    19.00    4.00   \n",
       "550960002272      No           N       N      Y     N  1111.00   28.00   \n",
       "550960002339      No           N       N      Y     N   580.00  136.00   \n",
       "550960002555      No           Y       N      N     N     7.00    0.00   \n",
       "550960002567      No           Y       N      N     N    31.00    4.00   \n",
       "550960002577      No           Y       N      N     N    37.00   22.00   \n",
       "550960002603     Yes           N       N      N     N   103.00   49.00   \n",
       "550960002608      No           N       N      Y     N   628.00   19.00   \n",
       "550960002700      No           N       N      Y     N   652.00   25.00   \n",
       "550960002707      No           Y       N      N     N    55.00    7.00   \n",
       "550960002730      No           N       N      Y     N   472.00    7.00   \n",
       "550960002755     Yes           N       N      N     N     2.00    7.00   \n",
       "550960002760      No           Y       N      N     N   154.00    4.00   \n",
       "550960002782      No           N       N      Y     N    49.00   82.00   \n",
       "550960002822     Yes           N       N      N     N    94.00   22.00   \n",
       "550960002931      No           N       N      Y     N   436.00  166.00   \n",
       "550960002967     Yes           N       N      N     N   994.00   16.00   \n",
       "550960002979     Yes           N       N      N     N    10.00    5.00   \n",
       "550960002980     Yes           N       N      N     N   397.00   25.00   \n",
       "550960002993      No           N       N      Y     N   661.00   16.00   \n",
       "550960003010     Yes           N       N      N     N    88.00    7.00   \n",
       "550004202234     Yes           N       N      N     N  1024.00    5.00   \n",
       "550006602865     Yes           N       N      N     N   295.00    4.00   \n",
       "550006902920     Yes           N       N      N     N     7.00   10.00   \n",
       "550007402496     Yes           N       N      N     N    10.00   19.00   \n",
       "550960003342      No           N       N      Y     N   142.00  409.00   \n",
       "550960003370     Yes           N       N      N     N   226.00   10.00   \n",
       "\n",
       "             Hispanic American Indian or Alaska Native    Asian  \\\n",
       "550007402637   133.00                             4.00     2.00   \n",
       "550960000670     4.00                             2.00     4.00   \n",
       "550960000681    25.00                             7.00    34.00   \n",
       "550960000792     4.00                             0.00     0.00   \n",
       "550960000843     4.00                             2.00     2.00   \n",
       "550960000856     4.00                             0.00     0.00   \n",
       "550960000963     4.00                             4.00     2.00   \n",
       "550960001007    28.00                             4.00     2.00   \n",
       "550960001127   253.00                            13.00    22.00   \n",
       "550960001164    94.00                             4.00    43.00   \n",
       "550960001180   754.00                            28.00    76.00   \n",
       "550960001199   139.00                             7.00   148.00   \n",
       "550960001218   133.00                             4.00     7.00   \n",
       "550960001221    31.00                             4.00   118.00   \n",
       "550960001235   292.00                             7.00    85.00   \n",
       "550960001237   250.00                             7.00   139.00   \n",
       "550960001247   718.00                             7.00   154.00   \n",
       "550960001273   142.00                            10.00    82.00   \n",
       "550960001306     2.00                             0.00     0.00   \n",
       "550960002272    28.00                             0.00    19.00   \n",
       "550960002339   121.00                             4.00    67.00   \n",
       "550960002555     2.00                             0.00     0.00   \n",
       "550960002567     4.00                             0.00     0.00   \n",
       "550960002577   169.00                             4.00     2.00   \n",
       "550960002603    37.00                             4.00    13.00   \n",
       "550960002608     7.00                             4.00    28.00   \n",
       "550960002700    16.00                             4.00    31.00   \n",
       "550960002707     4.00                             0.00     2.00   \n",
       "550960002730    10.00                             2.00     0.00   \n",
       "550960002755   355.00                             0.00     2.00   \n",
       "550960002760     2.00                             0.00     0.00   \n",
       "550960002782   211.00                            10.00    13.00   \n",
       "550960002822    49.00                             2.00     0.00   \n",
       "550960002931    52.00                            10.00    13.00   \n",
       "550960002967    22.00                             7.00     4.00   \n",
       "550960002979     7.00                             2.00  1288.00   \n",
       "550960002980    67.00                             4.00    10.00   \n",
       "550960002993    10.00                             2.00     4.00   \n",
       "550960003010     4.00                             0.00     0.00   \n",
       "550004202234    13.00                             0.00     0.00   \n",
       "550006602865     0.00                             0.00     0.00   \n",
       "550006902920    88.00                             4.00     0.00   \n",
       "550007402496   217.00                             2.00     5.00   \n",
       "550960003342   661.00                            16.00    76.00   \n",
       "550960003370     4.00                             4.00     4.00   \n",
       "\n",
       "             Hawaiian/ Pacific Islander Two or more races  \n",
       "550007402637                       0.00              0.00  \n",
       "550960000670                       0.00              2.00  \n",
       "550960000681                       0.00              2.00  \n",
       "550960000792                       0.00              7.00  \n",
       "550960000843                       0.00              0.00  \n",
       "550960000856                       0.00              0.00  \n",
       "550960000963                       0.00              2.00  \n",
       "550960001007                       0.00              2.00  \n",
       "550960001127                       4.00             10.00  \n",
       "550960001164                       4.00             10.00  \n",
       "550960001180                       0.00             10.00  \n",
       "550960001199                       0.00             16.00  \n",
       "550960001218                       0.00              7.00  \n",
       "550960001221                       0.00              4.00  \n",
       "550960001235                       0.00              4.00  \n",
       "550960001237                       2.00              4.00  \n",
       "550960001247                       0.00             13.00  \n",
       "550960001273                       0.00             16.00  \n",
       "550960001306                       0.00              0.00  \n",
       "550960002272                       0.00              4.00  \n",
       "550960002339                       2.00              7.00  \n",
       "550960002555                       0.00              0.00  \n",
       "550960002567                       0.00              0.00  \n",
       "550960002577                       0.00              2.00  \n",
       "550960002603                       2.00              2.00  \n",
       "550960002608                       0.00              4.00  \n",
       "550960002700                       2.00              7.00  \n",
       "550960002707                       0.00              2.00  \n",
       "550960002730                       2.00              4.00  \n",
       "550960002755                       0.00              0.00  \n",
       "550960002760                       0.00              0.00  \n",
       "550960002782                       0.00              2.00  \n",
       "550960002822                       0.00              2.00  \n",
       "550960002931                       0.00             13.00  \n",
       "550960002967                       2.00              7.00  \n",
       "550960002979                       4.00              7.00  \n",
       "550960002980                       2.00              2.00  \n",
       "550960002993                       0.00              4.00  \n",
       "550960003010                       0.00              0.00  \n",
       "550004202234                       0.00              2.00  \n",
       "550006602865                       2.00              0.00  \n",
       "550006902920                       0.00              2.00  \n",
       "550007402496                       0.00              0.00  \n",
       "550960003342                       2.00              4.00  \n",
       "550960003370                       0.00              0.00  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Milwaukee publicly funded school ethnicities\n",
    "\n",
    "milwaukee_ethnicity = pd.DataFrame(columns = ['Charter', 'Alternative', 'Private', 'Public', 'Other', 'Black', 'White',\n",
    "                                  'Hispanic', 'American Indian or Alaska Native', 'Asian', \n",
    "                                  'Hawaiian/ Pacific Islander', 'Two or more races'])\n",
    "\n",
    "for id in milwaukee_demographics.index.tolist():\n",
    "    if id in milwaukee_school_enrollments.index.tolist():\n",
    "        milwaukee_ethnicity.loc[id] = milwaukee_school_enrollments.loc[id, ['Charter', 'Alternative', 'Private',\n",
    "                                                                            'Public', 'Other', 'Black', 'White',\n",
    "                                  'Hispanic', 'American Indian or Alaska Native', 'Asian', \n",
    "                                  'Hawaiian/ Pacific Islander', 'Two or more races']]\n",
    "        milwaukee_ethnicity.loc[id , ['Black', 'White', 'Hispanic', 'American Indian or Alaska Native', 'Asian', \n",
    "                                      'Hawaiian/ Pacific Islander', \n",
    "                                      'Two or more races']] = milwaukee_demographics.loc[id, [\n",
    "            u'American Indian or Alaska Native', u'Asian',\n",
    "       u'Hawaiian/ Pacific Islander', u'Hispanic', u'Black', u'White',\n",
    "       u'Two or more races']]\n",
    "    elif id in [str(loc) for loc in locations.index.tolist()]:\n",
    "        milwaukee_ethnicity.loc[id , ['Black', 'White', 'Hispanic', 'American Indian or Alaska Native', 'Asian', \n",
    "                                      'Hawaiian/ Pacific Islander', \n",
    "                                      'Two or more races']] = milwaukee_demographics.loc[id, [\n",
    "            u'American Indian or Alaska Native', u'Asian',\n",
    "        u'Hawaiian/ Pacific Islander', u'Hispanic', u'Black', u'White',\n",
    "        u'Two or more races']]\n",
    "        if directory.loc[id, 'CHARTER_TEXT'] == 'Yes':\n",
    "            milwaukee_ethnicity.loc[id, 'Charter'] = 'Yes'\n",
    "            milwaukee_ethnicity.loc[id, 'Public'] = 'N'\n",
    "            milwaukee_ethnicity.loc[id, 'Private'] = 'N'\n",
    "            milwaukee_ethnicity.loc[id, 'Alternative'] = 'N'\n",
    "            milwaukee_ethnicity.loc[id, 'Other'] = 'N'\n",
    "        else:\n",
    "            milwaukee_ethnicity.loc[id, 'Charter'] = 'No'\n",
    "            if directory.loc[id, 'SCH_TYPE_TEXT'] == 'Regular School':\n",
    "                milwaukee_ethnicity.loc[id, 'Public'] = 'Y'\n",
    "                milwaukee_ethnicity.loc[id, 'Private'] = 'N'\n",
    "                milwaukee_ethnicity.loc[id, 'Alternative'] = 'N'\n",
    "                milwaukee_ethnicity.loc[id, 'Other'] = 'N'   \n",
    "            elif directory.loc[id, 'SCH_TYPE_TEXT'] == 'Alternative Education School':\n",
    "                milwaukee_ethnicity.loc[id, 'Public'] = 'N'\n",
    "                milwaukee_ethnicity.loc[id, 'Private'] = 'N'\n",
    "                milwaukee_ethnicity.loc[id, 'Alternative'] = 'Y'\n",
    "                milwaukee_ethnicity.loc[id, 'Other'] = 'N'   \n",
    "            else: \n",
    "                milwaukee_ethnicity.loc[id, 'Public'] = 'N'\n",
    "                milwaukee_ethnicity.loc[id, 'Private'] = 'N'\n",
    "                milwaukee_ethnicity.loc[id, 'Alternative'] = 'N'\n",
    "                milwaukee_ethnicity.loc[id, 'Other'] = 'Y'   \n",
    "        \n",
    "milwaukee_ethnicity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Charter</th>\n",
       "      <th>Alternative</th>\n",
       "      <th>Private</th>\n",
       "      <th>Public</th>\n",
       "      <th>Other</th>\n",
       "      <th>Black</th>\n",
       "      <th>White</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Hawaiian/ Pacific Islander</th>\n",
       "      <th>Two or more races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>320000100759</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>295.00</td>\n",
       "      <td>445.00</td>\n",
       "      <td>310.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>64.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100842</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>4.00</td>\n",
       "      <td>169.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>19.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100843</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>22.00</td>\n",
       "      <td>322.00</td>\n",
       "      <td>109.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>52.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100856</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>7.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>394.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000011</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>235.00</td>\n",
       "      <td>532.00</td>\n",
       "      <td>1099.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>91.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>109.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000020</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>25.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>8.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000030</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>316.00</td>\n",
       "      <td>409.00</td>\n",
       "      <td>1699.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>550.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>106.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000101</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>47.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>26.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000103</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000108</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>37.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000114</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>382.00</td>\n",
       "      <td>211.00</td>\n",
       "      <td>1852.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>64.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000277</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>121.00</td>\n",
       "      <td>805.00</td>\n",
       "      <td>454.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>157.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>148.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000294</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>28.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000328</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>184.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000406</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>544.00</td>\n",
       "      <td>529.00</td>\n",
       "      <td>1183.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>106.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>133.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000419</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>100.00</td>\n",
       "      <td>271.00</td>\n",
       "      <td>388.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>223.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>94.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000444</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>11.00</td>\n",
       "      <td>85.00</td>\n",
       "      <td>64.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>13.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000446</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>301.00</td>\n",
       "      <td>1594.00</td>\n",
       "      <td>658.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>292.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>196.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000460</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>406.00</td>\n",
       "      <td>40.00</td>\n",
       "      <td>853.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000493</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>517.00</td>\n",
       "      <td>1324.00</td>\n",
       "      <td>802.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>118.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>223.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000495</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>307.00</td>\n",
       "      <td>115.00</td>\n",
       "      <td>2008.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>49.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000499</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>7.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000501</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>13.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>20.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000517</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>2.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000595</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>487.00</td>\n",
       "      <td>1342.00</td>\n",
       "      <td>709.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>124.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>205.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000661</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>445.00</td>\n",
       "      <td>1483.00</td>\n",
       "      <td>634.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>157.00</td>\n",
       "      <td>40.00</td>\n",
       "      <td>217.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000666</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>523.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>133.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>25.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000683</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>2.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000694</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>28.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000749</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>49.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>235.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000755</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>139.00</td>\n",
       "      <td>724.00</td>\n",
       "      <td>568.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>262.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>124.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000778</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>34.00</td>\n",
       "      <td>172.00</td>\n",
       "      <td>484.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>16.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000745</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>130.00</td>\n",
       "      <td>109.00</td>\n",
       "      <td>133.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>31.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000598</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>10.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000599</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>13.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000609</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>130.00</td>\n",
       "      <td>598.00</td>\n",
       "      <td>430.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Charter Alternative Private Public Other   Black    White  \\\n",
       "320000100759     Yes           N       N      N     N  295.00   445.00   \n",
       "320000100842     Yes           N       N      N     N    4.00   169.00   \n",
       "320000100843     Yes           N       N      N     N   22.00   322.00   \n",
       "320000100856     Yes           N       N      N     N    7.00    19.00   \n",
       "320006000011      No           N       N      Y     N  235.00   532.00   \n",
       "320006000020      No           Y       N      N     N   25.00     7.00   \n",
       "320006000030      No           N       N      Y     N  316.00   409.00   \n",
       "320006000101      No           Y       N      N     N   47.00    11.00   \n",
       "320006000103      No           Y       N      N     N   10.00     2.00   \n",
       "320006000108      No           N       N      N     Y   37.00    43.00   \n",
       "320006000114      No           N       N      Y     N  382.00   211.00   \n",
       "320006000277      No           N       N      Y     N  121.00   805.00   \n",
       "320006000294      No           Y       N      N     N   28.00     5.00   \n",
       "320006000328      No           Y       N      N     N    4.00     4.00   \n",
       "320006000406      No           N       N      Y     N  544.00   529.00   \n",
       "320006000419      No           N       N      Y     N  100.00   271.00   \n",
       "320006000444      No           N       N      Y     N   11.00    85.00   \n",
       "320006000446      No           N       N      Y     N  301.00  1594.00   \n",
       "320006000460      No           N       N      Y     N  406.00    40.00   \n",
       "320006000493      No           N       N      Y     N  517.00  1324.00   \n",
       "320006000495      No           N       N      Y     N  307.00   115.00   \n",
       "320006000499      No           Y       N      N     N    7.00     8.00   \n",
       "320006000501      No           Y       N      N     N   13.00     5.00   \n",
       "320006000517      No           N       N      N     Y    2.00     5.00   \n",
       "320006000595      No           N       N      Y     N  487.00  1342.00   \n",
       "320006000661      No           N       N      Y     N  445.00  1483.00   \n",
       "320006000666     Yes           N       N      N     N  523.00     7.00   \n",
       "320006000683      No           N       N      N     Y    2.00    16.00   \n",
       "320006000694      No           N       N      N     Y   28.00    31.00   \n",
       "320006000749     Yes           N       N      N     N   49.00    43.00   \n",
       "320006000755      No           N       N      Y     N  139.00   724.00   \n",
       "320006000778      No           N       N      Y     N   34.00   172.00   \n",
       "320006000745     Yes           N       N      N     N  130.00   109.00   \n",
       "320006000598      No           Y       N      N     N   10.00    10.00   \n",
       "320006000599      No           Y       N      N     N   13.00     7.00   \n",
       "320006000609     Yes           N       N      N     N  130.00   598.00   \n",
       "\n",
       "             Hispanic American Indian or Alaska Native   Asian  \\\n",
       "320000100759   310.00                            10.00   64.00   \n",
       "320000100842    46.00                             0.00    4.00   \n",
       "320000100843   109.00                             4.00   13.00   \n",
       "320000100856   394.00                             2.00    4.00   \n",
       "320006000011  1099.00                            13.00   91.00   \n",
       "320006000020    19.00                             2.00    2.00   \n",
       "320006000030  1699.00                            10.00  550.00   \n",
       "320006000101    26.00                             5.00    2.00   \n",
       "320006000103    52.00                             0.00    2.00   \n",
       "320006000108    22.00                             2.00    7.00   \n",
       "320006000114  1852.00                            13.00   49.00   \n",
       "320006000277   454.00                             5.00  157.00   \n",
       "320006000294    11.00                             0.00    0.00   \n",
       "320006000328   184.00                             0.00    4.00   \n",
       "320006000406  1183.00                            10.00  106.00   \n",
       "320006000419   388.00                             4.00  223.00   \n",
       "320006000444    64.00                             0.00   34.00   \n",
       "320006000446   658.00                            16.00  292.00   \n",
       "320006000460   853.00                             4.00   25.00   \n",
       "320006000493   802.00                            16.00  118.00   \n",
       "320006000495  2008.00                             7.00   34.00   \n",
       "320006000499     7.00                             0.00    2.00   \n",
       "320006000501    20.00                             2.00    0.00   \n",
       "320006000517     2.00                             0.00    0.00   \n",
       "320006000595   709.00                            19.00  124.00   \n",
       "320006000661   634.00                            28.00  157.00   \n",
       "320006000666   133.00                             4.00    4.00   \n",
       "320006000683    10.00                             2.00    0.00   \n",
       "320006000694    13.00                             2.00    2.00   \n",
       "320006000749   235.00                             4.00    2.00   \n",
       "320006000755   568.00                             4.00  262.00   \n",
       "320006000778   484.00                             4.00   25.00   \n",
       "320006000745   133.00                             4.00    4.00   \n",
       "320006000598    10.00                             0.00    0.00   \n",
       "320006000599    22.00                             0.00    2.00   \n",
       "320006000609   430.00                            10.00   28.00   \n",
       "\n",
       "             Hawaiian/ Pacific Islander Two or more races  \n",
       "320000100759                      43.00            100.00  \n",
       "320000100842                       4.00             19.00  \n",
       "320000100843                       4.00             52.00  \n",
       "320000100856                       2.00              4.00  \n",
       "320006000011                      25.00            109.00  \n",
       "320006000020                       2.00              8.00  \n",
       "320006000030                      52.00            106.00  \n",
       "320006000101                       0.00              8.00  \n",
       "320006000103                       0.00              2.00  \n",
       "320006000108                       4.00             10.00  \n",
       "320006000114                      25.00             64.00  \n",
       "320006000277                      19.00            148.00  \n",
       "320006000294                       0.00              4.00  \n",
       "320006000328                       0.00              0.00  \n",
       "320006000406                      43.00            133.00  \n",
       "320006000419                      16.00             94.00  \n",
       "320006000444                       7.00             13.00  \n",
       "320006000446                      46.00            196.00  \n",
       "320006000460                       7.00             34.00  \n",
       "320006000493                      52.00            223.00  \n",
       "320006000495                      22.00             49.00  \n",
       "320006000499                       0.00              2.00  \n",
       "320006000501                       0.00              2.00  \n",
       "320006000517                       0.00              2.00  \n",
       "320006000595                      49.00            205.00  \n",
       "320006000661                      40.00            217.00  \n",
       "320006000666                       0.00             25.00  \n",
       "320006000683                       0.00              2.00  \n",
       "320006000694                       2.00              2.00  \n",
       "320006000749                       4.00              7.00  \n",
       "320006000755                      31.00            124.00  \n",
       "320006000778                       7.00             16.00  \n",
       "320006000745                       4.00             31.00  \n",
       "320006000598                       0.00              4.00  \n",
       "320006000599                       2.00              0.00  \n",
       "320006000609                      10.00            100.00  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Las Vegas publicly funded school ethnicities\n",
    "\n",
    "vegas_ethnicity = pd.DataFrame(columns = ['Charter', 'Alternative', 'Private', 'Public', 'Other', 'Black', 'White',\n",
    "                                  'Hispanic', 'American Indian or Alaska Native', 'Asian', \n",
    "                                  'Hawaiian/ Pacific Islander', 'Two or more races'])\n",
    "\n",
    "for id in vegas_demographics.index.tolist():\n",
    "    if id in vegas_school_enrollments.index.tolist():\n",
    "        vegas_ethnicity.loc[id] = vegas_school_enrollments.loc[id, ['Charter', 'Alternative', 'Private',\n",
    "                                                                            'Public', 'Other', 'Black', 'White',\n",
    "                                  'Hispanic', 'American Indian or Alaska Native', 'Asian', \n",
    "                                  'Hawaiian/ Pacific Islander', 'Two or more races']]\n",
    "        vegas_ethnicity.loc[id , ['Black', 'White', 'Hispanic', 'American Indian or Alaska Native', 'Asian', \n",
    "                                      'Hawaiian/ Pacific Islander', \n",
    "                                      'Two or more races']] = vegas_demographics.loc[id, [\n",
    "            u'American Indian or Alaska Native', u'Asian',\n",
    "       u'Hawaiian/ Pacific Islander', u'Hispanic', u'Black', u'White',\n",
    "       u'Two or more races']]\n",
    "    elif id in [str(loc) for loc in locations.index.tolist()]:\n",
    "        vegas_ethnicity.loc[id , ['Black', 'White', 'Hispanic', 'American Indian or Alaska Native', 'Asian', \n",
    "                                      'Hawaiian/ Pacific Islander', \n",
    "                                      'Two or more races']] = vegas_demographics.loc[id, [\n",
    "            u'American Indian or Alaska Native', u'Asian',\n",
    "        u'Hawaiian/ Pacific Islander', u'Hispanic', u'Black', u'White',\n",
    "        u'Two or more races']]\n",
    "        if directory.loc[id, 'CHARTER_TEXT'] == 'Yes':\n",
    "            vegas_ethnicity.loc[id, 'Charter'] = 'Yes'\n",
    "            vegas_ethnicity.loc[id, 'Public'] = 'N'\n",
    "            vegas_ethnicity.loc[id, 'Private'] = 'N'\n",
    "            vegas_ethnicity.loc[id, 'Alternative'] = 'N'\n",
    "            vegas_ethnicity.loc[id, 'Other'] = 'N'\n",
    "        else:\n",
    "            vegas_ethnicity.loc[id, 'Charter'] = 'No'\n",
    "            if directory.loc[id, 'SCH_TYPE_TEXT'] == 'Regular School':\n",
    "                vegas_ethnicity.loc[id, 'Public'] = 'Y'\n",
    "                vegas_ethnicity.loc[id, 'Private'] = 'N'\n",
    "                vegas_ethnicity.loc[id, 'Alternative'] = 'N'\n",
    "                vegas_ethnicity.loc[id, 'Other'] = 'N'   \n",
    "            elif directory.loc[id, 'SCH_TYPE_TEXT'] == 'Alternative Education School':\n",
    "                vegas_ethnicity.loc[id, 'Public'] = 'N'\n",
    "                vegas_ethnicity.loc[id, 'Private'] = 'N'\n",
    "                vegas_ethnicity.loc[id, 'Alternative'] = 'Y'\n",
    "                vegas_ethnicity.loc[id, 'Other'] = 'N'   \n",
    "            else: \n",
    "                vegas_ethnicity.loc[id, 'Public'] = 'N'\n",
    "                vegas_ethnicity.loc[id, 'Private'] = 'N'\n",
    "                vegas_ethnicity.loc[id, 'Alternative'] = 'N'\n",
    "                vegas_ethnicity.loc[id, 'Other'] = 'Y'   \n",
    "        \n",
    "vegas_ethnicity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, I need to add the private school data here, which should be fairly straightforward. In fact, as things currently stand, I can probably just add the bottom of ```milwaukee_school_enrollments``` and ```vegas_school_enrollments``` to these to get the private school enrollment data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "for ident in milwaukee_school_enrollments.index.tolist():\n",
    "    if milwaukee_school_enrollments.loc[ident, 'Private'] == 'Y':\n",
    "        milwaukee_ethnicity.loc[ident,[u'Charter', u'Alternative', u'Private', u'Public', u'Other', u'Black',\n",
    "       u'White', u'Hispanic', u'American Indian or Alaska Native', u'Asian',\n",
    "       u'Hawaiian/ Pacific Islander', u'Two or more races']] = milwaukee_school_enrollments.loc[ident,[u'Charter',\n",
    "                                                        u'Alternative', u'Private', u'Public', u'Other',  u'Black',\n",
    "                                               u'White', u'Hispanic', u'American Indian or Alaska Native', u'Asian',\n",
    "                                               u'Hawaiian/ Pacific Islander', u'Two or more races']]\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "for ident in vegas_school_enrollments.index.tolist():\n",
    "    if vegas_school_enrollments.loc[ident, 'Private'] == 'Y':\n",
    "        vegas_ethnicity.loc[ident,[u'Charter', u'Alternative', u'Private', u'Public', u'Other', u'Black',\n",
    "       u'White', u'Hispanic', u'American Indian or Alaska Native', u'Asian',\n",
    "       u'Hawaiian/ Pacific Islander', u'Two or more races']] = vegas_school_enrollments.loc[ident,[u'Charter',\n",
    "                                                        u'Alternative', u'Private', u'Public', u'Other',  u'Black',\n",
    "                                               u'White', u'Hispanic', u'American Indian or Alaska Native', u'Asian',\n",
    "                                               u'Hawaiian/ Pacific Islander', u'Two or more races']]\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Charter</th>\n",
       "      <th>Alternative</th>\n",
       "      <th>Private</th>\n",
       "      <th>Public</th>\n",
       "      <th>Other</th>\n",
       "      <th>Black</th>\n",
       "      <th>White</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Hawaiian/ Pacific Islander</th>\n",
       "      <th>Two or more races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>320000100759</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>295.00</td>\n",
       "      <td>445.00</td>\n",
       "      <td>310.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>64.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100842</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>4.00</td>\n",
       "      <td>169.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>19.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100843</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>22.00</td>\n",
       "      <td>322.00</td>\n",
       "      <td>109.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>52.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320000100856</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>7.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>394.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000011</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>235.00</td>\n",
       "      <td>532.00</td>\n",
       "      <td>1099.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>91.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>109.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000020</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>25.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>8.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000030</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>316.00</td>\n",
       "      <td>409.00</td>\n",
       "      <td>1699.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>550.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>106.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000101</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>47.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>26.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>8.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000103</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000108</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>37.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000114</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>382.00</td>\n",
       "      <td>211.00</td>\n",
       "      <td>1852.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>64.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000277</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>121.00</td>\n",
       "      <td>805.00</td>\n",
       "      <td>454.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>157.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>148.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000294</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>28.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000328</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>184.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000406</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>544.00</td>\n",
       "      <td>529.00</td>\n",
       "      <td>1183.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>106.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>133.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000419</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>100.00</td>\n",
       "      <td>271.00</td>\n",
       "      <td>388.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>223.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>94.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000444</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>11.00</td>\n",
       "      <td>85.00</td>\n",
       "      <td>64.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>13.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000446</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>301.00</td>\n",
       "      <td>1594.00</td>\n",
       "      <td>658.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>292.00</td>\n",
       "      <td>46.00</td>\n",
       "      <td>196.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000460</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>406.00</td>\n",
       "      <td>40.00</td>\n",
       "      <td>853.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>34.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000493</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>517.00</td>\n",
       "      <td>1324.00</td>\n",
       "      <td>802.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>118.00</td>\n",
       "      <td>52.00</td>\n",
       "      <td>223.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000495</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>307.00</td>\n",
       "      <td>115.00</td>\n",
       "      <td>2008.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>49.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000499</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>7.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000501</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>13.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>20.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000517</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>2.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000595</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>487.00</td>\n",
       "      <td>1342.00</td>\n",
       "      <td>709.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>124.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>205.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000661</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>445.00</td>\n",
       "      <td>1483.00</td>\n",
       "      <td>634.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>157.00</td>\n",
       "      <td>40.00</td>\n",
       "      <td>217.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000666</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>523.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>133.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>25.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000683</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>2.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000694</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>28.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000749</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>49.00</td>\n",
       "      <td>43.00</td>\n",
       "      <td>235.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000755</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>139.00</td>\n",
       "      <td>724.00</td>\n",
       "      <td>568.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>262.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>124.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000778</th>\n",
       "      <td>No</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>34.00</td>\n",
       "      <td>172.00</td>\n",
       "      <td>484.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>25.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>16.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000745</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>130.00</td>\n",
       "      <td>109.00</td>\n",
       "      <td>133.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>31.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000598</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>10.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000599</th>\n",
       "      <td>No</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>13.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>22.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320006000609</th>\n",
       "      <td>Yes</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>130.00</td>\n",
       "      <td>598.00</td>\n",
       "      <td>430.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A9502691</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A0106126</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1301861</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1924065</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>28</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>847227</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>4</td>\n",
       "      <td>117</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A0902103</th>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Charter Alternative Private Public Other   Black    White  \\\n",
       "320000100759     Yes           N       N      N     N  295.00   445.00   \n",
       "320000100842     Yes           N       N      N     N    4.00   169.00   \n",
       "320000100843     Yes           N       N      N     N   22.00   322.00   \n",
       "320000100856     Yes           N       N      N     N    7.00    19.00   \n",
       "320006000011      No           N       N      Y     N  235.00   532.00   \n",
       "320006000020      No           Y       N      N     N   25.00     7.00   \n",
       "320006000030      No           N       N      Y     N  316.00   409.00   \n",
       "320006000101      No           Y       N      N     N   47.00    11.00   \n",
       "320006000103      No           Y       N      N     N   10.00     2.00   \n",
       "320006000108      No           N       N      N     Y   37.00    43.00   \n",
       "320006000114      No           N       N      Y     N  382.00   211.00   \n",
       "320006000277      No           N       N      Y     N  121.00   805.00   \n",
       "320006000294      No           Y       N      N     N   28.00     5.00   \n",
       "320006000328      No           Y       N      N     N    4.00     4.00   \n",
       "320006000406      No           N       N      Y     N  544.00   529.00   \n",
       "320006000419      No           N       N      Y     N  100.00   271.00   \n",
       "320006000444      No           N       N      Y     N   11.00    85.00   \n",
       "320006000446      No           N       N      Y     N  301.00  1594.00   \n",
       "320006000460      No           N       N      Y     N  406.00    40.00   \n",
       "320006000493      No           N       N      Y     N  517.00  1324.00   \n",
       "320006000495      No           N       N      Y     N  307.00   115.00   \n",
       "320006000499      No           Y       N      N     N    7.00     8.00   \n",
       "320006000501      No           Y       N      N     N   13.00     5.00   \n",
       "320006000517      No           N       N      N     Y    2.00     5.00   \n",
       "320006000595      No           N       N      Y     N  487.00  1342.00   \n",
       "320006000661      No           N       N      Y     N  445.00  1483.00   \n",
       "320006000666     Yes           N       N      N     N  523.00     7.00   \n",
       "320006000683      No           N       N      N     Y    2.00    16.00   \n",
       "320006000694      No           N       N      N     Y   28.00    31.00   \n",
       "320006000749     Yes           N       N      N     N   49.00    43.00   \n",
       "320006000755      No           N       N      Y     N  139.00   724.00   \n",
       "320006000778      No           N       N      Y     N   34.00   172.00   \n",
       "320006000745     Yes           N       N      N     N  130.00   109.00   \n",
       "320006000598      No           Y       N      N     N   10.00    10.00   \n",
       "320006000599      No           Y       N      N     N   13.00     7.00   \n",
       "320006000609     Yes           N       N      N     N  130.00   598.00   \n",
       "A9502691           N           N       Y      N     N       0        1   \n",
       "A0106126           N           N       Y      N     N       2       14   \n",
       "A1301861           N           N       Y      N     N       1        5   \n",
       "1924065            N           N       Y      N     N       2       28   \n",
       "847227             N           N       Y      N     N       4      117   \n",
       "A0902103           N           N       Y      N     N       2       19   \n",
       "\n",
       "             Hispanic American Indian or Alaska Native   Asian  \\\n",
       "320000100759   310.00                            10.00   64.00   \n",
       "320000100842    46.00                             0.00    4.00   \n",
       "320000100843   109.00                             4.00   13.00   \n",
       "320000100856   394.00                             2.00    4.00   \n",
       "320006000011  1099.00                            13.00   91.00   \n",
       "320006000020    19.00                             2.00    2.00   \n",
       "320006000030  1699.00                            10.00  550.00   \n",
       "320006000101    26.00                             5.00    2.00   \n",
       "320006000103    52.00                             0.00    2.00   \n",
       "320006000108    22.00                             2.00    7.00   \n",
       "320006000114  1852.00                            13.00   49.00   \n",
       "320006000277   454.00                             5.00  157.00   \n",
       "320006000294    11.00                             0.00    0.00   \n",
       "320006000328   184.00                             0.00    4.00   \n",
       "320006000406  1183.00                            10.00  106.00   \n",
       "320006000419   388.00                             4.00  223.00   \n",
       "320006000444    64.00                             0.00   34.00   \n",
       "320006000446   658.00                            16.00  292.00   \n",
       "320006000460   853.00                             4.00   25.00   \n",
       "320006000493   802.00                            16.00  118.00   \n",
       "320006000495  2008.00                             7.00   34.00   \n",
       "320006000499     7.00                             0.00    2.00   \n",
       "320006000501    20.00                             2.00    0.00   \n",
       "320006000517     2.00                             0.00    0.00   \n",
       "320006000595   709.00                            19.00  124.00   \n",
       "320006000661   634.00                            28.00  157.00   \n",
       "320006000666   133.00                             4.00    4.00   \n",
       "320006000683    10.00                             2.00    0.00   \n",
       "320006000694    13.00                             2.00    2.00   \n",
       "320006000749   235.00                             4.00    2.00   \n",
       "320006000755   568.00                             4.00  262.00   \n",
       "320006000778   484.00                             4.00   25.00   \n",
       "320006000745   133.00                             4.00    4.00   \n",
       "320006000598    10.00                             0.00    0.00   \n",
       "320006000599    22.00                             0.00    2.00   \n",
       "320006000609   430.00                            10.00   28.00   \n",
       "A9502691            0                                0       0   \n",
       "A0106126            8                                0       3   \n",
       "A1301861            4                                0       2   \n",
       "1924065             4                                0       2   \n",
       "847227              6                                0       3   \n",
       "A0902103            7                                0      40   \n",
       "\n",
       "             Hawaiian/ Pacific Islander Two or more races  \n",
       "320000100759                      43.00            100.00  \n",
       "320000100842                       4.00             19.00  \n",
       "320000100843                       4.00             52.00  \n",
       "320000100856                       2.00              4.00  \n",
       "320006000011                      25.00            109.00  \n",
       "320006000020                       2.00              8.00  \n",
       "320006000030                      52.00            106.00  \n",
       "320006000101                       0.00              8.00  \n",
       "320006000103                       0.00              2.00  \n",
       "320006000108                       4.00             10.00  \n",
       "320006000114                      25.00             64.00  \n",
       "320006000277                      19.00            148.00  \n",
       "320006000294                       0.00              4.00  \n",
       "320006000328                       0.00              0.00  \n",
       "320006000406                      43.00            133.00  \n",
       "320006000419                      16.00             94.00  \n",
       "320006000444                       7.00             13.00  \n",
       "320006000446                      46.00            196.00  \n",
       "320006000460                       7.00             34.00  \n",
       "320006000493                      52.00            223.00  \n",
       "320006000495                      22.00             49.00  \n",
       "320006000499                       0.00              2.00  \n",
       "320006000501                       0.00              2.00  \n",
       "320006000517                       0.00              2.00  \n",
       "320006000595                      49.00            205.00  \n",
       "320006000661                      40.00            217.00  \n",
       "320006000666                       0.00             25.00  \n",
       "320006000683                       0.00              2.00  \n",
       "320006000694                       2.00              2.00  \n",
       "320006000749                       4.00              7.00  \n",
       "320006000755                      31.00            124.00  \n",
       "320006000778                       7.00             16.00  \n",
       "320006000745                       4.00             31.00  \n",
       "320006000598                       0.00              4.00  \n",
       "320006000599                       2.00              0.00  \n",
       "320006000609                      10.00            100.00  \n",
       "A9502691                              0                 0  \n",
       "A0106126                              0                 6  \n",
       "A1301861                              1                 1  \n",
       "1924065                               0                 0  \n",
       "847227                                1                 1  \n",
       "A0902103                              1                 2  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_ethnicity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From these two dataframes, I want to produce four summary dataframes, two for each city. The first pair of dataframes will contain the racial breakdown of each type of school for each of the two cities. The second pair of dataframes will contain the breakdown of type of school attended for each race for each of the two cities. For both of these, we begin by computing summaries of the data in the ```vegas_ethnicity``` and ```milwaukee_ethnicity``` dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>9636.0</td>\n",
       "      <td>4345.0</td>\n",
       "      <td>13455.0</td>\n",
       "      <td>2247.0</td>\n",
       "      <td>153.0</td>\n",
       "      <td>441.0</td>\n",
       "      <td>1731.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>1712.0</td>\n",
       "      <td>1160.0</td>\n",
       "      <td>1790.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>338.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>59.0</td>\n",
       "      <td>157.0</td>\n",
       "      <td>351.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>184.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>95.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>11686.0</td>\n",
       "      <td>5742.0</td>\n",
       "      <td>15672.0</td>\n",
       "      <td>2443.0</td>\n",
       "      <td>206.0</td>\n",
       "      <td>525.0</td>\n",
       "      <td>2125.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               White   Black  Hispanic   Asian  Native American  \\\n",
       "Public        9636.0  4345.0   13455.0  2247.0            153.0   \n",
       "Charter       1712.0  1160.0    1790.0   123.0             38.0   \n",
       "Alternative     59.0   157.0     351.0    14.0              9.0   \n",
       "Private        184.0    11.0      29.0    50.0              0.0   \n",
       "Other           95.0    69.0      47.0     9.0              6.0   \n",
       "Total        11686.0  5742.0   15672.0  2443.0            206.0   \n",
       "\n",
       "             Pacific Islander  Two Races  \n",
       "Public                  441.0     1731.0  \n",
       "Charter                  71.0      338.0  \n",
       "Alternative               4.0       30.0  \n",
       "Private                   3.0       10.0  \n",
       "Other                     6.0       16.0  \n",
       "Total                   525.0     2125.0  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for Las vegas (type of school enrollments broken up by race)\n",
    "\n",
    "schools = ['Public', 'Charter', 'Alternative', 'Private', 'Other', 'Total']\n",
    "races = ['White','Black','Hispanic','Asian','Native American','Pacific Islander', 'Two Races']\n",
    "race_dict = {'White': 'White', 'Black': 'Black', 'Hispanic': 'Hispanic', 'Asian': 'Asian', \n",
    "             'Native American': 'American Indian or Alaska Native',\n",
    "             'Pacific Islander': 'Hawaiian/ Pacific Islander', 'Two Races': 'Two or more races'}\n",
    "\n",
    "vegas_count_school_by_race = pd.DataFrame(0, index = schools,\n",
    "                                        columns = races)\n",
    "\n",
    "for ident in vegas_ethnicity.index.tolist():\n",
    "    if vegas_ethnicity.loc[ident, 'Charter'] in ['Y', 'Yes', 'yes']:\n",
    "        for race in races:\n",
    "            vegas_count_school_by_race.loc['Charter', race] += float(vegas_ethnicity.loc[ident, \n",
    "                                                                                                 race_dict[race]])\n",
    "          \n",
    "    elif vegas_ethnicity.loc[ident, 'Public'] in ['Y', 'Yes', 'yes']:\n",
    "        for race in races:\n",
    "            vegas_count_school_by_race.loc['Public', race] += float(vegas_ethnicity.loc[ident,\n",
    "                                                                                                race_dict[race]])\n",
    "\n",
    "\n",
    "    elif vegas_ethnicity.loc[ident, 'Alternative'] in ['Y', 'Yes', 'yes']:\n",
    "        for race in races:\n",
    "            vegas_count_school_by_race.loc['Alternative', race] += float(vegas_ethnicity.loc[ident, \n",
    "                                                                                                     race_dict[race]])\n",
    "\n",
    "\n",
    "    elif vegas_ethnicity.loc[ident, 'Private'] in ['Y', 'Yes', 'yes']:\n",
    "        for race in races:\n",
    "            vegas_count_school_by_race.loc['Private', race] += float(vegas_ethnicity.loc[ident, \n",
    "                                                                                                 race_dict[race]])\n",
    "\n",
    "\n",
    "    else:\n",
    "        for race in races:\n",
    "            vegas_count_school_by_race.loc['Other', race] += float(vegas_ethnicity.loc[ident, \n",
    "                                                                                               race_dict[race]])\n",
    "\n",
    "for race in races:\n",
    "\n",
    "    vegas_count_school_by_race.loc['Total', race] = sum(vegas_count_school_by_race[race])\n",
    "        \n",
    "vegas_count_school_by_race"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>2475.0</td>\n",
       "      <td>12006.0</td>\n",
       "      <td>3951.0</td>\n",
       "      <td>1163.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>147.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>204.0</td>\n",
       "      <td>3335.0</td>\n",
       "      <td>996.0</td>\n",
       "      <td>1328.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>61.0</td>\n",
       "      <td>1007.0</td>\n",
       "      <td>227.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>2429.0</td>\n",
       "      <td>2920.0</td>\n",
       "      <td>1355.0</td>\n",
       "      <td>226.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>239.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>5169.0</td>\n",
       "      <td>19268.0</td>\n",
       "      <td>6529.0</td>\n",
       "      <td>2727.0</td>\n",
       "      <td>230.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>425.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              White    Black  Hispanic   Asian  Native American  \\\n",
       "Public       2475.0  12006.0    3951.0  1163.0            152.0   \n",
       "Charter       204.0   3335.0     996.0  1328.0             33.0   \n",
       "Alternative    61.0   1007.0     227.0    10.0             14.0   \n",
       "Private      2429.0   2920.0    1355.0   226.0             31.0   \n",
       "Other           0.0      0.0       0.0     0.0              0.0   \n",
       "Total        5169.0  19268.0    6529.0  2727.0            230.0   \n",
       "\n",
       "             Pacific Islander  Two Races  \n",
       "Public                   18.0      147.0  \n",
       "Charter                  12.0       24.0  \n",
       "Alternative               0.0       15.0  \n",
       "Private                   0.0      239.0  \n",
       "Other                     0.0        0.0  \n",
       "Total                    30.0      425.0  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for Las milwaukee (type of school enrollments broken up by race)\n",
    "\n",
    "schools = ['Public', 'Charter', 'Alternative', 'Private', 'Other', 'Total']\n",
    "races = ['White','Black','Hispanic','Asian','Native American','Pacific Islander', 'Two Races']\n",
    "race_dict = {'White': 'White', 'Black': 'Black', 'Hispanic': 'Hispanic', 'Asian': 'Asian', \n",
    "             'Native American': 'American Indian or Alaska Native',\n",
    "             'Pacific Islander': 'Hawaiian/ Pacific Islander', 'Two Races': 'Two or more races'}\n",
    "\n",
    "milwaukee_count_school_by_race = pd.DataFrame(0, index = schools,\n",
    "                                        columns = races)\n",
    "\n",
    "for ident in milwaukee_ethnicity.index.tolist():\n",
    "    if milwaukee_ethnicity.loc[ident, 'Charter'] in ['Y', 'Yes', 'yes']:\n",
    "        for race in races:\n",
    "            milwaukee_count_school_by_race.loc['Charter', race] += float(milwaukee_ethnicity.loc[ident, \n",
    "                                                                                                 race_dict[race]])\n",
    "          \n",
    "    elif milwaukee_ethnicity.loc[ident, 'Public'] in ['Y', 'Yes', 'yes']:\n",
    "        for race in races:\n",
    "            milwaukee_count_school_by_race.loc['Public', race] += float(milwaukee_ethnicity.loc[ident,\n",
    "                                                                                                race_dict[race]])\n",
    "\n",
    "\n",
    "    elif milwaukee_ethnicity.loc[ident, 'Alternative'] in ['Y', 'Yes', 'yes']:\n",
    "        for race in races:\n",
    "            milwaukee_count_school_by_race.loc['Alternative', race] += float(milwaukee_ethnicity.loc[ident, \n",
    "                                                                                                     race_dict[race]])\n",
    "\n",
    "\n",
    "    elif milwaukee_ethnicity.loc[ident, 'Private'] in ['Y', 'Yes', 'yes']:\n",
    "        for race in races:\n",
    "            milwaukee_count_school_by_race.loc['Private', race] += float(milwaukee_ethnicity.loc[ident, \n",
    "                                                                                                 race_dict[race]])\n",
    "\n",
    "\n",
    "    else:\n",
    "        for race in races:\n",
    "            milwaukee_count_school_by_race.loc['Other', race] += float(milwaukee_ethnicity.loc[ident, \n",
    "                                                                                               race_dict[race]])\n",
    "\n",
    "for race in races:\n",
    "\n",
    "    milwaukee_count_school_by_race.loc['Total', race] = sum(milwaukee_count_school_by_race[race])\n",
    "        \n",
    "milwaukee_count_school_by_race"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we produce our dataframes:\n",
    "- ```vegas_percent_school_by_race``` and ```milwaukee_percent_school_by_race``` contain the breakdowns of school enrollments for each race into all of the available school types\n",
    "- ```vegas_percent_race_by_school``` and ```milwaukee_percent_race_by_school``` contain the racial breakdowns of the composed student bodies for each of the school types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>30.1</td>\n",
       "      <td>13.6</td>\n",
       "      <td>42.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>32008.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>32.7</td>\n",
       "      <td>22.2</td>\n",
       "      <td>34.2</td>\n",
       "      <td>2.4</td>\n",
       "      <td>0.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>6.5</td>\n",
       "      <td>5232.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>9.5</td>\n",
       "      <td>25.2</td>\n",
       "      <td>56.2</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.6</td>\n",
       "      <td>4.8</td>\n",
       "      <td>624.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>64.1</td>\n",
       "      <td>3.8</td>\n",
       "      <td>10.1</td>\n",
       "      <td>17.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>287.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>30.4</td>\n",
       "      <td>15.0</td>\n",
       "      <td>40.8</td>\n",
       "      <td>6.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>5.5</td>\n",
       "      <td>38399.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             White  Black  Hispanic  Asian  Native American  Pacific Islander  \\\n",
       "Public        30.1   13.6      42.0    7.0              0.5               1.4   \n",
       "Charter       32.7   22.2      34.2    2.4              0.7               1.4   \n",
       "Alternative    9.5   25.2      56.2    2.2              1.4               0.6   \n",
       "Private       64.1    3.8      10.1   17.4              0.0               1.0   \n",
       "Total         30.4   15.0      40.8    6.4              0.5               1.4   \n",
       "\n",
       "             Two Races    Total  \n",
       "Public             5.4  32008.0  \n",
       "Charter            6.5   5232.0  \n",
       "Alternative        4.8    624.0  \n",
       "Private            3.5    287.0  \n",
       "Total              5.5  38399.0  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for vegas \n",
    "\n",
    "schools = ['Public', 'Charter', 'Alternative', 'Private', 'Total']\n",
    "races = ['White','Black','Hispanic','Asian','Native American', 'Pacific Islander', 'Two Races']\n",
    "\n",
    "vegas_percent_school_by_race = pd.DataFrame(0, index = schools,\n",
    "                                        columns = races)\n",
    "\n",
    "for i in schools:\n",
    "    for j in races:\n",
    "        vegas_percent_school_by_race.loc[i,j] = round(100.0*vegas_count_school_by_race.loc[i,j]/\n",
    "                                                     vegas_count_school_by_race.loc['Total',j],1)\n",
    "\n",
    "vegas_percent_race_by_school = pd.DataFrame(0, index = schools,\n",
    "                                        columns = races)\n",
    "\n",
    "for school in schools:\n",
    "    vegas_percent_race_by_school.loc[school,'Total'] = vegas_count_school_by_race.sum(axis = 1)[school]\n",
    "\n",
    "for i in schools:\n",
    "    for j in races:\n",
    "        vegas_percent_race_by_school.loc[i,j] = round(100.0*vegas_count_school_by_race.loc[i,j]/\n",
    "                                                     vegas_percent_race_by_school.loc[i, 'Total'],1)\n",
    "\n",
    "vegas_percent_race_by_school"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "      <th>Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>12.4</td>\n",
       "      <td>60.3</td>\n",
       "      <td>19.8</td>\n",
       "      <td>5.8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.7</td>\n",
       "      <td>19912.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>3.4</td>\n",
       "      <td>56.2</td>\n",
       "      <td>16.8</td>\n",
       "      <td>22.4</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.4</td>\n",
       "      <td>5932.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>4.6</td>\n",
       "      <td>75.5</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1334.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>33.7</td>\n",
       "      <td>40.6</td>\n",
       "      <td>18.8</td>\n",
       "      <td>3.1</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.3</td>\n",
       "      <td>7200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>15.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>7.9</td>\n",
       "      <td>0.7</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>34378.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             White  Black  Hispanic  Asian  Native American  Pacific Islander  \\\n",
       "Public        12.4   60.3      19.8    5.8              0.8               0.1   \n",
       "Charter        3.4   56.2      16.8   22.4              0.6               0.2   \n",
       "Alternative    4.6   75.5      17.0    0.7              1.0               0.0   \n",
       "Private       33.7   40.6      18.8    3.1              0.4               0.0   \n",
       "Total         15.0   56.0      19.0    7.9              0.7               0.1   \n",
       "\n",
       "             Two Races    Total  \n",
       "Public             0.7  19912.0  \n",
       "Charter            0.4   5932.0  \n",
       "Alternative        1.1   1334.0  \n",
       "Private            3.3   7200.0  \n",
       "Total              1.2  34378.0  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for milwaukee \n",
    "\n",
    "schools = ['Public', 'Charter', 'Alternative', 'Private', 'Total']\n",
    "races = ['White','Black','Hispanic','Asian','Native American', 'Pacific Islander', 'Two Races']\n",
    "\n",
    "milwaukee_percent_school_by_race = pd.DataFrame(0, index = schools,\n",
    "                                        columns = races)\n",
    "\n",
    "for i in schools:\n",
    "    for j in races:\n",
    "        milwaukee_percent_school_by_race.loc[i,j] = round(100.0*milwaukee_count_school_by_race.loc[i,j]/\n",
    "                                                     milwaukee_count_school_by_race.loc['Total',j],1)\n",
    "\n",
    "milwaukee_percent_race_by_school = pd.DataFrame(0, index = schools,\n",
    "                                        columns = races)\n",
    "\n",
    "for school in schools:\n",
    "    milwaukee_percent_race_by_school.loc[school,'Total'] = milwaukee_count_school_by_race.sum(axis = 1)[school]\n",
    "\n",
    "for i in schools:\n",
    "    for j in races:\n",
    "        milwaukee_percent_race_by_school.loc[i,j] = round(100.0*milwaukee_count_school_by_race.loc[i,j]/\n",
    "                                                     milwaukee_percent_race_by_school.loc[i, 'Total'],1)\n",
    "\n",
    "milwaukee_percent_race_by_school\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>82.5</td>\n",
       "      <td>75.7</td>\n",
       "      <td>85.9</td>\n",
       "      <td>92.0</td>\n",
       "      <td>74.3</td>\n",
       "      <td>84.0</td>\n",
       "      <td>81.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>14.7</td>\n",
       "      <td>20.2</td>\n",
       "      <td>11.4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>18.4</td>\n",
       "      <td>13.5</td>\n",
       "      <td>15.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>0.5</td>\n",
       "      <td>2.7</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.6</td>\n",
       "      <td>4.4</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>1.6</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             White  Black  Hispanic  Asian  Native American  Pacific Islander  \\\n",
       "Public        82.5   75.7      85.9   92.0             74.3              84.0   \n",
       "Charter       14.7   20.2      11.4    5.0             18.4              13.5   \n",
       "Alternative    0.5    2.7       2.2    0.6              4.4               0.8   \n",
       "Private        1.6    0.2       0.2    2.0              0.0               0.6   \n",
       "Total        100.0  100.0     100.0  100.0            100.0             100.0   \n",
       "\n",
       "             Two Races  \n",
       "Public            81.5  \n",
       "Charter           15.9  \n",
       "Alternative        1.4  \n",
       "Private            0.5  \n",
       "Total            100.0  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_percent_school_by_race"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>47.9</td>\n",
       "      <td>62.3</td>\n",
       "      <td>60.5</td>\n",
       "      <td>42.6</td>\n",
       "      <td>66.1</td>\n",
       "      <td>60.0</td>\n",
       "      <td>34.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>3.9</td>\n",
       "      <td>17.3</td>\n",
       "      <td>15.3</td>\n",
       "      <td>48.7</td>\n",
       "      <td>14.3</td>\n",
       "      <td>40.0</td>\n",
       "      <td>5.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>1.2</td>\n",
       "      <td>5.2</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>6.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>47.0</td>\n",
       "      <td>15.2</td>\n",
       "      <td>20.8</td>\n",
       "      <td>8.3</td>\n",
       "      <td>13.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>56.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             White  Black  Hispanic  Asian  Native American  Pacific Islander  \\\n",
       "Public        47.9   62.3      60.5   42.6             66.1              60.0   \n",
       "Charter        3.9   17.3      15.3   48.7             14.3              40.0   \n",
       "Alternative    1.2    5.2       3.5    0.4              6.1               0.0   \n",
       "Private       47.0   15.2      20.8    8.3             13.5               0.0   \n",
       "Total        100.0  100.0     100.0  100.0            100.0             100.0   \n",
       "\n",
       "             Two Races  \n",
       "Public            34.6  \n",
       "Charter            5.6  \n",
       "Alternative        3.5  \n",
       "Private           56.2  \n",
       "Total            100.0  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_percent_school_by_race"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this point, I have a lot of numbers, but numbers in and of themselves are difficult to see patterns in. Let's begin by looking at a spread of side by side box plots of races broken down by school type. Here, because white, black, hispanic, and Asian students make up the bulk of the high school population, we will restrict to this data when creating subplots."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(2, 2, figsize = (15,8)) #, sharey = True)\n",
    "\n",
    "n_groups = 4\n",
    "\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.35\n",
    "\n",
    "opacity = 0.8\n",
    "error_config = {'ecolor': '0.3'}\n",
    "\n",
    "# subplot 1 (white students)\n",
    "\n",
    "rects1 = axs[0,0].bar(index, milwaukee_percent_school_by_race['White'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Milwaukee')\n",
    "\n",
    "rects2 = axs[0,0].bar(index + bar_width, vegas_percent_school_by_race['White'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Las Vegas')\n",
    "\n",
    "axs[0,0].set_xlabel('School Type')\n",
    "axs[0,0].set_ylabel('Percentage')\n",
    "axs[0,0].set_title('Enrollment of White Students by Type of School (percent of total)')\n",
    "axs[0,0].set_xticks(index + bar_width / 2)\n",
    "axs[0,0].set_xticklabels(('Public', 'Charter', 'Alternative', 'Private'))\n",
    "axs[0,0].set_ylim([0,100])\n",
    "axs[0,0].legend()\n",
    "\n",
    "# subplot 2 (black students)\n",
    "\n",
    "rects1 = axs[0,1].bar(index, milwaukee_percent_school_by_race['Black'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Milwaukee')\n",
    "\n",
    "rects2 = axs[0,1].bar(index + bar_width, vegas_percent_school_by_race['Black'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Las Vegas')\n",
    "\n",
    "axs[0,1].set_xlabel('School Type')\n",
    "axs[0,1].set_ylabel('Percentage')\n",
    "axs[0,1].set_ylim([0,100])\n",
    "axs[0,1].set_title('Enrollment of Black Students by Type of School (percent of total)')\n",
    "axs[0,1].set_xticks(index + bar_width / 2)\n",
    "axs[0,1].set_xticklabels(('Public', 'Charter', 'Alternative', 'Private'))\n",
    "axs[0,1].legend()\n",
    "\n",
    "# subplot 3 (hispanic students)\n",
    "\n",
    "rects1 = axs[1,0].bar(index, milwaukee_percent_school_by_race['Hispanic'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Milwaukee')\n",
    "\n",
    "rects2 = axs[1,0].bar(index + bar_width, vegas_percent_school_by_race['Hispanic'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Las Vegas')\n",
    "\n",
    "axs[1,0].set_xlabel('School Type')\n",
    "axs[1,0].set_ylabel('Percentage')\n",
    "axs[1,0].set_ylim([0,100])\n",
    "axs[1,0].set_title('Enrollment of Hispanic Students by Type of School (percent of total)')\n",
    "axs[1,0].set_xticks(index + bar_width / 2)\n",
    "axs[1,0].set_xticklabels(('Public', 'Charter', 'Alternative', 'Private'))\n",
    "axs[1,0].legend()\n",
    "\n",
    "# subplot 4 (asian students)\n",
    "\n",
    "rects1 = axs[1,1].bar(index, milwaukee_percent_school_by_race['Asian'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Milwaukee')\n",
    "\n",
    "rects2 = axs[1,1].bar(index + bar_width, vegas_percent_school_by_race['Asian'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Las Vegas')\n",
    "\n",
    "axs[1,1].set_xlabel('School Type')\n",
    "axs[1,1].set_ylabel('Percentage')\n",
    "axs[1,1].set_ylim([0,100])\n",
    "axs[1,1].set_title('Enrollment of Asian Students by Type of School (percent of total)')\n",
    "axs[1,1].set_xticks(index + bar_width / 2)\n",
    "axs[1,1].set_xticklabels(('Public', 'Charter', 'Alternative', 'Private'))\n",
    "axs[1,1].legend()\n",
    "\n",
    "\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From these graphs, we can clearly see the following:\n",
    "1. White students in Milwaukee enroll in private schools at far higher rates than do white students in Las Vegas. By contrast, white students in Las Vegas enroll in public schools at far higher rates than do those in Milwaukee, which is not surprising given the distribution of the enrollment of the student body as a whole. What is more surprising is that, despite the fact that Milwaukee has roughly double the rate of charter school enrollment as a whole, the percentage of white students enrolled in charter schools in Las Vegas is roughly triple the percentage of white students enrolled in charter schools in Milwaukee.\n",
    "2. Both Hispanic and Black students in Milwaukee are enrolled in private schools at much higher rates than they are in Las Vegas, where there are virtually no students of any race enrolled in private schools. Conversely, they are enrolled in public school at higher rates in Las Vegas.\n",
    "3. Black students in Las Vegas enroll in public schools at lower rates than any other race. Black students in Milwaukee enroll in public schools at higher rates than any other race.\n",
    "4. Asian students in Milwaukee enroll in public schools at even lower rates than do white students, but they enroll in charter schools at much higher rates than any other subgroup."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, I want to break down enrollment of each school type in the given cities by race."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2, 2, figsize = (15, 8))\n",
    "\n",
    "n_groups = 7\n",
    "\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.35\n",
    "\n",
    "opacity = 0.8\n",
    "error_config = {'ecolor': '0.3'}\n",
    "\n",
    "# subplot 1 (public schools)\n",
    "\n",
    "rects1 = ax[0,0].bar(index, milwaukee_percent_race_by_school.loc['Public'].tolist()[:7],bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Milwaukee')\n",
    "\n",
    "rects2 = ax[0,0].bar(index + bar_width, vegas_percent_race_by_school.loc['Public'].tolist()[:7], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Vegas')\n",
    "\n",
    "ax[0,0].set_ylabel('Percentage of Total')\n",
    "ax[0,0].set_title('Breakdown of Public School Students by Race (percent of total)')\n",
    "ax[0,0].set_xticks(index + bar_width / 2)\n",
    "ax[0,0].set_xticklabels(('White', 'Black', 'Hispanic', 'Asian', 'Am Indian', 'P Islander', 'Multiracial'))\n",
    "ax[0,0].set_ylim(0,100)\n",
    "ax[0,0].legend()\n",
    "\n",
    "# subplot 2 (charter schools)\n",
    "\n",
    "rects1 = ax[0,1].bar(index, milwaukee_percent_race_by_school.loc['Charter'].tolist()[:7],bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Milwaukee')\n",
    "\n",
    "rects2 = ax[0,1].bar(index + bar_width, vegas_percent_race_by_school.loc['Charter'].tolist()[:7], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Vegas')\n",
    "\n",
    "ax[0,1].set_ylabel('Percentage of Total')\n",
    "ax[0,1].set_title('Breakdown of Charter School Students by Race (percent of total)')\n",
    "ax[0,1].set_xticks(index + bar_width / 2)\n",
    "ax[0,1].set_xticklabels(('White', 'Black', 'Hispanic', 'Asian', 'Am Indian', 'P Islander', 'Multiracial'))\n",
    "ax[0,1].set_ylim(0,100)\n",
    "ax[0,1].legend()\n",
    "\n",
    "# subplot 3 (alternative schools)\n",
    "\n",
    "rects1 = ax[1,0].bar(index, milwaukee_percent_race_by_school.loc['Alternative'].tolist()[:7],bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Milwaukee')\n",
    "\n",
    "rects2 = ax[1,0].bar(index + bar_width, vegas_percent_race_by_school.loc['Alternative'].tolist()[:7], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Vegas')\n",
    "\n",
    "ax[1,0].set_ylabel('Percentage of Total')\n",
    "ax[1,0].set_title('Breakdown of Alternative School Students by Race (percent of total)')\n",
    "ax[1,0].set_xticks(index + bar_width / 2)\n",
    "ax[1,0].set_xticklabels(('White', 'Black', 'Hispanic', 'Asian', 'Am Indian', 'P Islander', 'Multiracial'))\n",
    "ax[1,0].set_ylim(0,100)\n",
    "ax[1,0].legend()\n",
    "\n",
    "# subplot 4 (private schools)\n",
    "\n",
    "rects1 = ax[1,1].bar(index, milwaukee_percent_race_by_school.loc['Public'].tolist()[:7],bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Milwaukee')\n",
    "\n",
    "rects2 = ax[1,1].bar(index + bar_width, vegas_percent_race_by_school.loc['Public'].tolist()[:7], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Vegas')\n",
    "\n",
    "ax[1,1].set_ylabel('Percentage of Total')\n",
    "ax[1,1].set_title('Breakdown of Private School Students by Race (percent of total)')\n",
    "ax[1,1].set_xticks(index + bar_width / 2)\n",
    "ax[1,1].set_xticklabels(('White', 'Black', 'Hispanic', 'Asian', 'Am Indian', 'P Islander', 'Multiracial'))\n",
    "ax[1,1].set_ylim(0,100)\n",
    "ax[1,1].legend()\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some observations pertaining to these graphs..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, I would like to compare these breakdowns to the racial breakdowns of these cities in their entireties, as well as to the overall racial breakdowns of their high school populations. First, of course, I need that data. \n",
    "\n",
    "Beginning with the high school populations, I have"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "vegas_race_percents = pd.Series()\n",
    "\n",
    "races = ['White', 'Black', 'Hispanic', 'Asian', 'Native American', 'Pacific Islander', 'Two Races']\n",
    "\n",
    "for race in races:\n",
    "    vegas_race_percents[race] = round(100.0*vegas_count_school_by_race.loc['Total',race]\n",
    "                                        /vegas_count_school_by_race.loc['Total'].sum(), 1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "White               30.4\n",
       "Black               15.0\n",
       "Hispanic            40.8\n",
       "Asian                6.4\n",
       "Native American      0.5\n",
       "Pacific Islander     1.4\n",
       "Two Races            5.5\n",
       "dtype: float64"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_race_percents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_race_percents = pd.Series()\n",
    "\n",
    "races = ['White', 'Black', 'Hispanic', 'Asian', 'Native American', 'Pacific Islander', 'Two Races']\n",
    "\n",
    "for race in races:\n",
    "    milwaukee_race_percents[race] = round(100.0*milwaukee_count_school_by_race.loc['Total',race]\n",
    "                                        /milwaukee_count_school_by_race.loc['Total'].sum(), 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "White               15.0\n",
       "Black               56.0\n",
       "Hispanic            19.0\n",
       "Asian                7.9\n",
       "Native American      0.7\n",
       "Pacific Islander     0.1\n",
       "Two Races            1.2\n",
       "dtype: float64"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_race_percents"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OK, so what do I want here as far as bar graphs go? I think that I want two separate graphs, one for each city. Then, for each graph I want a graph of the racial breakdown of each type of school as well as the racial breakdown of the high school population as a whole. And, I think, I might want a racial breakdown of the city population as a whole, in part because, looking at this high school breakdown for Milwaukee, it looks very different from what I would have expected. For that, I need to use population data, which I have from the US census."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_city_demographics = pd.read_csv('Education_Project/Milwaukee_city_demographics.csv')\n",
    "vegas_city_demographics = pd.read_csv('Education_Project/Las_Vegas_city_demographics.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GEO.id</th>\n",
       "      <th>Id</th>\n",
       "      <th>1600000US5553000</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GEO.id2</td>\n",
       "      <td>Id2</td>\n",
       "      <td>5553000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GEO.display-label</td>\n",
       "      <td>Geography</td>\n",
       "      <td>Milwaukee city, Wisconsin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>HD01_VD01</td>\n",
       "      <td>Estimate; Total:</td>\n",
       "      <td>599086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>HD02_VD01</td>\n",
       "      <td>Margin of Error; Total:</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>HD01_VD02</td>\n",
       "      <td>Estimate; Not Hispanic or Latino:</td>\n",
       "      <td>488698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>HD02_VD02</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino:</td>\n",
       "      <td>1414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>HD01_VD03</td>\n",
       "      <td>Estimate; Not Hispanic or Latino: - White alone</td>\n",
       "      <td>214553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>HD02_VD03</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino: - Whi...</td>\n",
       "      <td>1702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>HD01_VD04</td>\n",
       "      <td>Estimate; Not Hispanic or Latino: - Black or A...</td>\n",
       "      <td>230599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>HD02_VD04</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino: - Bla...</td>\n",
       "      <td>1860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>HD01_VD05</td>\n",
       "      <td>Estimate; Not Hispanic or Latino: - American I...</td>\n",
       "      <td>2577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>HD02_VD05</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino: - Ame...</td>\n",
       "      <td>381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>HD01_VD06</td>\n",
       "      <td>Estimate; Not Hispanic or Latino: - Asian alone</td>\n",
       "      <td>23730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>HD02_VD06</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino: - Asi...</td>\n",
       "      <td>1094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>HD01_VD07</td>\n",
       "      <td>Estimate; Not Hispanic or Latino: - Native Haw...</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>HD02_VD07</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino: - Nat...</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>HD01_VD08</td>\n",
       "      <td>Estimate; Not Hispanic or Latino: - Some other...</td>\n",
       "      <td>751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>HD02_VD08</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino: - Som...</td>\n",
       "      <td>185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>HD01_VD09</td>\n",
       "      <td>Estimate; Not Hispanic or Latino: - Two or mor...</td>\n",
       "      <td>16422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>HD02_VD09</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino: - Two...</td>\n",
       "      <td>1140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>HD01_VD10</td>\n",
       "      <td>Estimate; Not Hispanic or Latino: - Two or mor...</td>\n",
       "      <td>562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>HD02_VD10</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino: - Two...</td>\n",
       "      <td>180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>HD01_VD11</td>\n",
       "      <td>Estimate; Not Hispanic or Latino: - Two or mor...</td>\n",
       "      <td>15860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>HD02_VD11</td>\n",
       "      <td>Margin of Error; Not Hispanic or Latino: - Two...</td>\n",
       "      <td>1147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>HD01_VD12</td>\n",
       "      <td>Estimate; Hispanic or Latino:</td>\n",
       "      <td>110388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>HD02_VD12</td>\n",
       "      <td>Margin of Error; Hispanic or Latino:</td>\n",
       "      <td>1416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>HD01_VD13</td>\n",
       "      <td>Estimate; Hispanic or Latino: - White alone</td>\n",
       "      <td>59649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>HD02_VD13</td>\n",
       "      <td>Margin of Error; Hispanic or Latino: - White a...</td>\n",
       "      <td>2105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>HD01_VD14</td>\n",
       "      <td>Estimate; Hispanic or Latino: - Black or Afric...</td>\n",
       "      <td>2579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>HD02_VD14</td>\n",
       "      <td>Margin of Error; Hispanic or Latino: - Black o...</td>\n",
       "      <td>447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>HD01_VD15</td>\n",
       "      <td>Estimate; Hispanic or Latino: - American India...</td>\n",
       "      <td>615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>HD02_VD15</td>\n",
       "      <td>Margin of Error; Hispanic or Latino: - America...</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>HD01_VD16</td>\n",
       "      <td>Estimate; Hispanic or Latino: - Asian alone</td>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>HD02_VD16</td>\n",
       "      <td>Margin of Error; Hispanic or Latino: - Asian a...</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>HD01_VD17</td>\n",
       "      <td>Estimate; Hispanic or Latino: - Native Hawaiia...</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>HD02_VD17</td>\n",
       "      <td>Margin of Error; Hispanic or Latino: - Native ...</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>HD01_VD18</td>\n",
       "      <td>Estimate; Hispanic or Latino: - Some other rac...</td>\n",
       "      <td>40113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>HD02_VD18</td>\n",
       "      <td>Margin of Error; Hispanic or Latino: - Some ot...</td>\n",
       "      <td>2098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>HD01_VD19</td>\n",
       "      <td>Estimate; Hispanic or Latino: - Two or more ra...</td>\n",
       "      <td>7186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>HD02_VD19</td>\n",
       "      <td>Margin of Error; Hispanic or Latino: - Two or ...</td>\n",
       "      <td>894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>HD01_VD20</td>\n",
       "      <td>Estimate; Hispanic or Latino: - Two or more ra...</td>\n",
       "      <td>3474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>HD02_VD20</td>\n",
       "      <td>Margin of Error; Hispanic or Latino: - Two or ...</td>\n",
       "      <td>650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>HD01_VD21</td>\n",
       "      <td>Estimate; Hispanic or Latino: - Two or more ra...</td>\n",
       "      <td>3712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>HD02_VD21</td>\n",
       "      <td>Margin of Error; Hispanic or Latino: - Two or ...</td>\n",
       "      <td>672</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               GEO.id                                                 Id  \\\n",
       "0             GEO.id2                                                Id2   \n",
       "1   GEO.display-label                                          Geography   \n",
       "2           HD01_VD01                                   Estimate; Total:   \n",
       "3           HD02_VD01                            Margin of Error; Total:   \n",
       "4           HD01_VD02                  Estimate; Not Hispanic or Latino:   \n",
       "5           HD02_VD02           Margin of Error; Not Hispanic or Latino:   \n",
       "6           HD01_VD03    Estimate; Not Hispanic or Latino: - White alone   \n",
       "7           HD02_VD03  Margin of Error; Not Hispanic or Latino: - Whi...   \n",
       "8           HD01_VD04  Estimate; Not Hispanic or Latino: - Black or A...   \n",
       "9           HD02_VD04  Margin of Error; Not Hispanic or Latino: - Bla...   \n",
       "10          HD01_VD05  Estimate; Not Hispanic or Latino: - American I...   \n",
       "11          HD02_VD05  Margin of Error; Not Hispanic or Latino: - Ame...   \n",
       "12          HD01_VD06    Estimate; Not Hispanic or Latino: - Asian alone   \n",
       "13          HD02_VD06  Margin of Error; Not Hispanic or Latino: - Asi...   \n",
       "14          HD01_VD07  Estimate; Not Hispanic or Latino: - Native Haw...   \n",
       "15          HD02_VD07  Margin of Error; Not Hispanic or Latino: - Nat...   \n",
       "16          HD01_VD08  Estimate; Not Hispanic or Latino: - Some other...   \n",
       "17          HD02_VD08  Margin of Error; Not Hispanic or Latino: - Som...   \n",
       "18          HD01_VD09  Estimate; Not Hispanic or Latino: - Two or mor...   \n",
       "19          HD02_VD09  Margin of Error; Not Hispanic or Latino: - Two...   \n",
       "20          HD01_VD10  Estimate; Not Hispanic or Latino: - Two or mor...   \n",
       "21          HD02_VD10  Margin of Error; Not Hispanic or Latino: - Two...   \n",
       "22          HD01_VD11  Estimate; Not Hispanic or Latino: - Two or mor...   \n",
       "23          HD02_VD11  Margin of Error; Not Hispanic or Latino: - Two...   \n",
       "24          HD01_VD12                      Estimate; Hispanic or Latino:   \n",
       "25          HD02_VD12               Margin of Error; Hispanic or Latino:   \n",
       "26          HD01_VD13        Estimate; Hispanic or Latino: - White alone   \n",
       "27          HD02_VD13  Margin of Error; Hispanic or Latino: - White a...   \n",
       "28          HD01_VD14  Estimate; Hispanic or Latino: - Black or Afric...   \n",
       "29          HD02_VD14  Margin of Error; Hispanic or Latino: - Black o...   \n",
       "30          HD01_VD15  Estimate; Hispanic or Latino: - American India...   \n",
       "31          HD02_VD15  Margin of Error; Hispanic or Latino: - America...   \n",
       "32          HD01_VD16        Estimate; Hispanic or Latino: - Asian alone   \n",
       "33          HD02_VD16  Margin of Error; Hispanic or Latino: - Asian a...   \n",
       "34          HD01_VD17  Estimate; Hispanic or Latino: - Native Hawaiia...   \n",
       "35          HD02_VD17  Margin of Error; Hispanic or Latino: - Native ...   \n",
       "36          HD01_VD18  Estimate; Hispanic or Latino: - Some other rac...   \n",
       "37          HD02_VD18  Margin of Error; Hispanic or Latino: - Some ot...   \n",
       "38          HD01_VD19  Estimate; Hispanic or Latino: - Two or more ra...   \n",
       "39          HD02_VD19  Margin of Error; Hispanic or Latino: - Two or ...   \n",
       "40          HD01_VD20  Estimate; Hispanic or Latino: - Two or more ra...   \n",
       "41          HD02_VD20  Margin of Error; Hispanic or Latino: - Two or ...   \n",
       "42          HD01_VD21  Estimate; Hispanic or Latino: - Two or more ra...   \n",
       "43          HD02_VD21  Margin of Error; Hispanic or Latino: - Two or ...   \n",
       "\n",
       "             1600000US5553000  \n",
       "0                     5553000  \n",
       "1   Milwaukee city, Wisconsin  \n",
       "2                      599086  \n",
       "3                          55  \n",
       "4                      488698  \n",
       "5                        1414  \n",
       "6                      214553  \n",
       "7                        1702  \n",
       "8                      230599  \n",
       "9                        1860  \n",
       "10                       2577  \n",
       "11                        381  \n",
       "12                      23730  \n",
       "13                       1094  \n",
       "14                         66  \n",
       "15                         37  \n",
       "16                        751  \n",
       "17                        185  \n",
       "18                      16422  \n",
       "19                       1140  \n",
       "20                        562  \n",
       "21                        180  \n",
       "22                      15860  \n",
       "23                       1147  \n",
       "24                     110388  \n",
       "25                       1416  \n",
       "26                      59649  \n",
       "27                       2105  \n",
       "28                       2579  \n",
       "29                        447  \n",
       "30                        615  \n",
       "31                        186  \n",
       "32                        158  \n",
       "33                         91  \n",
       "34                         88  \n",
       "35                         64  \n",
       "36                      40113  \n",
       "37                       2098  \n",
       "38                       7186  \n",
       "39                        894  \n",
       "40                       3474  \n",
       "41                        650  \n",
       "42                       3712  \n",
       "43                        672  "
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_city_demographics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at this, it is obvious that I don't need all of this data. I need the following data from ```milwaukee_city_demographics```:\n",
    "- Total Population: row 2\n",
    "- White (non Hispanic): row 6\n",
    "- Black (non Hispanic): row 8\n",
    "- Asian (non Hispanic): row 12\n",
    "- Native American (non Hispanic): row 10\n",
    "- Pacific Islander (non Hispanic): row 14\n",
    "- Hispanic (all races): row 24\n",
    "- Two or more races (non Hispanic): row 18\n",
    "\n",
    "Since this should be the same for ```vegas_city_population```, I can then trivially produce the dataframes ```milwaukee_population``` and ```vegas_population```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "# population breakdown for vegas\n",
    "\n",
    "vegas_population = pd.DataFrame(columns = ['White','Black','Hispanic','Asian','Native American',\n",
    "                                              'Pacific Islander','Two Races'], index = ['Count', 'Percent'])\n",
    "\n",
    "vegas_population.loc['Count','White'] = int(vegas_city_demographics.iloc[6, 2])\n",
    "vegas_population.loc['Percent','White'] = round(100.0*int(vegas_city_demographics.iloc[6,2])\n",
    "                                               /int(vegas_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "vegas_population.loc['Count','Black'] = int(vegas_city_demographics.iloc[8, 2])\n",
    "vegas_population.loc['Percent','Black'] = round(100.0*int(vegas_city_demographics.iloc[8,2])\n",
    "                                               /int(vegas_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "vegas_population.loc['Count','Hispanic'] = int(vegas_city_demographics.iloc[24, 2])\n",
    "vegas_population.loc['Percent','Hispanic'] = round(100.0*int(vegas_city_demographics.iloc[24,2])\n",
    "                                               /int(vegas_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "vegas_population.loc['Count','Asian'] = int(vegas_city_demographics.iloc[12, 2])\n",
    "vegas_population.loc['Percent','Asian'] = round(100.0*int(vegas_city_demographics.iloc[12,2])\n",
    "                                               /int(vegas_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "vegas_population.loc['Count','Native American'] = int(vegas_city_demographics.iloc[10, 2])\n",
    "vegas_population.loc['Percent','Native American'] = round(100.0*int(vegas_city_demographics.iloc[10,2])\n",
    "                                               /int(vegas_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "vegas_population.loc['Count','Pacific Islander'] = int(vegas_city_demographics.iloc[14, 2])\n",
    "vegas_population.loc['Percent','Pacific Islander'] = round(100.0*int(vegas_city_demographics.iloc[14,2])\n",
    "                                               /int(vegas_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "vegas_population.loc['Count','Two Races'] = int(vegas_city_demographics.iloc[18, 2])\n",
    "vegas_population.loc['Percent','Two Races'] = round(100.0*int(vegas_city_demographics.iloc[18,2])\n",
    "                                               /int(vegas_city_demographics.iloc[2,2]), 1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "# And for milwaukee\n",
    "\n",
    "milwaukee_population = pd.DataFrame(columns = ['White','Black','Hispanic','Asian','Native American',\n",
    "                                              'Pacific Islander','Two Races'], index = ['Count', 'Percent'])\n",
    "\n",
    "milwaukee_population.loc['Count','White'] = int(milwaukee_city_demographics.iloc[6, 2])\n",
    "milwaukee_population.loc['Percent','White'] = round(100.0*int(milwaukee_city_demographics.iloc[6,2])\n",
    "                                               /int(milwaukee_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "milwaukee_population.loc['Count','Black'] = int(milwaukee_city_demographics.iloc[8, 2])\n",
    "milwaukee_population.loc['Percent','Black'] = round(100.0*int(milwaukee_city_demographics.iloc[8,2])\n",
    "                                               /int(milwaukee_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "milwaukee_population.loc['Count','Hispanic'] = int(milwaukee_city_demographics.iloc[24, 2])\n",
    "milwaukee_population.loc['Percent','Hispanic'] = round(100.0*int(milwaukee_city_demographics.iloc[24,2])\n",
    "                                               /int(milwaukee_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "milwaukee_population.loc['Count','Asian'] = int(milwaukee_city_demographics.iloc[12, 2])\n",
    "milwaukee_population.loc['Percent','Asian'] = round(100.0*int(milwaukee_city_demographics.iloc[12,2])\n",
    "                                               /int(milwaukee_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "milwaukee_population.loc['Count','Native American'] = int(milwaukee_city_demographics.iloc[10, 2])\n",
    "milwaukee_population.loc['Percent','Native American'] = round(100.0*int(milwaukee_city_demographics.iloc[10,2])\n",
    "                                               /int(milwaukee_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "milwaukee_population.loc['Count','Pacific Islander'] = int(milwaukee_city_demographics.iloc[14, 2])\n",
    "milwaukee_population.loc['Percent','Pacific Islander'] = round(100.0*int(milwaukee_city_demographics.iloc[14,2])\n",
    "                                               /int(milwaukee_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "milwaukee_population.loc['Count','Two Races'] = int(milwaukee_city_demographics.iloc[18, 2])\n",
    "milwaukee_population.loc['Percent','Two Races'] = round(100.0*int(milwaukee_city_demographics.iloc[18,2])\n",
    "                                               /int(milwaukee_city_demographics.iloc[2,2]), 1)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Count</th>\n",
       "      <td>275845</td>\n",
       "      <td>72870</td>\n",
       "      <td>203054</td>\n",
       "      <td>40497</td>\n",
       "      <td>2413</td>\n",
       "      <td>4045</td>\n",
       "      <td>20943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Percent</th>\n",
       "      <td>44.4</td>\n",
       "      <td>11.7</td>\n",
       "      <td>32.7</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.7</td>\n",
       "      <td>3.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          White  Black Hispanic  Asian Native American Pacific Islander  \\\n",
       "Count    275845  72870   203054  40497            2413             4045   \n",
       "Percent    44.4   11.7     32.7    6.5             0.4              0.7   \n",
       "\n",
       "        Two Races  \n",
       "Count       20943  \n",
       "Percent       3.4  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Count</th>\n",
       "      <td>214553</td>\n",
       "      <td>230599</td>\n",
       "      <td>110388</td>\n",
       "      <td>23730</td>\n",
       "      <td>2577</td>\n",
       "      <td>66</td>\n",
       "      <td>16422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Percent</th>\n",
       "      <td>35.8</td>\n",
       "      <td>38.5</td>\n",
       "      <td>18.4</td>\n",
       "      <td>4</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0</td>\n",
       "      <td>2.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          White   Black Hispanic  Asian Native American Pacific Islander  \\\n",
       "Count    214553  230599   110388  23730            2577               66   \n",
       "Percent    35.8    38.5     18.4      4             0.4                0   \n",
       "\n",
       "        Two Races  \n",
       "Count       16422  \n",
       "Percent       2.7  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_population"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So without even looking at any graphs, one can see tha that the racial demographics of the cities' populations as a whole are considerably whiter than the racial demographics of the cities' high school populations, even including private schools (and while homeschooling may account for some of this difference, at roughly 14000 total homeschoolers for Nevada and 20000 total homeschoolers for Wisconsin, this is surely not enough to account for all of the difference, even assuming that all homeschooled students are white.)\n",
    "\n",
    "Next we produce two dataframes, ```vegas_race_summary``` and ```milwaukee_race_summary``` that consist of rows for city population and total high school population, as well as for each of the types of high schools that we are studying. For each row, the data frame then has columns that give the percentage of the given population that is of a specified race or ethnicity. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "White               15.0\n",
       "Black               56.0\n",
       "Hispanic            19.0\n",
       "Asian                7.9\n",
       "Native American      0.7\n",
       "Pacific Islander     0.1\n",
       "Two Races            1.2\n",
       "dtype: float64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_race_percents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "vegas_race_summary = pd.DataFrame(columns = ['White','Black','Hispanic','Asian','Native American',\n",
    "                                             'Pacific Islander','Two Races'], \n",
    "                                  index = ['Population', 'High School', 'Public','Charter','Alternative',\n",
    "                                           'Private'])\n",
    "races = ['White','Black','Hispanic','Asian','Native American','Pacific Islander','Two Races']\n",
    "school_types = ['Public','Charter','Alternative','Private']\n",
    "\n",
    "for race in races:\n",
    "    vegas_race_summary.loc['Population',race] = vegas_population.loc['Percent',race]\n",
    "    vegas_race_summary.loc['High School',race] = vegas_race_percents[race]\n",
    "\n",
    "for race in races:\n",
    "    for school_type in school_types:\n",
    "        vegas_race_summary.loc[school_type, race] = vegas_percent_race_by_school.loc[school_type, race]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Population</th>\n",
       "      <td>44.4</td>\n",
       "      <td>11.7</td>\n",
       "      <td>32.7</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.7</td>\n",
       "      <td>3.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>High School</th>\n",
       "      <td>30.4</td>\n",
       "      <td>15</td>\n",
       "      <td>40.8</td>\n",
       "      <td>6.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>30.1</td>\n",
       "      <td>13.6</td>\n",
       "      <td>42</td>\n",
       "      <td>7</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>5.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>32.7</td>\n",
       "      <td>22.2</td>\n",
       "      <td>34.2</td>\n",
       "      <td>2.4</td>\n",
       "      <td>0.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>9.5</td>\n",
       "      <td>25.2</td>\n",
       "      <td>56.2</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.6</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>64.1</td>\n",
       "      <td>3.8</td>\n",
       "      <td>10.1</td>\n",
       "      <td>17.4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            White Black Hispanic Asian Native American Pacific Islander  \\\n",
       "Population   44.4  11.7     32.7   6.5             0.4              0.7   \n",
       "High School  30.4    15     40.8   6.4             0.5              1.4   \n",
       "Public       30.1  13.6       42     7             0.5              1.4   \n",
       "Charter      32.7  22.2     34.2   2.4             0.7              1.4   \n",
       "Alternative   9.5  25.2     56.2   2.2             1.4              0.6   \n",
       "Private      64.1   3.8     10.1  17.4               0                1   \n",
       "\n",
       "            Two Races  \n",
       "Population        3.4  \n",
       "High School       5.5  \n",
       "Public            5.4  \n",
       "Charter           6.5  \n",
       "Alternative       4.8  \n",
       "Private           3.5  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_race_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_race_summary = pd.DataFrame(columns = ['White','Black','Hispanic','Asian','Native American',\n",
    "                                             'Pacific Islander','Two Races'], \n",
    "                                  index = ['Population', 'High School', 'Public','Charter','Alternative',\n",
    "                                           'Private'])\n",
    "races = ['White','Black','Hispanic','Asian','Native American','Pacific Islander','Two Races']\n",
    "school_types = ['Public','Charter','Alternative','Private']\n",
    "\n",
    "for race in races:\n",
    "    milwaukee_race_summary.loc['Population',race] = milwaukee_population.loc['Percent',race]\n",
    "    milwaukee_race_summary.loc['High School',race] = milwaukee_race_percents[race]\n",
    "\n",
    "for race in races:\n",
    "    for school_type in school_types:\n",
    "        milwaukee_race_summary.loc[school_type, race] = milwaukee_percent_race_by_school.loc[school_type, race]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>White</th>\n",
       "      <th>Black</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Native American</th>\n",
       "      <th>Pacific Islander</th>\n",
       "      <th>Two Races</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Population</th>\n",
       "      <td>35.8</td>\n",
       "      <td>38.5</td>\n",
       "      <td>18.4</td>\n",
       "      <td>4</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0</td>\n",
       "      <td>2.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>High School</th>\n",
       "      <td>15</td>\n",
       "      <td>56</td>\n",
       "      <td>19</td>\n",
       "      <td>7.9</td>\n",
       "      <td>0.7</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Public</th>\n",
       "      <td>12.4</td>\n",
       "      <td>60.3</td>\n",
       "      <td>19.8</td>\n",
       "      <td>5.8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Charter</th>\n",
       "      <td>3.4</td>\n",
       "      <td>56.2</td>\n",
       "      <td>16.8</td>\n",
       "      <td>22.4</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alternative</th>\n",
       "      <td>4.6</td>\n",
       "      <td>75.5</td>\n",
       "      <td>17</td>\n",
       "      <td>0.7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>33.7</td>\n",
       "      <td>40.6</td>\n",
       "      <td>18.8</td>\n",
       "      <td>3.1</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0</td>\n",
       "      <td>3.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            White Black Hispanic Asian Native American Pacific Islander  \\\n",
       "Population   35.8  38.5     18.4     4             0.4                0   \n",
       "High School    15    56       19   7.9             0.7              0.1   \n",
       "Public       12.4  60.3     19.8   5.8             0.8              0.1   \n",
       "Charter       3.4  56.2     16.8  22.4             0.6              0.2   \n",
       "Alternative   4.6  75.5       17   0.7               1                0   \n",
       "Private      33.7  40.6     18.8   3.1             0.4                0   \n",
       "\n",
       "            Two Races  \n",
       "Population        2.7  \n",
       "High School       1.2  \n",
       "Public            0.7  \n",
       "Charter           0.4  \n",
       "Alternative       1.1  \n",
       "Private           3.3  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_race_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we use a collection of bar graphs to investigate the population wide distributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_groups = 4\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (15,8))\n",
    "\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.2\n",
    "\n",
    "opacity = 0.7\n",
    "error_config = {'ecolor': '0.3'}\n",
    "\n",
    "rects1 = ax.bar(index, milwaukee_race_summary.loc['Public'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Public')\n",
    "\n",
    "rects2 = ax.bar(index + bar_width, milwaukee_race_summary.loc['Charter'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Charter')\n",
    "\n",
    "rects3 = ax.bar(index + 2*bar_width, milwaukee_race_summary.loc['Alternative'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='g', error_kw=error_config, label='Alternative')\n",
    "\n",
    "rects4 = ax.bar(index + 3*bar_width, milwaukee_race_summary.loc['Private'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='c', error_kw=error_config, label='Private')\n",
    "\n",
    "ax.hlines(milwaukee_race_summary.loc['High School'].tolist()[:4], index-bar_width/2, index+7*bar_width/2, \n",
    "          color = 'k', linewidth = 3, label = 'High School Population')\n",
    "ax.hlines(milwaukee_race_summary.loc['Population'].tolist()[:4], index-bar_width/2, index + 7*bar_width/2, \n",
    "          color = 'k', linestyle = '--', linewidth = 3, label = 'City Population')\n",
    "\n",
    "ax.set_xlabel('Population Group')\n",
    "ax.set_ylabel('Percentage')\n",
    "ax.set_title('Milwaukee: Racial Breakdown of Students by Type of School (percent of total)')\n",
    "ax.set_xticks(index + 3*bar_width / 2)\n",
    "# I want to include population sizes in these labels I think...\n",
    "ax.set_xticklabels(('White', 'Black', 'Hispanic','Asian','Native American','Pacific Islander','Multiracial'))\n",
    "ax.legend()\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_groups = 4\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (15,8))\n",
    "\n",
    "index = np.arange(n_groups)\n",
    "bar_width = 0.2\n",
    "\n",
    "opacity = 0.7\n",
    "error_config = {'ecolor': '0.3'}\n",
    "\n",
    "rects1 = ax.bar(index, vegas_race_summary.loc['Public'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='b', error_kw=error_config, label='Public')\n",
    "\n",
    "rects2 = ax.bar(index + bar_width, vegas_race_summary.loc['Charter'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='r', error_kw=error_config, label='Charter')\n",
    "\n",
    "rects3 = ax.bar(index + 2*bar_width, vegas_race_summary.loc['Alternative'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='g', error_kw=error_config, label='Alternative')\n",
    "\n",
    "rects4 = ax.bar(index + 3*bar_width, vegas_race_summary.loc['Private'].tolist()[:4], bar_width,\n",
    "                alpha=opacity, color='c', error_kw=error_config, label='Private')\n",
    "\n",
    "ax.hlines(vegas_race_summary.loc['High School'].tolist()[:4], index-bar_width/2, index+7*bar_width/2, \n",
    "          color = 'k', linewidth = 3, label = 'High School Population')\n",
    "ax.hlines(vegas_race_summary.loc['Population'].tolist()[:4], index-bar_width/2, index + 7*bar_width/2, \n",
    "          color = 'k', linestyle = '--', linewidth = 3, label = 'City Population')\n",
    "\n",
    "ax.set_xlabel('Population Group')\n",
    "ax.set_ylabel('Percentage')\n",
    "ax.set_title('Las Vegas: Racial Breakdown of Students by Type of School (percent of total)')\n",
    "ax.set_xticks(index + 3*bar_width / 2)\n",
    "# I want to include population sizes in these labels I think...\n",
    "ax.set_xticklabels(('White', 'Black', 'Hispanic','Asian','Native American','Pacific Islander','Multiracial'))\n",
    "ax.legend()\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3: How does access to advanced placement (AP) exams and success rates on AP exams in Milwaukee and Las Vegas compare to access and success on AP exams at a national level?\n",
    "\n",
    "Here, I will use the following set of data collections:\n",
    "1. Milwaukee_AP_courses.csv\n",
    "2. Las_Vegas_AP_courses.csv\n",
    "4. AP_tests_by_race_2013.csv\n",
    "8. 2013_enrollments.csv\n",
    "9. 2013_national.csv\n",
    "\n",
    "Note that here I have only data on publicly funded schools, i.e., those schools that are public, charter, alternative, or other in my list of schools. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_ap = pd.read_csv('Education_Project/Milwaukee_AP_courses.csv')\n",
    "vegas_ap = pd.read_csv('Education_Project/Las_Vegas_AP_courses.csv')\n",
    "ap_tests = pd.read_csv('Education_project/AP_tests_by_race_2013.csv')\n",
    "schools_2013 = pd.read_csv('Education_Project/2013_enrollments.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we begin by compiling our data for the national population of high school seniors, beginning with those enrolled in public schools."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = open('Education_Project/2013_national.csv', 'r', encoding = 'latin-1')\n",
    "x = f.readlines()\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(x)):\n",
    "    if len(x[i].split(',')) < 309:\n",
    "        temp = x[i].split(',')\n",
    "        while len(temp) < 309:\n",
    "            temp.insert(306, '-2')\n",
    "        x[i] = \",\".join(temp)\n",
    "    elif len(x[i].split(',')) > 309:\n",
    "        temp = x[i].split(',')\n",
    "        while len(temp) > 309:\n",
    "            temp = temp[:-1]\n",
    "        temp[-1] = \"\".join([temp[-1], '\\n'])\n",
    "        x[i] = ','.join(temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NCESSCH</th>\n",
       "      <th>G12</th>\n",
       "      <th>AM12M</th>\n",
       "      <th>AM12F</th>\n",
       "      <th>AS12M</th>\n",
       "      <th>AS12F</th>\n",
       "      <th>HI12M</th>\n",
       "      <th>HI12F</th>\n",
       "      <th>BL12M</th>\n",
       "      <th>BL12F</th>\n",
       "      <th>WH12M</th>\n",
       "      <th>WH12F</th>\n",
       "      <th>HP12M</th>\n",
       "      <th>HP12F</th>\n",
       "      <th>TR12M</th>\n",
       "      <th>TR12F</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>010000200277</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>010000201402</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>010000201667</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>010000201670</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>010000201705</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>010000201706</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>010000201876</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>010000500870</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>010000500871</td>\n",
       "      <td>243</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>101</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>010000500879</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>010000500889</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>010000501616</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>010000502150</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>010000600193</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>010000600872</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         NCESSCH  G12 AM12M AM12F AS12M AS12F HI12M HI12F BL12M BL12F WH12M  \\\n",
       "0   010000200277   -1    -1    -1    -1    -1    -1    -1    -1    -1    -1   \n",
       "1   010000201402   -1    -1    -1    -1    -1    -1    -1    -1    -1    -1   \n",
       "2   010000201667   -1    -1    -1    -1    -1    -1    -1    -1    -1    -1   \n",
       "3   010000201670   -1    -1    -1    -1    -1    -1    -1    -1    -1    -1   \n",
       "4   010000201705   -1    -1    -1    -1    -1    -1    -1    -1    -1    -1   \n",
       "5   010000201706   -1    -1    -1    -1    -1    -1    -1    -1    -1    -1   \n",
       "6   010000201876   -2    -2    -2    -2    -2    -2    -2    -2    -2    -2   \n",
       "7   010000500870   -2    -2    -2    -2    -2    -2    -2    -2    -2    -2   \n",
       "8   010000500871  243     0     0     0     1    26    24     2     6   101   \n",
       "9   010000500879   -2    -2    -2    -2    -2    -2    -2    -2    -2    -2   \n",
       "10  010000500889   -2    -2    -2    -2    -2    -2    -2    -2    -2    -2   \n",
       "11  010000501616   -2    -2    -2    -2    -2    -2    -2    -2    -2    -2   \n",
       "12  010000502150   -2    -2    -2    -2    -2    -2    -2    -2    -2    -2   \n",
       "13  010000600193   -2    -2    -2    -2    -2    -2    -2    -2    -2    -2   \n",
       "14  010000600872   49     0     0     0     0     2     3     0     0    22   \n",
       "\n",
       "   WH12F HP12M HP12F TR12M TR12F  \n",
       "0     -1    -1    -1    -1    -1  \n",
       "1     -1    -1    -1    -1    -1  \n",
       "2     -1    -1    -1    -1    -1  \n",
       "3     -1    -1    -1    -1    -1  \n",
       "4     -1    -1    -1    -1    -1  \n",
       "5     -1    -1    -1    -1    -1  \n",
       "6     -2    -2    -2    -2    -2  \n",
       "7     -2    -2    -2    -2    -2  \n",
       "8     82     0     0     1     0  \n",
       "9     -2    -2    -2    -2    -2  \n",
       "10    -2    -2    -2    -2    -2  \n",
       "11    -2    -2    -2    -2    -2  \n",
       "12    -2    -2    -2    -2    -2  \n",
       "13    -2    -2    -2    -2    -2  \n",
       "14    22     0     0     0     0  "
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# converting my data into a dataframe\n",
    "\n",
    "national_enrollments = []\n",
    "\n",
    "for i in range(1,len(x)):\n",
    "    national_enrollments.append(x[i].split(\",\"))\n",
    "    \n",
    "national_enrollments = pd.DataFrame(national_enrollments, columns = x[0].split(\",\"))\n",
    "\n",
    "# and restricting to 12th grade enrollment\n",
    "\n",
    "national_enrollments_12 = national_enrollments[['NCESSCH','G12', 'AM12M', 'AM12F', 'AS12M', 'AS12F', 'HI12M', 'HI12F', 'BL12M', \n",
    " 'BL12F', 'WH12M', 'WH12F', 'HP12M', 'HP12F', 'TR12M', 'TR12F']]\n",
    "\n",
    "national_enrollments_12.head(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In looking at this data, we note that there are a number of schools for which the value of 'G12' is either -2 (corresponding to schools that do not have a twelth grade) or -1 (corresponding to schools for which no value was reported). In the first case, it is clear that these schools have nothing to contribute to our data on high school enrollment. In the second case, a quick inspection of the data suggests that these consist largely of schools in carceral institutions, which are unlikely to account for large numbers of students, and which, in addition, have student populations that are heavily in flux. For this reason, we will simply ignore all of these schools."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NCESSCH</th>\n",
       "      <th>G12</th>\n",
       "      <th>AM12M</th>\n",
       "      <th>AM12F</th>\n",
       "      <th>AS12M</th>\n",
       "      <th>AS12F</th>\n",
       "      <th>HI12M</th>\n",
       "      <th>HI12F</th>\n",
       "      <th>BL12M</th>\n",
       "      <th>BL12F</th>\n",
       "      <th>WH12M</th>\n",
       "      <th>WH12F</th>\n",
       "      <th>HP12M</th>\n",
       "      <th>HP12F</th>\n",
       "      <th>TR12M</th>\n",
       "      <th>TR12F</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>010000500871</td>\n",
       "      <td>243</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>101</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>010000600872</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>010000600878</td>\n",
       "      <td>119</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>38</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>010000600883</td>\n",
       "      <td>112</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>64</td>\n",
       "      <td>47</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>010000601585</td>\n",
       "      <td>85</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>010000700251</td>\n",
       "      <td>612</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>17</td>\n",
       "      <td>13</td>\n",
       "      <td>73</td>\n",
       "      <td>88</td>\n",
       "      <td>188</td>\n",
       "      <td>190</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>010000700337</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>010000701456</td>\n",
       "      <td>363</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>44</td>\n",
       "      <td>36</td>\n",
       "      <td>128</td>\n",
       "      <td>138</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>010000800831</td>\n",
       "      <td>668</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>21</td>\n",
       "      <td>30</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>62</td>\n",
       "      <td>61</td>\n",
       "      <td>218</td>\n",
       "      <td>235</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>010000802198</td>\n",
       "      <td>92</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>21</td>\n",
       "      <td>29</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        NCESSCH  G12 AM12M AM12F AS12M AS12F HI12M HI12F BL12M BL12F WH12M  \\\n",
       "0  010000500871  243     0     0     0     1    26    24     2     6   101   \n",
       "1  010000600872   49     0     0     0     0     2     3     0     0    22   \n",
       "2  010000600878  119     0     0     0     0    15    12     2     1    38   \n",
       "3  010000600883  112     0     1     0     0     0     0     0     0    64   \n",
       "4  010000601585   85     0     0     0     0     1     1     0     0    42   \n",
       "5  010000700251  612     0     0    18    12    17    13    73    88   188   \n",
       "6  010000700337    1     0     0     0     0     0     0     0     0     0   \n",
       "7  010000701456  363     0     0     3     3     2     5    44    36   128   \n",
       "8  010000800831  668     4     4    21    30    15    13    62    61   218   \n",
       "9  010000802198   92     0     1     3     1     2     2    14    21    29   \n",
       "\n",
       "  WH12F HP12M HP12F TR12M TR12F  \n",
       "0    82     0     0     1     0  \n",
       "1    22     0     0     0     0  \n",
       "2    51     0     0     0     0  \n",
       "3    47     0     0     0     0  \n",
       "4    41     0     0     0     0  \n",
       "5   190     0     1     5     7  \n",
       "6     1     0     0     0     0  \n",
       "7   138     1     0     1     2  \n",
       "8   235     0     1     2     2  \n",
       "9    17     0     0     2     0  "
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "national_enrollments_12 = national_enrollments_12[national_enrollments_12['G12'] != '-2']\n",
    "\n",
    "national_enrollments_12 = national_enrollments_12[national_enrollments_12['G12'] != '-1']\n",
    "national_enrollments_12.reset_index(drop = True, inplace = True)\n",
    "\n",
    "national_enrollments_12.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, I can sum this data to produce racial distribution data for the nation as a whole."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function:\n",
    "\n",
    "Inputs:\n",
    "\n",
    "Returns:\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def string_to_float(string):\n",
    "    \n",
    "    split_str = string.split(\",\")\n",
    "    \n",
    "    value = 0\n",
    "    for j in range(1, len(split_str)+1):\n",
    "        value += 1000**(j-1)*float(split_str[-1*j])\n",
    "    \n",
    "    return value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'G1': 3457168.0,\n",
       " 'AM12': 69587.0,\n",
       " 'AS12': 179197.0,\n",
       " 'HI12': 762482.0,\n",
       " 'BL12': 523636.0,\n",
       " 'WH12': 1891132.0,\n",
       " 'HP12': 24895.0,\n",
       " 'TR12': 70446.0}"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "races = ['G12', 'AM12M', 'AM12F', 'AS12M', 'AS12F', 'HI12M', 'HI12F', \n",
    "                    'BL12M', 'BL12F', 'WH12M', 'WH12F', 'HP12M', 'HP12F', 'TR12M', 'TR12F']\n",
    "\n",
    "enrollments_2013 = {'G1':0, 'AM12':0, 'AS12':0, 'HI12':0, 'BL12':0, 'WH12':0, 'HP12':0, 'TR12':0}\n",
    "\n",
    "for i in range(len(national_enrollments_12)):\n",
    "    for race in races:\n",
    "        enrollments_2013[race[:-1]] += string_to_float(national_enrollments_12.loc[i,race])\n",
    "    \n",
    "enrollments_2013"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A question of access\n",
    "\n",
    "I believe that the data that I have for AP test access from the College Board is for students in all types of schools, most importantly, the data includes tests taken by students at private schools. For obvious reasons, this is somewhat of a problem, given that there are a not insubstantial number of private school graduates each year. For this reason, I'm going to take a stab at accounting for these private school students when calculating access for the nation as a whole. I intend to use data from [private high school graduates from 2013](https://nces.ed.gov/surveys/pss/tables/table_2013_15.asp), which indicates that there were a total of 308,766 graduates from private high schools. In addition, [need link name](https://nces.ed.gov/surveys/pss/tables/table_2013_09.asp) and [need another link name](https://nces.ed.gov/surveys/pss/tables/table_2013_13.asp) combine to give me some indication of what the racial breakdown of these graduates might be. In particular, from the latter I know that 171,812 students graduated from secondary schools and 136,953 students graduated from combined elementary/secondary schools. From the former, I know something about the racial distributions of students in these types of schools, which I will assume are relatively consistant from class to class. \n",
    "\n",
    "|Type of School|Hispanic|Native American|Asian|Black|Pacific Islander|White|Two or more races|\n",
    "|---|---|---|---|---|---|---|---|\n",
    "|Secondary|11.4| 0.4| 6.2| 9.7| 0.5| 68.3| 3.7| \n",
    "|Combined|7.4 |0.6 |6.1| 9.3| 0.9| 72.2| 3.6|\n",
    "\n",
    "From here I intend to estimate the number of graduating seniors of each race and add this data to the public school figures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "private_school_graduates = {'Hispanic': 0, 'Native American': 0, 'Asian': 0, 'Black': 0, 'Pacific Islander': 0,\n",
    "                            'White': 0, 'Two or more races': 0} \n",
    "\n",
    "private_school_graduates['Hispanic'] = round(171812*0.114 + 136953 * 0.074)\n",
    "private_school_graduates['Native American'] = round(171812*0.004 + 136953 * 0.006)\n",
    "private_school_graduates['Asian'] = round(171812*0.062 + 136953 * 0.061)\n",
    "private_school_graduates['Black'] = round(171812*0.097 + 136953 * 0.093)\n",
    "private_school_graduates['Pacific Islander'] = round(171812*0.005 + 136953 * 0.009)\n",
    "private_school_graduates['White'] = round(171812*0.683 + 136953 * 0.722)\n",
    "private_school_graduates['Two or more races'] = round(171812*0.037 + 136953 * 0.036)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "total_seniors = {}\n",
    "\n",
    "total_seniors['Hispanic'] = (private_school_graduates['Hispanic'] + enrollments_2013['HI12'])\n",
    "total_seniors['Native American'] = (private_school_graduates['Native American'] + enrollments_2013['AM12'])\n",
    "total_seniors['Asian'] = (private_school_graduates['Asian'] + enrollments_2013['AS12'])\n",
    "total_seniors['Black'] = (private_school_graduates['Black'] + enrollments_2013['BL12'])\n",
    "total_seniors['Pacific Islander'] = (private_school_graduates['Pacific Islander'] + enrollments_2013['HP12'])\n",
    "total_seniors['White'] = (private_school_graduates['White'] + enrollments_2013['WH12'])\n",
    "total_seniors['Two or more races'] = (private_school_graduates['Two or more races'] + enrollments_2013['TR12'])\n",
    "total_seniors['Total'] = 308766 + enrollments_2013['G1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Hispanic': 792203.0,\n",
       " 'Native American': 71096.0,\n",
       " 'Asian': 198203.0,\n",
       " 'Black': 553038.0,\n",
       " 'Pacific Islander': 26987.0,\n",
       " 'White': 2107360.0,\n",
       " 'Two or more races': 81733.0,\n",
       " 'Total': 3765934.0}"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_seniors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "My next task is to summarize the data for AP testing rates and AP pass rates at the national level. For this, I will use the dataframe ```ap_tests``` to produce a summary dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Appendix C: AP Exams Taken in U.S. Public Schools by the Class of 2013</th>\n",
       "      <th>Unnamed: 1</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "      <th>Unnamed: 3</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "      <th>Unnamed: 5</th>\n",
       "      <th>Unnamed: 6</th>\n",
       "      <th>Unnamed: 7</th>\n",
       "      <th>Unnamed: 8</th>\n",
       "      <th>Unnamed: 9</th>\n",
       "      <th>Unnamed: 10</th>\n",
       "      <th>Unnamed: 11</th>\n",
       "      <th>Unnamed: 12</th>\n",
       "      <th>Unnamed: 13</th>\n",
       "      <th>Unnamed: 14</th>\n",
       "      <th>Unnamed: 15</th>\n",
       "      <th>Unnamed: 16</th>\n",
       "      <th>Unnamed: 17</th>\n",
       "      <th>Unnamed: 18</th>\n",
       "      <th>Unnamed: 19</th>\n",
       "      <th>Unnamed: 20</th>\n",
       "      <th>Unnamed: 21</th>\n",
       "      <th>Unnamed: 22</th>\n",
       "      <th>Unnamed: 23</th>\n",
       "      <th>Unnamed: 24</th>\n",
       "      <th>Unnamed: 25</th>\n",
       "      <th>Unnamed: 26</th>\n",
       "      <th>Unnamed: 27</th>\n",
       "      <th>Unnamed: 28</th>\n",
       "      <th>Unnamed: 29</th>\n",
       "      <th>Unnamed: 30</th>\n",
       "      <th>Unnamed: 31</th>\n",
       "      <th>Unnamed: 32</th>\n",
       "      <th>Unnamed: 33</th>\n",
       "      <th>Unnamed: 34</th>\n",
       "      <th>Unnamed: 35</th>\n",
       "      <th>Unnamed: 36</th>\n",
       "      <th>Unnamed: 37</th>\n",
       "      <th>Unnamed: 38</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Number of Exam Takers, by Subject and Score Point</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ethnicity</td>\n",
       "      <td>AP Score</td>\n",
       "      <td>Total Exams</td>\n",
       "      <td>Art History</td>\n",
       "      <td>Biology</td>\n",
       "      <td>Calculus AB</td>\n",
       "      <td>Calculus BC</td>\n",
       "      <td>Chemistry</td>\n",
       "      <td>Chinese Language and Culture</td>\n",
       "      <td>Comparative Government and Politics</td>\n",
       "      <td>Computer Science A</td>\n",
       "      <td>English Language and Composition</td>\n",
       "      <td>English Literature and Composition</td>\n",
       "      <td>Environmental Science</td>\n",
       "      <td>European History</td>\n",
       "      <td>French Language and Culture</td>\n",
       "      <td>German Language and Culture</td>\n",
       "      <td>Human Geography</td>\n",
       "      <td>Italian Language and Culture</td>\n",
       "      <td>Japanese Language and Culture</td>\n",
       "      <td>Latin</td>\n",
       "      <td>Macroeconomics</td>\n",
       "      <td>Microeconomics</td>\n",
       "      <td>Music Theory</td>\n",
       "      <td>Physics B</td>\n",
       "      <td>Physics C: Electricity and Magnetism</td>\n",
       "      <td>Physics C: Mechanics</td>\n",
       "      <td>Psychology</td>\n",
       "      <td>Spanish Language</td>\n",
       "      <td>Spanish Literature and Culture</td>\n",
       "      <td>Statistics</td>\n",
       "      <td>Studio Art: 2-D Design</td>\n",
       "      <td>Studio Art: 3-D Design</td>\n",
       "      <td>Studio Art: Drawing</td>\n",
       "      <td>United States Government and Politics</td>\n",
       "      <td>United States History</td>\n",
       "      <td>World History</td>\n",
       "      <td>Number of Students</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>American Indian/Alaska Native</td>\n",
       "      <td>5</td>\n",
       "      <td>1,123</td>\n",
       "      <td>6</td>\n",
       "      <td>38</td>\n",
       "      <td>145</td>\n",
       "      <td>88</td>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>118</td>\n",
       "      <td>67</td>\n",
       "      <td>27</td>\n",
       "      <td>19</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>*</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>25</td>\n",
       "      <td>16</td>\n",
       "      <td>7</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>126</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>78</td>\n",
       "      <td>107</td>\n",
       "      <td>45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2,365</td>\n",
       "      <td>8</td>\n",
       "      <td>103</td>\n",
       "      <td>154</td>\n",
       "      <td>45</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "      <td>342</td>\n",
       "      <td>249</td>\n",
       "      <td>97</td>\n",
       "      <td>50</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>*</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>54</td>\n",
       "      <td>42</td>\n",
       "      <td>11</td>\n",
       "      <td>49</td>\n",
       "      <td>7</td>\n",
       "      <td>29</td>\n",
       "      <td>226</td>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>119</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>128</td>\n",
       "      <td>298</td>\n",
       "      <td>126</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>3,898</td>\n",
       "      <td>26</td>\n",
       "      <td>199</td>\n",
       "      <td>191</td>\n",
       "      <td>59</td>\n",
       "      <td>113</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>773</td>\n",
       "      <td>586</td>\n",
       "      <td>81</td>\n",
       "      <td>108</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>72</td>\n",
       "      <td>*</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>59</td>\n",
       "      <td>30</td>\n",
       "      <td>13</td>\n",
       "      <td>71</td>\n",
       "      <td>7</td>\n",
       "      <td>39</td>\n",
       "      <td>202</td>\n",
       "      <td>42</td>\n",
       "      <td>3</td>\n",
       "      <td>138</td>\n",
       "      <td>57</td>\n",
       "      <td>7</td>\n",
       "      <td>48</td>\n",
       "      <td>248</td>\n",
       "      <td>442</td>\n",
       "      <td>225</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>4,691</td>\n",
       "      <td>20</td>\n",
       "      <td>230</td>\n",
       "      <td>155</td>\n",
       "      <td>28</td>\n",
       "      <td>99</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>8</td>\n",
       "      <td>923</td>\n",
       "      <td>872</td>\n",
       "      <td>135</td>\n",
       "      <td>65</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>66</td>\n",
       "      <td>*</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>76</td>\n",
       "      <td>32</td>\n",
       "      <td>34</td>\n",
       "      <td>59</td>\n",
       "      <td>17</td>\n",
       "      <td>38</td>\n",
       "      <td>150</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>147</td>\n",
       "      <td>35</td>\n",
       "      <td>7</td>\n",
       "      <td>20</td>\n",
       "      <td>341</td>\n",
       "      <td>736</td>\n",
       "      <td>306</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>4,530</td>\n",
       "      <td>18</td>\n",
       "      <td>262</td>\n",
       "      <td>534</td>\n",
       "      <td>85</td>\n",
       "      <td>233</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>53</td>\n",
       "      <td>455</td>\n",
       "      <td>333</td>\n",
       "      <td>171</td>\n",
       "      <td>159</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>145</td>\n",
       "      <td>*</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>127</td>\n",
       "      <td>52</td>\n",
       "      <td>16</td>\n",
       "      <td>104</td>\n",
       "      <td>13</td>\n",
       "      <td>38</td>\n",
       "      <td>241</td>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>209</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>311</td>\n",
       "      <td>556</td>\n",
       "      <td>324</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Total</td>\n",
       "      <td>16,607</td>\n",
       "      <td>78</td>\n",
       "      <td>832</td>\n",
       "      <td>1,179</td>\n",
       "      <td>305</td>\n",
       "      <td>539</td>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>115</td>\n",
       "      <td>2,611</td>\n",
       "      <td>2,107</td>\n",
       "      <td>511</td>\n",
       "      <td>401</td>\n",
       "      <td>50</td>\n",
       "      <td>15</td>\n",
       "      <td>355</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>341</td>\n",
       "      <td>172</td>\n",
       "      <td>81</td>\n",
       "      <td>302</td>\n",
       "      <td>47</td>\n",
       "      <td>162</td>\n",
       "      <td>945</td>\n",
       "      <td>171</td>\n",
       "      <td>7</td>\n",
       "      <td>653</td>\n",
       "      <td>158</td>\n",
       "      <td>20</td>\n",
       "      <td>93</td>\n",
       "      <td>1,106</td>\n",
       "      <td>2,139</td>\n",
       "      <td>1,026</td>\n",
       "      <td>\\t6,336</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Mean Grade</td>\n",
       "      <td>\\t2.45</td>\n",
       "      <td>\\t2.54</td>\n",
       "      <td>\\t2.31</td>\n",
       "      <td>\\t2.34</td>\n",
       "      <td>\\t3.08</td>\n",
       "      <td>\\t2.19</td>\n",
       "      <td>\\t3.00</td>\n",
       "      <td>\\t2.42</td>\n",
       "      <td>\\t2.50</td>\n",
       "      <td>\\t2.52</td>\n",
       "      <td>\\t2.45</td>\n",
       "      <td>\\t2.36</td>\n",
       "      <td>\\t2.26</td>\n",
       "      <td>\\t2.88</td>\n",
       "      <td>\\t2.93</td>\n",
       "      <td>\\t2.26</td>\n",
       "      <td>*</td>\n",
       "      <td>\\t3.20</td>\n",
       "      <td>\\t2.67</td>\n",
       "      <td>\\t2.34</td>\n",
       "      <td>\\t2.64</td>\n",
       "      <td>\\t2.49</td>\n",
       "      <td>\\t2.40</td>\n",
       "      <td>\\t2.36</td>\n",
       "      <td>\\t2.70</td>\n",
       "      <td>\\t2.84</td>\n",
       "      <td>\\t2.39</td>\n",
       "      <td>\\t3.29</td>\n",
       "      <td>\\t2.44</td>\n",
       "      <td>\\t3.16</td>\n",
       "      <td>\\t3.00</td>\n",
       "      <td>\\t2.98</td>\n",
       "      <td>\\t2.39</td>\n",
       "      <td>\\t2.38</td>\n",
       "      <td>\\t2.28</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Asian/Asian American/Pacific Islander</td>\n",
       "      <td>5</td>\n",
       "      <td>103,454</td>\n",
       "      <td>383</td>\n",
       "      <td>6,913</td>\n",
       "      <td>11,099</td>\n",
       "      <td>11,924</td>\n",
       "      <td>6,058</td>\n",
       "      <td>3,913</td>\n",
       "      <td>570</td>\n",
       "      <td>1,943</td>\n",
       "      <td>7,629</td>\n",
       "      <td>4,274</td>\n",
       "      <td>1,627</td>\n",
       "      <td>1,786</td>\n",
       "      <td>330</td>\n",
       "      <td>44</td>\n",
       "      <td>1,391</td>\n",
       "      <td>3</td>\n",
       "      <td>456</td>\n",
       "      <td>127</td>\n",
       "      <td>2,883</td>\n",
       "      <td>2,149</td>\n",
       "      <td>598</td>\n",
       "      <td>2,693</td>\n",
       "      <td>1,406</td>\n",
       "      <td>2,655</td>\n",
       "      <td>7,543</td>\n",
       "      <td>1,146</td>\n",
       "      <td>83</td>\n",
       "      <td>5,022</td>\n",
       "      <td>361</td>\n",
       "      <td>31</td>\n",
       "      <td>418</td>\n",
       "      <td>4,002</td>\n",
       "      <td>8,470</td>\n",
       "      <td>3,524</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>106,940</td>\n",
       "      <td>689</td>\n",
       "      <td>7,001</td>\n",
       "      <td>7,041</td>\n",
       "      <td>3,513</td>\n",
       "      <td>5,691</td>\n",
       "      <td>725</td>\n",
       "      <td>548</td>\n",
       "      <td>1,639</td>\n",
       "      <td>10,749</td>\n",
       "      <td>8,199</td>\n",
       "      <td>3,375</td>\n",
       "      <td>2,762</td>\n",
       "      <td>540</td>\n",
       "      <td>88</td>\n",
       "      <td>1,864</td>\n",
       "      <td>21</td>\n",
       "      <td>104</td>\n",
       "      <td>123</td>\n",
       "      <td>4,493</td>\n",
       "      <td>3,077</td>\n",
       "      <td>462</td>\n",
       "      <td>2,888</td>\n",
       "      <td>1,054</td>\n",
       "      <td>2,099</td>\n",
       "      <td>7,320</td>\n",
       "      <td>1,635</td>\n",
       "      <td>126</td>\n",
       "      <td>6,031</td>\n",
       "      <td>653</td>\n",
       "      <td>47</td>\n",
       "      <td>421</td>\n",
       "      <td>4,599</td>\n",
       "      <td>12,110</td>\n",
       "      <td>5,253</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Appendix C: AP Exams Taken in U.S. Public Schools by the Class of 2013  \\\n",
       "0                                                 NaN                       \n",
       "1                                                 NaN                       \n",
       "2                                           Ethnicity                       \n",
       "3                       American Indian/Alaska Native                       \n",
       "4                                                 NaN                       \n",
       "5                                                 NaN                       \n",
       "6                                                 NaN                       \n",
       "7                                                 NaN                       \n",
       "8                                                 NaN                       \n",
       "9                                                 NaN                       \n",
       "10              Asian/Asian American/Pacific Islander                       \n",
       "11                                                NaN                       \n",
       "\n",
       "                                           Unnamed: 1   Unnamed: 2  \\\n",
       "0                                                 NaN          NaN   \n",
       "1   Number of Exam Takers, by Subject and Score Point          NaN   \n",
       "2                                            AP Score  Total Exams   \n",
       "3                                                   5       1,123    \n",
       "4                                                   4       2,365    \n",
       "5                                                   3       3,898    \n",
       "6                                                   2       4,691    \n",
       "7                                                   1       4,530    \n",
       "8                                          Total           16,607    \n",
       "9                                          Mean Grade      \\t2.45    \n",
       "10                                                  5     103,454    \n",
       "11                                                  4     106,940    \n",
       "\n",
       "     Unnamed: 3 Unnamed: 4   Unnamed: 5   Unnamed: 6 Unnamed: 7  \\\n",
       "0           NaN        NaN          NaN          NaN        NaN   \n",
       "1           NaN        NaN          NaN          NaN        NaN   \n",
       "2   Art History    Biology  Calculus AB  Calculus BC  Chemistry   \n",
       "3            6         38          145           88         35    \n",
       "4            8        103          154           45         59    \n",
       "5           26        199          191           59        113    \n",
       "6           20        230          155           28         99    \n",
       "7           18        262          534           85        233    \n",
       "8           78        832        1,179          305        539    \n",
       "9       \\t2.54     \\t2.31       \\t2.34       \\t3.08     \\t2.19    \n",
       "10         383      6,913       11,099       11,924      6,058    \n",
       "11         689      7,001        7,041        3,513      5,691    \n",
       "\n",
       "                      Unnamed: 8                           Unnamed: 9  \\\n",
       "0                            NaN                                  NaN   \n",
       "1                            NaN                                  NaN   \n",
       "2   Chinese Language and Culture  Comparative Government and Politics   \n",
       "3                             2                                    2    \n",
       "4                             0                                    9    \n",
       "5                             1                                   14    \n",
       "6                             0                                   22    \n",
       "7                             2                                   13    \n",
       "8                             5                                   60    \n",
       "9                        \\t3.00                               \\t2.42    \n",
       "10                        3,913                                  570    \n",
       "11                          725                                  548    \n",
       "\n",
       "           Unnamed: 10                       Unnamed: 11  \\\n",
       "0                  NaN                               NaN   \n",
       "1                  NaN                               NaN   \n",
       "2   Computer Science A  English Language and Composition   \n",
       "3                  18                               118    \n",
       "4                  20                               342    \n",
       "5                  16                               773    \n",
       "6                   8                               923    \n",
       "7                  53                               455    \n",
       "8                 115                             2,611    \n",
       "9              \\t2.50                            \\t2.52    \n",
       "10              1,943                             7,629    \n",
       "11              1,639                            10,749    \n",
       "\n",
       "                           Unnamed: 12            Unnamed: 13  \\\n",
       "0                                  NaN                    NaN   \n",
       "1                                  NaN                    NaN   \n",
       "2   English Literature and Composition  Environmental Science   \n",
       "3                                  67                     27    \n",
       "4                                 249                     97    \n",
       "5                                 586                     81    \n",
       "6                                 872                    135    \n",
       "7                                 333                    171    \n",
       "8                               2,107                    511    \n",
       "9                              \\t2.45                 \\t2.36    \n",
       "10                              4,274                  1,627    \n",
       "11                              8,199                  3,375    \n",
       "\n",
       "         Unnamed: 14                  Unnamed: 15  \\\n",
       "0                NaN                          NaN   \n",
       "1                NaN                          NaN   \n",
       "2   European History  French Language and Culture   \n",
       "3                19                            5    \n",
       "4                50                            8    \n",
       "5               108                           16    \n",
       "6                65                           18    \n",
       "7               159                            3    \n",
       "8               401                           50    \n",
       "9            \\t2.26                       \\t2.88    \n",
       "10            1,786                          330    \n",
       "11            2,762                          540    \n",
       "\n",
       "                    Unnamed: 16      Unnamed: 17  \\\n",
       "0                           NaN              NaN   \n",
       "1                           NaN              NaN   \n",
       "2   German Language and Culture  Human Geography   \n",
       "3                            1               22    \n",
       "4                            2               50    \n",
       "5                            8               72    \n",
       "6                            3               66    \n",
       "7                            1              145    \n",
       "8                           15              355    \n",
       "9                       \\t2.93           \\t2.26    \n",
       "10                          44            1,391    \n",
       "11                          88            1,864    \n",
       "\n",
       "                     Unnamed: 18                    Unnamed: 19 Unnamed: 20  \\\n",
       "0                            NaN                            NaN         NaN   \n",
       "1                            NaN                            NaN         NaN   \n",
       "2   Italian Language and Culture  Japanese Language and Culture       Latin   \n",
       "3                              *                             2           3    \n",
       "4                              *                             0           1    \n",
       "5                              *                             1           3    \n",
       "6                              *                             1           4    \n",
       "7                              *                             1           4    \n",
       "8                             1                              5          15    \n",
       "9                              *                        \\t3.20      \\t2.67    \n",
       "10                            3                            456         127    \n",
       "11                           21                            104         123    \n",
       "\n",
       "       Unnamed: 21     Unnamed: 22   Unnamed: 23 Unnamed: 24  \\\n",
       "0              NaN             NaN           NaN         NaN   \n",
       "1              NaN             NaN           NaN         NaN   \n",
       "2   Macroeconomics  Microeconomics  Music Theory   Physics B   \n",
       "3              25              16             7          19    \n",
       "4              54              42            11          49    \n",
       "5              59              30            13          71    \n",
       "6              76              32            34          59    \n",
       "7             127              52            16         104    \n",
       "8             341             172            81         302    \n",
       "9          \\t2.34          \\t2.64        \\t2.49      \\t2.40    \n",
       "10          2,883           2,149           598       2,693    \n",
       "11          4,493           3,077           462       2,888    \n",
       "\n",
       "                             Unnamed: 25           Unnamed: 26 Unnamed: 27  \\\n",
       "0                                    NaN                   NaN         NaN   \n",
       "1                                    NaN                   NaN         NaN   \n",
       "2   Physics C: Electricity and Magnetism  Physics C: Mechanics  Psychology   \n",
       "3                                     3                    18         126    \n",
       "4                                     7                    29         226    \n",
       "5                                     7                    39         202    \n",
       "6                                    17                    38         150    \n",
       "7                                    13                    38         241    \n",
       "8                                    47                   162         945    \n",
       "9                                \\t2.36                \\t2.70      \\t2.84    \n",
       "10                                1,406                 2,655       7,543    \n",
       "11                                1,054                 2,099       7,320    \n",
       "\n",
       "         Unnamed: 28                     Unnamed: 29 Unnamed: 30  \\\n",
       "0                NaN                             NaN         NaN   \n",
       "1                NaN                             NaN         NaN   \n",
       "2   Spanish Language  Spanish Literature and Culture  Statistics   \n",
       "3                13                               0          40    \n",
       "4                20                               3         119    \n",
       "5                42                               3         138    \n",
       "6                42                               1         147    \n",
       "7                54                               0         209    \n",
       "8               171                               7         653    \n",
       "9            \\t2.39                          \\t3.29      \\t2.44    \n",
       "10            1,146                              83       5,022    \n",
       "11            1,635                             126       6,031    \n",
       "\n",
       "               Unnamed: 31             Unnamed: 32          Unnamed: 33  \\\n",
       "0                      NaN                     NaN                  NaN   \n",
       "1                      NaN                     NaN                  NaN   \n",
       "2   Studio Art: 2-D Design  Studio Art: 3-D Design  Studio Art: Drawing   \n",
       "3                      16                       4                    8    \n",
       "4                      43                       1                   12    \n",
       "5                      57                       7                   48    \n",
       "6                      35                       7                   20    \n",
       "7                       7                       1                    5    \n",
       "8                     158                      20                   93    \n",
       "9                  \\t3.16                  \\t3.00               \\t2.98    \n",
       "10                    361                      31                  418    \n",
       "11                    653                      47                  421    \n",
       "\n",
       "                              Unnamed: 34            Unnamed: 35  \\\n",
       "0                                     NaN                    NaN   \n",
       "1                                     NaN                    NaN   \n",
       "2   United States Government and Politics  United States History   \n",
       "3                                     78                    107    \n",
       "4                                    128                    298    \n",
       "5                                    248                    442    \n",
       "6                                    341                    736    \n",
       "7                                    311                    556    \n",
       "8                                  1,106                  2,139    \n",
       "9                                 \\t2.39                 \\t2.38    \n",
       "10                                 4,002                  8,470    \n",
       "11                                 4,599                 12,110    \n",
       "\n",
       "      Unnamed: 36         Unnamed: 37  Unnamed: 38  \n",
       "0             NaN                 NaN          NaN  \n",
       "1             NaN                 NaN          NaN  \n",
       "2   World History  Number of Students          NaN  \n",
       "3             45                  NaN          NaN  \n",
       "4            126                  NaN          NaN  \n",
       "5            225                  NaN          NaN  \n",
       "6            306                  NaN          NaN  \n",
       "7            324                  NaN          NaN  \n",
       "8          1,026             \\t6,336           NaN  \n",
       "9         \\t2.28                  NaN          NaN  \n",
       "10         3,524                  NaN          NaN  \n",
       "11         5,253                  NaN          NaN  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ap_tests.head(12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To begin with, observe that the top few rows here are garbage, and can be deleted. In addition, my city data does not have data on AP testing broken up by subject, which means that the only columns that are useful to me are\n",
    "- column 1, which contains data on ethnicity\n",
    "- column 2, which contains scores (and therefore is necessary to determine pass rates)\n",
    "- column 3, which contains information on total exams taken (divided by race and score)\n",
    "- column 35, which contains information on the total number of students of each race taking AP exams."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>2</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>AP Score</th>\n",
       "      <th>Total Exams</th>\n",
       "      <th>Art History</th>\n",
       "      <th>Biology</th>\n",
       "      <th>Calculus AB</th>\n",
       "      <th>Calculus BC</th>\n",
       "      <th>Chemistry</th>\n",
       "      <th>Chinese Language and Culture</th>\n",
       "      <th>Comparative Government and Politics</th>\n",
       "      <th>Computer Science A</th>\n",
       "      <th>English Language and Composition</th>\n",
       "      <th>English Literature and Composition</th>\n",
       "      <th>Environmental Science</th>\n",
       "      <th>European History</th>\n",
       "      <th>French Language and Culture</th>\n",
       "      <th>German Language and Culture</th>\n",
       "      <th>Human Geography</th>\n",
       "      <th>Italian Language and Culture</th>\n",
       "      <th>Japanese Language and Culture</th>\n",
       "      <th>Latin</th>\n",
       "      <th>Macroeconomics</th>\n",
       "      <th>Microeconomics</th>\n",
       "      <th>Music Theory</th>\n",
       "      <th>Physics B</th>\n",
       "      <th>Physics C: Electricity and Magnetism</th>\n",
       "      <th>Physics C: Mechanics</th>\n",
       "      <th>Psychology</th>\n",
       "      <th>Spanish Language</th>\n",
       "      <th>Spanish Literature and Culture</th>\n",
       "      <th>Statistics</th>\n",
       "      <th>Studio Art: 2-D Design</th>\n",
       "      <th>Studio Art: 3-D Design</th>\n",
       "      <th>Studio Art: Drawing</th>\n",
       "      <th>United States Government and Politics</th>\n",
       "      <th>United States History</th>\n",
       "      <th>World History</th>\n",
       "      <th>Number of Students</th>\n",
       "      <th>nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>American Indian/Alaska Native</td>\n",
       "      <td>5</td>\n",
       "      <td>1,123</td>\n",
       "      <td>6</td>\n",
       "      <td>38</td>\n",
       "      <td>145</td>\n",
       "      <td>88</td>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>118</td>\n",
       "      <td>67</td>\n",
       "      <td>27</td>\n",
       "      <td>19</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>*</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>25</td>\n",
       "      <td>16</td>\n",
       "      <td>7</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>126</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>78</td>\n",
       "      <td>107</td>\n",
       "      <td>45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2,365</td>\n",
       "      <td>8</td>\n",
       "      <td>103</td>\n",
       "      <td>154</td>\n",
       "      <td>45</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "      <td>342</td>\n",
       "      <td>249</td>\n",
       "      <td>97</td>\n",
       "      <td>50</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>*</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>54</td>\n",
       "      <td>42</td>\n",
       "      <td>11</td>\n",
       "      <td>49</td>\n",
       "      <td>7</td>\n",
       "      <td>29</td>\n",
       "      <td>226</td>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>119</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>128</td>\n",
       "      <td>298</td>\n",
       "      <td>126</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>3,898</td>\n",
       "      <td>26</td>\n",
       "      <td>199</td>\n",
       "      <td>191</td>\n",
       "      <td>59</td>\n",
       "      <td>113</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>773</td>\n",
       "      <td>586</td>\n",
       "      <td>81</td>\n",
       "      <td>108</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>72</td>\n",
       "      <td>*</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>59</td>\n",
       "      <td>30</td>\n",
       "      <td>13</td>\n",
       "      <td>71</td>\n",
       "      <td>7</td>\n",
       "      <td>39</td>\n",
       "      <td>202</td>\n",
       "      <td>42</td>\n",
       "      <td>3</td>\n",
       "      <td>138</td>\n",
       "      <td>57</td>\n",
       "      <td>7</td>\n",
       "      <td>48</td>\n",
       "      <td>248</td>\n",
       "      <td>442</td>\n",
       "      <td>225</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>4,691</td>\n",
       "      <td>20</td>\n",
       "      <td>230</td>\n",
       "      <td>155</td>\n",
       "      <td>28</td>\n",
       "      <td>99</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>8</td>\n",
       "      <td>923</td>\n",
       "      <td>872</td>\n",
       "      <td>135</td>\n",
       "      <td>65</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>66</td>\n",
       "      <td>*</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>76</td>\n",
       "      <td>32</td>\n",
       "      <td>34</td>\n",
       "      <td>59</td>\n",
       "      <td>17</td>\n",
       "      <td>38</td>\n",
       "      <td>150</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>147</td>\n",
       "      <td>35</td>\n",
       "      <td>7</td>\n",
       "      <td>20</td>\n",
       "      <td>341</td>\n",
       "      <td>736</td>\n",
       "      <td>306</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>4,530</td>\n",
       "      <td>18</td>\n",
       "      <td>262</td>\n",
       "      <td>534</td>\n",
       "      <td>85</td>\n",
       "      <td>233</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>53</td>\n",
       "      <td>455</td>\n",
       "      <td>333</td>\n",
       "      <td>171</td>\n",
       "      <td>159</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>145</td>\n",
       "      <td>*</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>127</td>\n",
       "      <td>52</td>\n",
       "      <td>16</td>\n",
       "      <td>104</td>\n",
       "      <td>13</td>\n",
       "      <td>38</td>\n",
       "      <td>241</td>\n",
       "      <td>54</td>\n",
       "      <td>0</td>\n",
       "      <td>209</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>311</td>\n",
       "      <td>556</td>\n",
       "      <td>324</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Total</td>\n",
       "      <td>16,607</td>\n",
       "      <td>78</td>\n",
       "      <td>832</td>\n",
       "      <td>1,179</td>\n",
       "      <td>305</td>\n",
       "      <td>539</td>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>115</td>\n",
       "      <td>2,611</td>\n",
       "      <td>2,107</td>\n",
       "      <td>511</td>\n",
       "      <td>401</td>\n",
       "      <td>50</td>\n",
       "      <td>15</td>\n",
       "      <td>355</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>341</td>\n",
       "      <td>172</td>\n",
       "      <td>81</td>\n",
       "      <td>302</td>\n",
       "      <td>47</td>\n",
       "      <td>162</td>\n",
       "      <td>945</td>\n",
       "      <td>171</td>\n",
       "      <td>7</td>\n",
       "      <td>653</td>\n",
       "      <td>158</td>\n",
       "      <td>20</td>\n",
       "      <td>93</td>\n",
       "      <td>1,106</td>\n",
       "      <td>2,139</td>\n",
       "      <td>1,026</td>\n",
       "      <td>\\t6,336</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Mean Grade</td>\n",
       "      <td>\\t2.45</td>\n",
       "      <td>\\t2.54</td>\n",
       "      <td>\\t2.31</td>\n",
       "      <td>\\t2.34</td>\n",
       "      <td>\\t3.08</td>\n",
       "      <td>\\t2.19</td>\n",
       "      <td>\\t3.00</td>\n",
       "      <td>\\t2.42</td>\n",
       "      <td>\\t2.50</td>\n",
       "      <td>\\t2.52</td>\n",
       "      <td>\\t2.45</td>\n",
       "      <td>\\t2.36</td>\n",
       "      <td>\\t2.26</td>\n",
       "      <td>\\t2.88</td>\n",
       "      <td>\\t2.93</td>\n",
       "      <td>\\t2.26</td>\n",
       "      <td>*</td>\n",
       "      <td>\\t3.20</td>\n",
       "      <td>\\t2.67</td>\n",
       "      <td>\\t2.34</td>\n",
       "      <td>\\t2.64</td>\n",
       "      <td>\\t2.49</td>\n",
       "      <td>\\t2.40</td>\n",
       "      <td>\\t2.36</td>\n",
       "      <td>\\t2.70</td>\n",
       "      <td>\\t2.84</td>\n",
       "      <td>\\t2.39</td>\n",
       "      <td>\\t3.29</td>\n",
       "      <td>\\t2.44</td>\n",
       "      <td>\\t3.16</td>\n",
       "      <td>\\t3.00</td>\n",
       "      <td>\\t2.98</td>\n",
       "      <td>\\t2.39</td>\n",
       "      <td>\\t2.38</td>\n",
       "      <td>\\t2.28</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Asian/Asian American/Pacific Islander</td>\n",
       "      <td>5</td>\n",
       "      <td>103,454</td>\n",
       "      <td>383</td>\n",
       "      <td>6,913</td>\n",
       "      <td>11,099</td>\n",
       "      <td>11,924</td>\n",
       "      <td>6,058</td>\n",
       "      <td>3,913</td>\n",
       "      <td>570</td>\n",
       "      <td>1,943</td>\n",
       "      <td>7,629</td>\n",
       "      <td>4,274</td>\n",
       "      <td>1,627</td>\n",
       "      <td>1,786</td>\n",
       "      <td>330</td>\n",
       "      <td>44</td>\n",
       "      <td>1,391</td>\n",
       "      <td>3</td>\n",
       "      <td>456</td>\n",
       "      <td>127</td>\n",
       "      <td>2,883</td>\n",
       "      <td>2,149</td>\n",
       "      <td>598</td>\n",
       "      <td>2,693</td>\n",
       "      <td>1,406</td>\n",
       "      <td>2,655</td>\n",
       "      <td>7,543</td>\n",
       "      <td>1,146</td>\n",
       "      <td>83</td>\n",
       "      <td>5,022</td>\n",
       "      <td>361</td>\n",
       "      <td>31</td>\n",
       "      <td>418</td>\n",
       "      <td>4,002</td>\n",
       "      <td>8,470</td>\n",
       "      <td>3,524</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>106,940</td>\n",
       "      <td>689</td>\n",
       "      <td>7,001</td>\n",
       "      <td>7,041</td>\n",
       "      <td>3,513</td>\n",
       "      <td>5,691</td>\n",
       "      <td>725</td>\n",
       "      <td>548</td>\n",
       "      <td>1,639</td>\n",
       "      <td>10,749</td>\n",
       "      <td>8,199</td>\n",
       "      <td>3,375</td>\n",
       "      <td>2,762</td>\n",
       "      <td>540</td>\n",
       "      <td>88</td>\n",
       "      <td>1,864</td>\n",
       "      <td>21</td>\n",
       "      <td>104</td>\n",
       "      <td>123</td>\n",
       "      <td>4,493</td>\n",
       "      <td>3,077</td>\n",
       "      <td>462</td>\n",
       "      <td>2,888</td>\n",
       "      <td>1,054</td>\n",
       "      <td>2,099</td>\n",
       "      <td>7,320</td>\n",
       "      <td>1,635</td>\n",
       "      <td>126</td>\n",
       "      <td>6,031</td>\n",
       "      <td>653</td>\n",
       "      <td>47</td>\n",
       "      <td>421</td>\n",
       "      <td>4,599</td>\n",
       "      <td>12,110</td>\n",
       "      <td>5,253</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>109,776</td>\n",
       "      <td>769</td>\n",
       "      <td>7,606</td>\n",
       "      <td>6,515</td>\n",
       "      <td>3,624</td>\n",
       "      <td>4,931</td>\n",
       "      <td>413</td>\n",
       "      <td>432</td>\n",
       "      <td>922</td>\n",
       "      <td>13,520</td>\n",
       "      <td>11,978</td>\n",
       "      <td>2,123</td>\n",
       "      <td>4,468</td>\n",
       "      <td>709</td>\n",
       "      <td>86</td>\n",
       "      <td>1,725</td>\n",
       "      <td>27</td>\n",
       "      <td>216</td>\n",
       "      <td>190</td>\n",
       "      <td>2,889</td>\n",
       "      <td>1,855</td>\n",
       "      <td>474</td>\n",
       "      <td>3,728</td>\n",
       "      <td>590</td>\n",
       "      <td>1,572</td>\n",
       "      <td>4,783</td>\n",
       "      <td>1,499</td>\n",
       "      <td>104</td>\n",
       "      <td>5,821</td>\n",
       "      <td>608</td>\n",
       "      <td>102</td>\n",
       "      <td>608</td>\n",
       "      <td>7,945</td>\n",
       "      <td>10,229</td>\n",
       "      <td>6,715</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "2                              Ethnicity    AP Score Total Exams Art History  \\\n",
       "0          American Indian/Alaska Native           5      1,123           6    \n",
       "1                                    NaN           4      2,365           8    \n",
       "2                                    NaN           3      3,898          26    \n",
       "3                                    NaN           2      4,691          20    \n",
       "4                                    NaN           1      4,530          18    \n",
       "5                                    NaN  Total          16,607          78    \n",
       "6                                    NaN  Mean Grade     \\t2.45      \\t2.54    \n",
       "7  Asian/Asian American/Pacific Islander           5    103,454         383    \n",
       "8                                    NaN           4    106,940         689    \n",
       "9                                    NaN           3    109,776         769    \n",
       "\n",
       "2   Biology Calculus AB Calculus BC Chemistry Chinese Language and Culture  \\\n",
       "0       38         145          88        35                            2    \n",
       "1      103         154          45        59                            0    \n",
       "2      199         191          59       113                            1    \n",
       "3      230         155          28        99                            0    \n",
       "4      262         534          85       233                            2    \n",
       "5      832       1,179         305       539                            5    \n",
       "6   \\t2.31      \\t2.34      \\t3.08    \\t2.19                       \\t3.00    \n",
       "7    6,913      11,099      11,924     6,058                        3,913    \n",
       "8    7,001       7,041       3,513     5,691                          725    \n",
       "9    7,606       6,515       3,624     4,931                          413    \n",
       "\n",
       "2 Comparative Government and Politics Computer Science A  \\\n",
       "0                                  2                 18    \n",
       "1                                  9                 20    \n",
       "2                                 14                 16    \n",
       "3                                 22                  8    \n",
       "4                                 13                 53    \n",
       "5                                 60                115    \n",
       "6                             \\t2.42             \\t2.50    \n",
       "7                                570              1,943    \n",
       "8                                548              1,639    \n",
       "9                                432                922    \n",
       "\n",
       "2 English Language and Composition English Literature and Composition  \\\n",
       "0                             118                                 67    \n",
       "1                             342                                249    \n",
       "2                             773                                586    \n",
       "3                             923                                872    \n",
       "4                             455                                333    \n",
       "5                           2,611                              2,107    \n",
       "6                          \\t2.52                             \\t2.45    \n",
       "7                           7,629                              4,274    \n",
       "8                          10,749                              8,199    \n",
       "9                          13,520                             11,978    \n",
       "\n",
       "2 Environmental Science European History French Language and Culture  \\\n",
       "0                   27               19                           5    \n",
       "1                   97               50                           8    \n",
       "2                   81              108                          16    \n",
       "3                  135               65                          18    \n",
       "4                  171              159                           3    \n",
       "5                  511              401                          50    \n",
       "6               \\t2.36           \\t2.26                      \\t2.88    \n",
       "7                1,627            1,786                         330    \n",
       "8                3,375            2,762                         540    \n",
       "9                2,123            4,468                         709    \n",
       "\n",
       "2 German Language and Culture Human Geography Italian Language and Culture  \\\n",
       "0                          1              22                             *   \n",
       "1                          2              50                             *   \n",
       "2                          8              72                             *   \n",
       "3                          3              66                             *   \n",
       "4                          1             145                             *   \n",
       "5                         15             355                            1    \n",
       "6                     \\t2.93          \\t2.26                             *   \n",
       "7                         44           1,391                            3    \n",
       "8                         88           1,864                           21    \n",
       "9                         86           1,725                           27    \n",
       "\n",
       "2 Japanese Language and Culture     Latin Macroeconomics Microeconomics  \\\n",
       "0                            2         3             25             16    \n",
       "1                            0         1             54             42    \n",
       "2                            1         3             59             30    \n",
       "3                            1         4             76             32    \n",
       "4                            1         4            127             52    \n",
       "5                            5        15            341            172    \n",
       "6                       \\t3.20    \\t2.67         \\t2.34         \\t2.64    \n",
       "7                          456       127          2,883          2,149    \n",
       "8                          104       123          4,493          3,077    \n",
       "9                          216       190          2,889          1,855    \n",
       "\n",
       "2 Music Theory Physics B Physics C: Electricity and Magnetism  \\\n",
       "0           7        19                                    3    \n",
       "1          11        49                                    7    \n",
       "2          13        71                                    7    \n",
       "3          34        59                                   17    \n",
       "4          16       104                                   13    \n",
       "5          81       302                                   47    \n",
       "6      \\t2.49    \\t2.40                               \\t2.36    \n",
       "7         598     2,693                                1,406    \n",
       "8         462     2,888                                1,054    \n",
       "9         474     3,728                                  590    \n",
       "\n",
       "2 Physics C: Mechanics Psychology Spanish Language  \\\n",
       "0                  18        126               13    \n",
       "1                  29        226               20    \n",
       "2                  39        202               42    \n",
       "3                  38        150               42    \n",
       "4                  38        241               54    \n",
       "5                 162        945              171    \n",
       "6              \\t2.70     \\t2.84           \\t2.39    \n",
       "7               2,655      7,543            1,146    \n",
       "8               2,099      7,320            1,635    \n",
       "9               1,572      4,783            1,499    \n",
       "\n",
       "2 Spanish Literature and Culture Statistics Studio Art: 2-D Design  \\\n",
       "0                             0         40                     16    \n",
       "1                             3        119                     43    \n",
       "2                             3        138                     57    \n",
       "3                             1        147                     35    \n",
       "4                             0        209                      7    \n",
       "5                             7        653                    158    \n",
       "6                        \\t3.29     \\t2.44                 \\t3.16    \n",
       "7                            83      5,022                    361    \n",
       "8                           126      6,031                    653    \n",
       "9                           104      5,821                    608    \n",
       "\n",
       "2 Studio Art: 3-D Design Studio Art: Drawing  \\\n",
       "0                     4                   8    \n",
       "1                     1                  12    \n",
       "2                     7                  48    \n",
       "3                     7                  20    \n",
       "4                     1                   5    \n",
       "5                    20                  93    \n",
       "6                \\t3.00              \\t2.98    \n",
       "7                    31                 418    \n",
       "8                    47                 421    \n",
       "9                   102                 608    \n",
       "\n",
       "2 United States Government and Politics United States History World History  \\\n",
       "0                                   78                   107            45    \n",
       "1                                  128                   298           126    \n",
       "2                                  248                   442           225    \n",
       "3                                  341                   736           306    \n",
       "4                                  311                   556           324    \n",
       "5                                1,106                 2,139         1,026    \n",
       "6                               \\t2.39                \\t2.38        \\t2.28    \n",
       "7                                4,002                 8,470         3,524    \n",
       "8                                4,599                12,110         5,253    \n",
       "9                                7,945                10,229         6,715    \n",
       "\n",
       "2 Number of Students  NaN  \n",
       "0                NaN  NaN  \n",
       "1                NaN  NaN  \n",
       "2                NaN  NaN  \n",
       "3                NaN  NaN  \n",
       "4                NaN  NaN  \n",
       "5           \\t6,336   NaN  \n",
       "6                NaN  NaN  \n",
       "7                NaN  NaN  \n",
       "8                NaN  NaN  \n",
       "9                NaN  NaN  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ap_tests.columns = ap_tests.loc[2]\n",
    "\n",
    "ap_tests.drop([0,1,2], inplace = True, axis = 0)\n",
    "\n",
    "ap_tests.reset_index(inplace = True, drop = True)\n",
    "\n",
    "ap_tests.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, looking at this dataframe, we see that there's a lot of interesting data here, but that doesn't have any analogue in our city data, so we might as well get rid of the data on both the types of tests and the individual scores on those tests. We want to keep the data in the columns \"Number of Students\" and \"Total Exams\" as well as \"AP Score\" (which gives us some idea of the pass rate for each ethnicity) and \"Ethnicity\". This can then be reorganized into a more useful dataframe of the form:\n",
    "\n",
    "| Ethnicity|Students|Total Exams|Exams Passed|Exams Failed|Pass Rate|\n",
    "|----------|--------|-----------|------------|------------|---------|\n",
    "|Native American|---|---|---|---|---|\n",
    "|Asian/ Pacific Islander|---|---|---|---|---|\n",
    "|Black|---|---|---|---|---|\n",
    "|White|---|---|---|---|---|\n",
    "|Hispanic|---|---|---|---|---|\n",
    "|Other|---|---|---|---|---|\n",
    "|No Response|---|---|---|---|---|\n",
    "|Total|---|---|---|---|---|\n",
    "\n",
    "One observation is that, because the Hispanic population in this data set is divided into subcategories (which we don't have for either of our city datasets), we need to combine those pieces of the dataframe in order to get what we want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "ap_tests = ap_tests[[u'Ethnicity', u'AP Score',u'Total Exams', u'Number of Students']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Function:\n",
    "\n",
    "Inputs:\n",
    "\n",
    "Returns:\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def ap(n):\n",
    "    passed = (string_to_float(ap_tests.loc[n, 'Total Exams']) + \n",
    "              string_to_float(ap_tests.loc[n+1, 'Total Exams']) + \n",
    "              string_to_float(ap_tests.loc[n+2, 'Total Exams']))\n",
    "    \n",
    "    failed = (string_to_float(ap_tests.loc[n+3, 'Total Exams']) +\n",
    "              string_to_float(ap_tests.loc[n+4, 'Total Exams']))\n",
    "    \n",
    "    students = string_to_float(ap_tests.loc[n+5, 'Number of Students'])\n",
    "    \n",
    "    total_exams = passed + failed\n",
    "    \n",
    "    pass_rate = round(passed/total_exams*100,1)\n",
    "    \n",
    "    return [students, total_exams, passed, failed, pass_rate]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "ap_by_ethnicity = pd.DataFrame(0, columns = ['Students','Total Exams',\n",
    "                                             'Exams Passed','Exams Failed','Pass Rate'],\n",
    "                                  index = ['Native American', 'Asian/ Pacific Islander', 'Black', 'White',\n",
    "                                           'Hispanic', 'Other', 'No Response', 'Total'])\n",
    "\n",
    "ap_by_ethnicity.loc['Native American'] = ap(0)\n",
    "ap_by_ethnicity.loc['Asian/ Pacific Islander'] = ap(7)\n",
    "ap_by_ethnicity.loc['Black'] = ap(14)\n",
    "ap_by_ethnicity.loc['White'] = ap(42)\n",
    "ap_by_ethnicity.loc['Other'] = ap(49)\n",
    "ap_by_ethnicity.loc['No Response'] = ap(56)\n",
    "ap_by_ethnicity.loc['Total'] = ap(63)\n",
    "\n",
    "# And to combine for the Hispanic students\n",
    "\n",
    "h1 = ap(21) # Mexican\n",
    "h2 = ap(28) # Puerto Rican\n",
    "h3 = ap(35) # Other Hispanic\n",
    "h0 = [0,0,0,0,0]\n",
    "for i in range(4):\n",
    "    h0[i] = h1[i] + h2[i] + h3[i]\n",
    "    \n",
    "h0[4] = round(h0[2]/h0[1]*100,1)\n",
    "\n",
    "ap_by_ethnicity.loc['Hispanic'] = h0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Students</th>\n",
       "      <th>Total Exams</th>\n",
       "      <th>Exams Passed</th>\n",
       "      <th>Exams Failed</th>\n",
       "      <th>Pass Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Native American</th>\n",
       "      <td>6336.0</td>\n",
       "      <td>16607.0</td>\n",
       "      <td>7386.0</td>\n",
       "      <td>9221.0</td>\n",
       "      <td>44.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/ Pacific Islander</th>\n",
       "      <td>107838.0</td>\n",
       "      <td>474183.0</td>\n",
       "      <td>320170.0</td>\n",
       "      <td>154013.0</td>\n",
       "      <td>67.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black</th>\n",
       "      <td>92406.0</td>\n",
       "      <td>233631.0</td>\n",
       "      <td>66407.0</td>\n",
       "      <td>167224.0</td>\n",
       "      <td>28.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White</th>\n",
       "      <td>561096.0</td>\n",
       "      <td>1761082.0</td>\n",
       "      <td>1122144.0</td>\n",
       "      <td>638938.0</td>\n",
       "      <td>63.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic</th>\n",
       "      <td>188514.0</td>\n",
       "      <td>536993.0</td>\n",
       "      <td>221539.0</td>\n",
       "      <td>315454.0</td>\n",
       "      <td>41.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Other</th>\n",
       "      <td>32183.0</td>\n",
       "      <td>107394.0</td>\n",
       "      <td>60881.0</td>\n",
       "      <td>46513.0</td>\n",
       "      <td>56.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>No Response</th>\n",
       "      <td>15057.0</td>\n",
       "      <td>23124.0</td>\n",
       "      <td>8499.0</td>\n",
       "      <td>14625.0</td>\n",
       "      <td>36.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>1003430.0</td>\n",
       "      <td>3153014.0</td>\n",
       "      <td>1807026.0</td>\n",
       "      <td>1345988.0</td>\n",
       "      <td>57.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Students  Total Exams  Exams Passed  Exams Failed  \\\n",
       "Native American             6336.0      16607.0        7386.0        9221.0   \n",
       "Asian/ Pacific Islander   107838.0     474183.0      320170.0      154013.0   \n",
       "Black                      92406.0     233631.0       66407.0      167224.0   \n",
       "White                     561096.0    1761082.0     1122144.0      638938.0   \n",
       "Hispanic                  188514.0     536993.0      221539.0      315454.0   \n",
       "Other                      32183.0     107394.0       60881.0       46513.0   \n",
       "No Response                15057.0      23124.0        8499.0       14625.0   \n",
       "Total                    1003430.0    3153014.0     1807026.0     1345988.0   \n",
       "\n",
       "                         Pass Rate  \n",
       "Native American               44.5  \n",
       "Asian/ Pacific Islander       67.5  \n",
       "Black                         28.4  \n",
       "White                         63.7  \n",
       "Hispanic                      41.3  \n",
       "Other                         56.7  \n",
       "No Response                   36.8  \n",
       "Total                         57.3  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ap_by_ethnicity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have organized our data at the national level, we pass to the city level. To begin, we restrict to data from the year 2013 for each of our two cities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_ap = milwaukee_ap.loc[milwaukee_ap['Year'] == 2013]\n",
    "milwaukee_ap.reset_index(drop = True, inplace = True)\n",
    "vegas_ap = vegas_ap.loc[vegas_ap['Year'] == 2013]\n",
    "vegas_ap.reset_index(drop = True, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, as before, we want to restrict to those schools that were actually located in the cities themselves. For this, we use the data found in ```schools_2013``` which contains data about the location codes for every school in Wisconsin or Nevada that was open in 2013."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "schools_2013 = schools_2013.loc[schools_2013['ULOCAL'] == 11]\n",
    "\n",
    "vegas_2013_schools = schools_2013.loc[(schools_2013['LCITY'] == 'LAS VEGAS')]\n",
    "\n",
    "vegas_2013_schools = vegas_2013_schools.loc[(vegas_2013_schools['G12OFFRD'] == 1)]\n",
    "\n",
    "vegas_2013_schools.reset_index(inplace = True, drop = True)\n",
    "\n",
    "milwaukee_2013_schools = schools_2013.loc[(schools_2013['LCITY'] == 'MILWAUKEE')]\n",
    "\n",
    "milwaukee_2013_schools = milwaukee_2013_schools.loc[(milwaukee_2013_schools['G12OFFRD'] == 1)]\n",
    "\n",
    "milwaukee_2013_schools.reset_index(inplace = True, drop = True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, for the data that I have, I want to take only those schools that appear in the above lists of public schools located in the city itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_2013_school_codes = milwaukee_2013_schools['NCESSCH'].tolist()\n",
    "\n",
    "vegas_2013_school_codes = vegas_2013_schools['NCESSCH'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "to_keep = []\n",
    "for j in range(len(vegas_ap)):\n",
    "    if vegas_ap.loc[j,'ID'] in vegas_2013_school_codes:\n",
    "        to_keep.append(j)\n",
    "        \n",
    "vegas_ap = vegas_ap.loc[to_keep]\n",
    "\n",
    "vegas_ap.reset_index(drop = True, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "to_keep = []\n",
    "for j in range(len(milwaukee_ap)):\n",
    "    if milwaukee_ap.loc[j,'ID'] in milwaukee_2013_school_codes:\n",
    "        to_keep.append(j)\n",
    "        \n",
    "milwaukee_ap = milwaukee_ap.loc[to_keep]\n",
    "milwaukee_ap.reset_index(inplace = True, drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lea State</th>\n",
       "      <th>LEA</th>\n",
       "      <th>School State</th>\n",
       "      <th>School</th>\n",
       "      <th>ID</th>\n",
       "      <th>Year</th>\n",
       "      <th>Category</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <th>Asian or Pacific Islander</th>\n",
       "      <th>Asian</th>\n",
       "      <th>Hawaiian/ Pacific Islander</th>\n",
       "      <th>Hispanic</th>\n",
       "      <th>Black</th>\n",
       "      <th>White</th>\n",
       "      <th>Two or more races</th>\n",
       "      <th>Total</th>\n",
       "      <th>SWD (IDEA-Eligible)</th>\n",
       "      <th>LEP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE</td>\n",
       "      <td>550004202234</td>\n",
       "      <td>2013</td>\n",
       "      <td>Enrollment in AP classes</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE</td>\n",
       "      <td>550004202234</td>\n",
       "      <td>2013</td>\n",
       "      <td>Taking AP tests for some AP courses taken</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE</td>\n",
       "      <td>550004202234</td>\n",
       "      <td>2013</td>\n",
       "      <td>Students who took AP courses but did not take ...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE</td>\n",
       "      <td>550004202234</td>\n",
       "      <td>2013</td>\n",
       "      <td>Passing some AP tests taken</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE</td>\n",
       "      <td>550004202234</td>\n",
       "      <td>2013</td>\n",
       "      <td>Passing no AP tests taken</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>14.00</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>14.00</td>\n",
       "      <td>&lt;=2</td>\n",
       "      <td>&lt;=2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>MILWAUKEE ACADEMY OF SCIENCE</td>\n",
       "      <td>550004202234</td>\n",
       "      <td>2013</td>\n",
       "      <td>Total Enrollment (Secondary Schools)</td>\n",
       "      <td>4.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>940.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>966.00</td>\n",
       "      <td>104.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL</td>\n",
       "      <td>550005002637</td>\n",
       "      <td>2013</td>\n",
       "      <td>Enrollment in AP classes</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL</td>\n",
       "      <td>550005002637</td>\n",
       "      <td>2013</td>\n",
       "      <td>Taking AP tests for some AP courses taken</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL</td>\n",
       "      <td>550005002637</td>\n",
       "      <td>2013</td>\n",
       "      <td>Students who took AP courses but did not take ...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL</td>\n",
       "      <td>550005002637</td>\n",
       "      <td>2013</td>\n",
       "      <td>Passing some AP tests taken</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL</td>\n",
       "      <td>550005002637</td>\n",
       "      <td>2013</td>\n",
       "      <td>Passing no AP tests taken</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL AGENCY</td>\n",
       "      <td>WI</td>\n",
       "      <td>TENOR HIGH SCHOOL</td>\n",
       "      <td>550005002637</td>\n",
       "      <td>2013</td>\n",
       "      <td>Total Enrollment (Secondary Schools)</td>\n",
       "      <td>4.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>103.00</td>\n",
       "      <td>76.00</td>\n",
       "      <td>37.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>224.00</td>\n",
       "      <td>23.00</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Lea State                                  LEA School State  \\\n",
       "0         WI  MILWAUKEE ACADEMY OF SCIENCE AGENCY           WI   \n",
       "1         WI  MILWAUKEE ACADEMY OF SCIENCE AGENCY           WI   \n",
       "2         WI  MILWAUKEE ACADEMY OF SCIENCE AGENCY           WI   \n",
       "3         WI  MILWAUKEE ACADEMY OF SCIENCE AGENCY           WI   \n",
       "4         WI  MILWAUKEE ACADEMY OF SCIENCE AGENCY           WI   \n",
       "5         WI  MILWAUKEE ACADEMY OF SCIENCE AGENCY           WI   \n",
       "6         WI             TENOR HIGH SCHOOL AGENCY           WI   \n",
       "7         WI             TENOR HIGH SCHOOL AGENCY           WI   \n",
       "8         WI             TENOR HIGH SCHOOL AGENCY           WI   \n",
       "9         WI             TENOR HIGH SCHOOL AGENCY           WI   \n",
       "10        WI             TENOR HIGH SCHOOL AGENCY           WI   \n",
       "11        WI             TENOR HIGH SCHOOL AGENCY           WI   \n",
       "\n",
       "                          School            ID  Year  \\\n",
       "0   MILWAUKEE ACADEMY OF SCIENCE  550004202234  2013   \n",
       "1   MILWAUKEE ACADEMY OF SCIENCE  550004202234  2013   \n",
       "2   MILWAUKEE ACADEMY OF SCIENCE  550004202234  2013   \n",
       "3   MILWAUKEE ACADEMY OF SCIENCE  550004202234  2013   \n",
       "4   MILWAUKEE ACADEMY OF SCIENCE  550004202234  2013   \n",
       "5   MILWAUKEE ACADEMY OF SCIENCE  550004202234  2013   \n",
       "6              TENOR HIGH SCHOOL  550005002637  2013   \n",
       "7              TENOR HIGH SCHOOL  550005002637  2013   \n",
       "8              TENOR HIGH SCHOOL  550005002637  2013   \n",
       "9              TENOR HIGH SCHOOL  550005002637  2013   \n",
       "10             TENOR HIGH SCHOOL  550005002637  2013   \n",
       "11             TENOR HIGH SCHOOL  550005002637  2013   \n",
       "\n",
       "                                             Category  \\\n",
       "0                            Enrollment in AP classes   \n",
       "1           Taking AP tests for some AP courses taken   \n",
       "2   Students who took AP courses but did not take ...   \n",
       "3                         Passing some AP tests taken   \n",
       "4                           Passing no AP tests taken   \n",
       "5                Total Enrollment (Secondary Schools)   \n",
       "6                            Enrollment in AP classes   \n",
       "7           Taking AP tests for some AP courses taken   \n",
       "8   Students who took AP courses but did not take ...   \n",
       "9                         Passing some AP tests taken   \n",
       "10                          Passing no AP tests taken   \n",
       "11               Total Enrollment (Secondary Schools)   \n",
       "\n",
       "   American Indian or Alaska Native  Asian or Pacific Islander Asian  \\\n",
       "0                              0.00                        NaN  0.00   \n",
       "1                              0.00                        NaN  0.00   \n",
       "2                              0.00                        NaN  0.00   \n",
       "3                               <=2                        NaN   <=2   \n",
       "4                               <=2                        NaN   <=2   \n",
       "5                              4.00                        NaN  0.00   \n",
       "6                                 0                        NaN     0   \n",
       "7                                 0                        NaN     0   \n",
       "8                                 0                        NaN     0   \n",
       "9                                 0                        NaN     0   \n",
       "10                                0                        NaN     0   \n",
       "11                             4.00                        NaN  4.00   \n",
       "\n",
       "   Hawaiian/ Pacific Islander Hispanic   Black  White Two or more races  \\\n",
       "0                        0.00     0.00   16.00   0.00              0.00   \n",
       "1                        0.00     0.00   10.00   0.00              0.00   \n",
       "2                        0.00     0.00    4.00   0.00              0.00   \n",
       "3                         <=2      <=2     <=2    <=2               <=2   \n",
       "4                         <=2      <=2   14.00    <=2               <=2   \n",
       "5                        0.00    13.00  940.00   7.00              2.00   \n",
       "6                           0        0       0      0                 0   \n",
       "7                           0        0       0      0                 0   \n",
       "8                           0        0       0      0                 0   \n",
       "9                           0        0       0      0                 0   \n",
       "10                          0        0       0      0                 0   \n",
       "11                       0.00   103.00   76.00  37.00              0.00   \n",
       "\n",
       "     Total SWD (IDEA-Eligible)   LEP  \n",
       "0    16.00                0.00  0.00  \n",
       "1    10.00                0.00  0.00  \n",
       "2     4.00                0.00  0.00  \n",
       "3      <=2                 <=2   <=2  \n",
       "4    14.00                 <=2   <=2  \n",
       "5   966.00              104.00  0.00  \n",
       "6        0                   0     0  \n",
       "7        0                   0     0  \n",
       "8        0                   0     0  \n",
       "9        0                   0     0  \n",
       "10       0                   0     0  \n",
       "11  224.00               23.00  7.00  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_ap.head(12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by making some observations about the data that is present in this dataframe (which will be the same for the ```vegas_ap``` dataframe. First, we have a sort of mini dataframe for each school in each year for which we have data. The rows of this mini dataframe are aligned with the following categories:\n",
    "- Enrollment in AP classes\\*,\n",
    "- Passing all AP tests taken,\n",
    "- Passing no AP tests taken\\*,\n",
    "- Passing some AP tests taken\\*,\n",
    "- Students who took AP courses but did not take any AP tests\\*,\n",
    "- Taking AP tests for all AP courses taken,\n",
    "- Taking AP tests for some AP courses taken\\*,\n",
    "- Total Enrollment (Secondary Schools)\\*\n",
    "\n",
    "where the particular subset of categories given is dependent on the year of the data available. We are then given the racial breakdown of students for each of these categories, with one twist. \n",
    "\n",
    "In order to maintain student anonymity, in cases where individual students could possibly be identifiable, the notation given is <=2, which means that, in theory, there could be anywhere from 0 to 2 students of the specified race in the specified category. Frequently, we can use other data from the table to fill in these numbers more accurately, but not always. In these cases, we might end up with a best guess or with a range of possible results to work with.\n",
    "\n",
    "We begin by trying to eliminate as many of the <=2 values as possible. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_ap_data(df):\n",
    "    \n",
    "    df1 = df.copy()\n",
    "    df1 = df1[['ID', 'Category', 'American Indian or Alaska Native', 'Asian',\n",
    "             'Hawaiian/ Pacific Islander', 'Hispanic', 'Black', 'White', 'Two or more races', 'Total']]\n",
    "    \n",
    "    races = ['American Indian or Alaska Native', 'Asian',\n",
    "             'Hawaiian/ Pacific Islander', 'Hispanic', 'Black', 'White', 'Two or more races', 'Total']\n",
    "    \n",
    "    for row in range(int(len(df1)/6)):\n",
    "        #print row\n",
    "        \n",
    "        for race in races:\n",
    "            if df1.loc[6*row+1, race] == '0.00':\n",
    "                df1.loc[6*row + 3, race] = 0\n",
    "                df1.loc[6*row + 4, race] = 0\n",
    "                \n",
    "        for col in races:\n",
    "            if df1.loc[6*row:6*row+5, col].tolist().count('<=2') == 1:\n",
    "                spot = df1.loc[6*row:6*row+5, col].tolist().index('<=2')\n",
    "            \n",
    "                passed_test_row = [6*row + 3,6*row + 4]\n",
    "                passed_test_row.remove(6*row+spot)\n",
    "                if 0 <= float(df1.loc[6*row + 1, col]) - float(df1.loc[passed_test_row[0], col]) <3:\n",
    "                    df1.loc[6*row+spot,col] = float(df1.loc[6*row + 1, col]) - float(df1.loc[passed_test_row[0], col])\n",
    "                    \n",
    "        for j in [3, 4]:\n",
    "            if df1.loc[6*row+j, 'Total'] != '<=2':\n",
    "                values = df1.loc[6*row+j, ['American Indian or Alaska Native', 'Asian', 'Hawaiian/ Pacific Islander', \n",
    "                                          'Hispanic', 'Black', 'White', 'Two or more races']]\n",
    "                #print values\n",
    "                values = [float(value) for value in values if value != '<=2']\n",
    "                #print values\n",
    "                if sum(values) == float(df1.loc[6*row+j, 'Total']):\n",
    "                    for col in ['American Indian or Alaska Native', 'Asian', 'Hawaiian/ Pacific Islander', 'Hispanic', \n",
    "                                'Black', 'White', 'Two or more races']:\n",
    "                        if df1.loc[6*row+j, col] == '<=2':\n",
    "                            df1.loc[6*row+j,col] = 0\n",
    "                            \n",
    "            if df1.loc[6*row+j, 'Total'] == '<=2':\n",
    "                values = df1.loc[6*row+j, ['American Indian or Alaska Native', 'Asian', 'Hawaiian/ Pacific Islander', \n",
    "                                          'Hispanic', 'Black', 'White', 'Two or more races']]\n",
    "                values = [float(value) for value in values if value != '<=2']\n",
    "                if sum(values) == 2:\n",
    "                    df1.loc[6*row+j, 'Total'] = 2\n",
    "                    for col in ['American Indian or Alaska Native', 'Asian', 'Hawaiian/ Pacific Islander', 'Hispanic', \n",
    "                                'Black', 'White', 'Two or more races']:\n",
    "                        if df1.loc[6*row+j, col] == '<=2':\n",
    "                            df1.loc[6*row+j, col] = 0\n",
    "        \n",
    "    return df1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recognizing that a single pass through the dataframe with extract_ap_data may resolve only some of the missing data that could (possibly) be resolved, we pass our AP dataframes through twice in a attempt to maximize the missing data that can be filled in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_ap_edited = extract_ap_data(extract_ap_data(milwaukee_ap))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "vegas_ap_edited = extract_ap_data(extract_ap_data(vegas_ap))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, for each of Milwaukee and Las Vegas, I want to produce a summary dataframe that looks like the following:\n",
    "\n",
    "|Race/Ethnicity|Total Enrollment in AP Classes|Taking AP tests|Passing some AP tests|Passing no AP tests|Total Enrollment|\n",
    "|---|---|---|---|---|---|\n",
    "|Black (LB)| | | | | |\n",
    "|Black (UB)| | | | | |\n",
    "|Hispanic (LB)| | | | | |\n",
    "|Hispanic (UB)| | | | | |\n",
    "|Asian/Pacific Islander (LB)| | | | | |\n",
    "|Asian/Pacific Islander (UB)| | | | | |\n",
    "|White (LB)| | | | | |\n",
    "|White (UB| | | | | |\n",
    "|Total (LB)| | | | | |\n",
    "|Total (UB| | | | | |\n",
    "\n",
    "Note that, due to some uncertainty in the data (places where I was unable to interpolate to replace a <=2 value), there are lower and upper bounds (LB and UB) given for both ```Passing some AP tests``` and ```Passing no AP tests```."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_ap_summary = pd.DataFrame(0, columns = ['Enrollment in AP classes', 'Taking AP tests',\n",
    "                                                 'Passing some AP tests', 'Passing no AP tests', 'Total Enrollment'],\n",
    "                                   index = ['Native American (LB)', 'Native American (UB)','Black (LB)', 'Black (UB)', 'Hispanic (LB)', 'Hispanic (UB)', \n",
    "                                           'Asian/Pacific Islander (LB)', 'Asian/Pacific Islander (UB)',\n",
    "                                           'White (LB)', 'White (UB)', 'Total (LB)', 'Total (UB)'])\n",
    "\n",
    "vegas_ap_summary = pd.DataFrame(0, columns = ['Enrollment in AP classes', 'Taking AP tests',\n",
    "                                                 'Passing some AP tests', 'Passing no AP tests', 'Total Enrollment'],\n",
    "                                   index = ['Native American (LB)', 'Native American (UB)','Black (LB)', 'Black (UB)', 'Hispanic (LB)', 'Hispanic (UB)', \n",
    "                                           'Asian/Pacific Islander (LB)', 'Asian/Pacific Islander (UB)',\n",
    "                                           'White (LB)', 'White (UB)', 'Total (LB)', 'Total (UB)'])\n",
    "\n",
    "race_dict = {'Native American': ['American Indian or Alaska Native'],'Black': ['Black'], 'Hispanic': ['Hispanic'], \n",
    "             'Asian/Pacific Islander': ['Asian', 'Hawaiian/ Pacific Islander'], 'White': ['White'], 'Total': ['Total']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lower_upper(value):\n",
    "    \n",
    "    try:\n",
    "        return float(value), float(value)\n",
    "    \n",
    "    except:\n",
    "        if value == '<=2':\n",
    "            return 0.0, 2.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Enrollment in AP classes</th>\n",
       "      <th>Taking AP tests</th>\n",
       "      <th>Passing some AP tests</th>\n",
       "      <th>Passing no AP tests</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Native American (LB)</th>\n",
       "      <td>16.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Native American (UB)</th>\n",
       "      <td>16.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black (LB)</th>\n",
       "      <td>1011.0</td>\n",
       "      <td>591.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>546.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black (UB)</th>\n",
       "      <td>1011.0</td>\n",
       "      <td>591.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>546.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic (LB)</th>\n",
       "      <td>535.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>225.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic (UB)</th>\n",
       "      <td>535.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander (LB)</th>\n",
       "      <td>172.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander (UB)</th>\n",
       "      <td>172.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White (LB)</th>\n",
       "      <td>274.0</td>\n",
       "      <td>219.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White (UB)</th>\n",
       "      <td>274.0</td>\n",
       "      <td>219.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total (LB)</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>1364.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>971.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total (UB)</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>1364.0</td>\n",
       "      <td>325.0</td>\n",
       "      <td>975.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Enrollment in AP classes  Taking AP tests  \\\n",
       "Native American (LB)                             16.0              6.0   \n",
       "Native American (UB)                             16.0              6.0   \n",
       "Black (LB)                                     1011.0            591.0   \n",
       "Black (UB)                                     1011.0            591.0   \n",
       "Hispanic (LB)                                   535.0            411.0   \n",
       "Hispanic (UB)                                   535.0            411.0   \n",
       "Asian/Pacific Islander (LB)                     172.0            133.0   \n",
       "Asian/Pacific Islander (UB)                     172.0            133.0   \n",
       "White (LB)                                      274.0            219.0   \n",
       "White (UB)                                      274.0            219.0   \n",
       "Total (LB)                                     2012.0           1364.0   \n",
       "Total (UB)                                     2012.0           1364.0   \n",
       "\n",
       "                             Passing some AP tests  Passing no AP tests  \\\n",
       "Native American (LB)                           4.0                  0.0   \n",
       "Native American (UB)                           4.0                  0.0   \n",
       "Black (LB)                                    55.0                546.0   \n",
       "Black (UB)                                    61.0                546.0   \n",
       "Hispanic (LB)                                162.0                225.0   \n",
       "Hispanic (UB)                                170.0                229.0   \n",
       "Asian/Pacific Islander (LB)                   18.0                104.0   \n",
       "Asian/Pacific Islander (UB)                   22.0                104.0   \n",
       "White (LB)                                   101.0                 96.0   \n",
       "White (UB)                                   111.0                 98.0   \n",
       "Total (LB)                                   311.0                971.0   \n",
       "Total (UB)                                   325.0                975.0   \n",
       "\n",
       "                             Total Enrollment  \n",
       "Native American (LB)                        0  \n",
       "Native American (UB)                        0  \n",
       "Black (LB)                                  0  \n",
       "Black (UB)                                  0  \n",
       "Hispanic (LB)                               0  \n",
       "Hispanic (UB)                               0  \n",
       "Asian/Pacific Islander (LB)                 0  \n",
       "Asian/Pacific Islander (UB)                 0  \n",
       "White (LB)                                  0  \n",
       "White (UB)                                  0  \n",
       "Total (LB)                                  0  \n",
       "Total (UB)                                  0  "
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for school in range(int(len(milwaukee_ap_edited)/6)):\n",
    "    \n",
    "    # AP Enrollment\n",
    "    \n",
    "    for race in milwaukee_ap_summary.index.tolist():\n",
    "        temp_sum = 0\n",
    "        for i in range(len(race_dict[race[:-5]])):\n",
    "            temp_sum += float(milwaukee_ap_edited.loc[school*6, race_dict[race[:-5]][i]])\n",
    "        milwaukee_ap_summary.loc[race, 'Enrollment in AP classes'] += temp_sum\n",
    "        \n",
    "    # Taking Tests\n",
    "    \n",
    "    for race in milwaukee_ap_summary.index.tolist():\n",
    "        temp_sum = 0\n",
    "        for i in range(len(race_dict[race[:-5]])):\n",
    "            temp_sum += float(milwaukee_ap_edited.loc[school*6+1, race_dict[race[:-5]][i]])\n",
    "        milwaukee_ap_summary.loc[race, 'Taking AP tests'] += temp_sum\n",
    "        \n",
    "    # Passing Tests\n",
    "    \n",
    "    for race in milwaukee_ap_summary.index.tolist():\n",
    "        if \"(LB)\" in race:\n",
    "            temp_sum = 0\n",
    "            for i in range(len(race_dict[race[:-5]])):\n",
    "                temp_sum += lower_upper(milwaukee_ap_edited.loc[school*6+3, race_dict[race[:-5]][i]])[0]\n",
    "            milwaukee_ap_summary.loc[race, 'Passing some AP tests'] += temp_sum\n",
    "        else: # (UB) in race\n",
    "            temp_sum = 0\n",
    "            for i in range(len(race_dict[race[:-5]])):\n",
    "                temp_sum += lower_upper(milwaukee_ap_edited.loc[school*6+3, race_dict[race[:-5]][i]])[1]\n",
    "            milwaukee_ap_summary.loc[race, 'Passing some AP tests'] += temp_sum\n",
    "\n",
    "    # Passing no Tests\n",
    "    \n",
    "    for race in milwaukee_ap_summary.index.tolist():\n",
    "        if \"(LB)\" in race:\n",
    "            temp_sum = 0\n",
    "            for i in range(len(race_dict[race[:-5]])):\n",
    "                temp_sum += lower_upper(milwaukee_ap_edited.loc[school*6+4, race_dict[race[:-5]][i]])[0]\n",
    "            milwaukee_ap_summary.loc[race, 'Passing no AP tests'] += temp_sum\n",
    "        else: # (UB) in race\n",
    "            temp_sum = 0\n",
    "            for i in range(len(race_dict[race[:-5]])):\n",
    "                temp_sum += lower_upper(milwaukee_ap_edited.loc[school*6+4, race_dict[race[:-5]][i]])[1]\n",
    "            milwaukee_ap_summary.loc[race, 'Passing no AP tests'] += temp_sum\n",
    "\n",
    "milwaukee_ap_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Enrollment in AP classes</th>\n",
       "      <th>Taking AP tests</th>\n",
       "      <th>Passing some AP tests</th>\n",
       "      <th>Passing no AP tests</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Native American (LB)</th>\n",
       "      <td>26.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Native American (UB)</th>\n",
       "      <td>26.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black (LB)</th>\n",
       "      <td>313.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black (UB)</th>\n",
       "      <td>313.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic (LB)</th>\n",
       "      <td>1355.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>435.0</td>\n",
       "      <td>456.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic (UB)</th>\n",
       "      <td>1355.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>435.0</td>\n",
       "      <td>456.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander (LB)</th>\n",
       "      <td>778.0</td>\n",
       "      <td>637.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander (UB)</th>\n",
       "      <td>778.0</td>\n",
       "      <td>637.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White (LB)</th>\n",
       "      <td>1828.0</td>\n",
       "      <td>1327.0</td>\n",
       "      <td>908.0</td>\n",
       "      <td>409.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White (UB)</th>\n",
       "      <td>1828.0</td>\n",
       "      <td>1327.0</td>\n",
       "      <td>908.0</td>\n",
       "      <td>409.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total (LB)</th>\n",
       "      <td>4597.0</td>\n",
       "      <td>3284.0</td>\n",
       "      <td>1951.0</td>\n",
       "      <td>1178.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total (UB)</th>\n",
       "      <td>4597.0</td>\n",
       "      <td>3284.0</td>\n",
       "      <td>1953.0</td>\n",
       "      <td>1178.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Enrollment in AP classes  Taking AP tests  \\\n",
       "Native American (LB)                             26.0             14.0   \n",
       "Native American (UB)                             26.0             14.0   \n",
       "Black (LB)                                      313.0            183.0   \n",
       "Black (UB)                                      313.0            183.0   \n",
       "Hispanic (LB)                                  1355.0            900.0   \n",
       "Hispanic (UB)                                  1355.0            900.0   \n",
       "Asian/Pacific Islander (LB)                     778.0            637.0   \n",
       "Asian/Pacific Islander (UB)                     778.0            637.0   \n",
       "White (LB)                                     1828.0           1327.0   \n",
       "White (UB)                                     1828.0           1327.0   \n",
       "Total (LB)                                     4597.0           3284.0   \n",
       "Total (UB)                                     4597.0           3284.0   \n",
       "\n",
       "                             Passing some AP tests  Passing no AP tests  \\\n",
       "Native American (LB)                           2.0                  0.0   \n",
       "Native American (UB)                           4.0                  0.0   \n",
       "Black (LB)                                    58.0                 96.0   \n",
       "Black (UB)                                    62.0                 96.0   \n",
       "Hispanic (LB)                                435.0                456.0   \n",
       "Hispanic (UB)                                435.0                456.0   \n",
       "Asian/Pacific Islander (LB)                  447.0                160.0   \n",
       "Asian/Pacific Islander (UB)                  447.0                160.0   \n",
       "White (LB)                                   908.0                409.0   \n",
       "White (UB)                                   908.0                409.0   \n",
       "Total (LB)                                  1951.0               1178.0   \n",
       "Total (UB)                                  1953.0               1178.0   \n",
       "\n",
       "                             Total Enrollment  \n",
       "Native American (LB)                        0  \n",
       "Native American (UB)                        0  \n",
       "Black (LB)                                  0  \n",
       "Black (UB)                                  0  \n",
       "Hispanic (LB)                               0  \n",
       "Hispanic (UB)                               0  \n",
       "Asian/Pacific Islander (LB)                 0  \n",
       "Asian/Pacific Islander (UB)                 0  \n",
       "White (LB)                                  0  \n",
       "White (UB)                                  0  \n",
       "Total (LB)                                  0  \n",
       "Total (UB)                                  0  "
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for school in range(int(len(vegas_ap_edited)/6)):\n",
    "    \n",
    "    # AP Enrollment\n",
    "    \n",
    "    for race in vegas_ap_summary.index.tolist():\n",
    "        temp_sum = 0\n",
    "        for i in range(len(race_dict[race[:-5]])):\n",
    "            temp_sum += float(vegas_ap_edited.loc[school*6, race_dict[race[:-5]][i]])\n",
    "        vegas_ap_summary.loc[race, 'Enrollment in AP classes'] += temp_sum\n",
    "        \n",
    "    # Taking Tests\n",
    "    \n",
    "    for race in vegas_ap_summary.index.tolist():\n",
    "        temp_sum = 0\n",
    "        for i in range(len(race_dict[race[:-5]])):\n",
    "            temp_sum += float(vegas_ap_edited.loc[school*6+1, race_dict[race[:-5]][i]])\n",
    "        vegas_ap_summary.loc[race, 'Taking AP tests'] += temp_sum\n",
    "        \n",
    "    # Passing Tests\n",
    "    \n",
    "    for race in vegas_ap_summary.index.tolist():\n",
    "        if \"(LB)\" in race:\n",
    "            temp_sum = 0\n",
    "            for i in range(len(race_dict[race[:-5]])):\n",
    "                temp_sum += lower_upper(vegas_ap_edited.loc[school*6+3, race_dict[race[:-5]][i]])[0]\n",
    "            vegas_ap_summary.loc[race, 'Passing some AP tests'] += temp_sum\n",
    "        else: # (UB) in race\n",
    "            temp_sum = 0\n",
    "            for i in range(len(race_dict[race[:-5]])):\n",
    "                temp_sum += lower_upper(vegas_ap_edited.loc[school*6+3, race_dict[race[:-5]][i]])[1]\n",
    "            vegas_ap_summary.loc[race, 'Passing some AP tests'] += temp_sum\n",
    "\n",
    "    # Passing no Tests\n",
    "    \n",
    "    for race in vegas_ap_summary.index.tolist():\n",
    "        if \"(LB)\" in race:\n",
    "            temp_sum = 0\n",
    "            for i in range(len(race_dict[race[:-5]])):\n",
    "                temp_sum += lower_upper(vegas_ap_edited.loc[school*6+4, race_dict[race[:-5]][i]])[0]\n",
    "            vegas_ap_summary.loc[race, 'Passing no AP tests'] += temp_sum\n",
    "        else: # (UB) in race\n",
    "            temp_sum = 0\n",
    "            for i in range(len(race_dict[race[:-5]])):\n",
    "                temp_sum += lower_upper(vegas_ap_edited.loc[school*6+4, race_dict[race[:-5]][i]])[1]\n",
    "            vegas_ap_summary.loc[race, 'Passing no AP tests'] += temp_sum\n",
    "\n",
    "vegas_ap_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that here I have left the columns for Total Enrollment completely blank. This is due to the fact that the enrollments that I am given in the AP dataframes are for all high school grades combined. Since I am interested here in seniors (in order to have the best chance for comparison), I will pull the total enrollment data that I need from the ```national_enrollments_12``` dataframe, filtering my data by using the school codes from ```milwaukee_ap_edited``` and ```vegas_ap_edited```."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "vegas_codes = set(vegas_ap_edited['ID'].tolist())\n",
    "vegas_codes = [str(code) for code in vegas_codes]\n",
    "\n",
    "milwaukee_codes = set(milwaukee_ap_edited['ID'].tolist())\n",
    "milwaukee_codes = [str(code) for code in milwaukee_codes]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for las vegas\n",
    "\n",
    "to_keep = []\n",
    "for i in range(len(national_enrollments_12)):\n",
    "    if national_enrollments_12.loc[i, 'NCESSCH'] in vegas_codes:\n",
    "        to_keep.append(i)\n",
    "        \n",
    "vegas_12 = national_enrollments_12.loc[to_keep]\n",
    "vegas_12.reset_index(drop = True, inplace = True)\n",
    "\n",
    "# for milwaukee\n",
    "\n",
    "to_keep = []\n",
    "for i in range(len(national_enrollments_12)):\n",
    "    if national_enrollments_12.loc[i, 'NCESSCH'] in milwaukee_codes:\n",
    "        to_keep.append(i)\n",
    "        \n",
    "milwaukee_12 = national_enrollments_12.loc[to_keep]\n",
    "milwaukee_12.reset_index(drop = True, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NCESSCH</th>\n",
       "      <th>G12</th>\n",
       "      <th>AM12M</th>\n",
       "      <th>AM12F</th>\n",
       "      <th>AS12M</th>\n",
       "      <th>AS12F</th>\n",
       "      <th>HI12M</th>\n",
       "      <th>HI12F</th>\n",
       "      <th>BL12M</th>\n",
       "      <th>BL12F</th>\n",
       "      <th>WH12M</th>\n",
       "      <th>WH12F</th>\n",
       "      <th>HP12M</th>\n",
       "      <th>HP12F</th>\n",
       "      <th>TR12M</th>\n",
       "      <th>TR12F</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>550004202234</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>550005002637</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>550006402496</td>\n",
       "      <td>66</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>22</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>550006602865</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>550006902920</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        NCESSCH G12 AM12M AM12F AS12M AS12F HI12M HI12F BL12M BL12F WH12M  \\\n",
       "0  550004202234  37     0     0     0     0     0     0    18    19     0   \n",
       "1  550005002637  34     0     1     0     0    10     2     5     6     4   \n",
       "2  550006402496  66     0     0     3     2    22    31     0     1     2   \n",
       "3  550006602865  16     0     0     0     0     0     0     8     8     0   \n",
       "4  550006902920   2     0     0     0     0     1     0     0     0     0   \n",
       "\n",
       "  WH12F HP12M HP12F TR12M TR12F  \n",
       "0     0     0     0     0     0  \n",
       "1     6     0     0     0     0  \n",
       "2     4     0     0     1     0  \n",
       "3     0     0     0     0     0  \n",
       "4     1     0     0     0     0  "
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_12.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "race_dict = {'AM12': 'Native American', 'AS12' : 'Asian/Pacific Islander', 'HP12' : 'Asian/Pacific Islander',\n",
    "             'BL12' : 'Black', 'WH12' : 'White', 'HI12' : 'Hispanic', 'G1' : 'Total'}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(milwaukee_12)):\n",
    "    for j in milwaukee_12.columns.tolist()[1:14]:\n",
    "        milwaukee_ap_summary.loc[\"\".join([race_dict[j[:-1]],' (LB)']),'Total Enrollment']+=float(milwaukee_12.loc[i,j]) \n",
    "        milwaukee_ap_summary.loc[\"\".join([race_dict[j[:-1]],' (UB)']),'Total Enrollment']+=float(milwaukee_12.loc[i,j]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(vegas_12)):\n",
    "    for j in vegas_12.columns.tolist()[1:14]:\n",
    "        vegas_ap_summary.loc[\"\".join([race_dict[j[:-1]],' (LB)']),'Total Enrollment']+=float(vegas_12.loc[i,j]) \n",
    "        vegas_ap_summary.loc[\"\".join([race_dict[j[:-1]],' (UB)']),'Total Enrollment']+=float(vegas_12.loc[i,j]) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this point I have sorted out quite a lot of data, and while that's the primary goal of this particular project, I would like to do something with this other than isolating the data. In particular, I would like to explore two questions. \n",
    "\n",
    "The first is: How does access to AP testing in Milwaukee and Las Vegas compare with access to AP testing nationally? \n",
    "\n",
    "The second is: How do success rates on AP tests in Milwaukee and Las Vegas compare with success rates on AP tests nationally?\n",
    "\n",
    "In order to make these comparisons, we first need to make some observations about the data we have (and the data we don't).\n",
    "\n",
    "1. For the national AP test data, we are given data for the graduating class of 2013, that is to say, the students who were seniors at that time. The number of students reported as having taken AP exams includes (obviously) those students who took exams as seniors, but also those who only took exams in previous years.\n",
    "2. For the city AP test data, we are given data for tests taken in 2013 by students in any year. In other words, we will have to make assumptions about what proportion of the tests were taken by seniors and about how many seniors might have taken tests in prior years but not this year. To aid us here, we have the following data:\n",
    "    - In 2013, [freshmen](http://media.collegeboard.com/digitalServices/pdf/research/2013/2013-Score-Dist-by-Grade-Level.pdf) made up 2.7% of students taking AP exams (and 2.3% of students passing AP exams), while the values for sophmores, juniors, and seniors are 11.9% (11.7%), 37.7% (38.4%), and 45.7% (46.0%) respectively.\n",
    "    - In 2013, there were 1,003,430 2013 high school seniors who took at least one exam in high school. Collectively, they accounted for 3,153,014 AP exams over the course of their high school careers. \n",
    "3. For the national AP test data, we have actual pass rates for AP exams, broken down by race. This means that if, for example, one student took 5 exams and passed 1 and a second took 2 exams and passed both, their collective pass rate would be reported as 3/7, or 43%.\n",
    "4. For the city AP test data, we have only whether a student passed at least one exam, or not. In the above scenerio, our estimated collective pass rate would be reported as 2/2, or 100%. \n",
    "\n",
    "How do we intend to handle these discrepancies? \n",
    "\n",
    "For the question of access, we will give a range of values. At the high end, every AP exam is taken by a senior, so the maximum possible value for seniors taking tests is then simply given by the number of students taking tests. Alternately, perhaps the distribution of tests reflects the national distribution, and furthermore, any student who takes an exam before their senior year also takes an exam their senior year. In this case, we can compute the number of seniors taking exams as 0.457 multiplied by the total number of tests. We expect that this will be a lower bound. More realistically, there will be some students who take an AP test as juniors who fail to do so as seniors, and so our true values are almost certainly located somewhere between these extremes.\n",
    "\n",
    "For the question of success, we will simply observe that the true pass rate for Milwaukee and Las Vegas students is almost unquestionably lower than the rate that we will calculate. In other words, if the value calculated here is higher than or equal to the national value, it tells us nothing. If the value here is significantly lower than the national value, this indicates that the success rate is surely lower for the subgroup in question.\n",
    "\n",
    "At this point we pass to the computation of access rates and success rates for students nationally and for Milwaukee and Las Vegas in particular.\n",
    "\n",
    "We begin with the question of access to AP testing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Native American': 89.11893777427704,\n",
       " 'Asian/Pacific Islander': 478.8756161463653,\n",
       " 'Black': 167.0879758714591,\n",
       " 'White': 266.2554096120264,\n",
       " 'Hispanic': 237.96173455541066,\n",
       " 'Total': 266.44917303383437}"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "race_dict = {'Native American': 'Native American', 'Asian/Pacific Islander' : 'Asian/ Pacific Islander',\n",
    "            'Black': 'Black', 'White': 'White', 'Hispanic': 'Hispanic', 'Total': 'Total'}\n",
    "\n",
    "total_seniors['Asian/ Pacific Islander'] = total_seniors['Asian'] + total_seniors['Pacific Islander']\n",
    "\n",
    "national_tests_per_1000 = {'Native American': 0, 'Asian/Pacific Islander': 0, 'Black': 0, 'White': 0, \n",
    "                           'Hispanic': 0, 'Total':0}\n",
    "\n",
    "for key in national_tests_per_1000.keys():\n",
    "    national_tests_per_1000[key] = ap_by_ethnicity.loc[race_dict[key], 'Students']/total_seniors[race_dict[key]]*1000\n",
    "\n",
    "\n",
    "\n",
    "national_tests_per_1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Native American': 260.8695652173913,\n",
       " 'Asian/Pacific Islander': 511.5384615384615,\n",
       " 'Black': 243.91250515889394,\n",
       " 'White': 425.24271844660194,\n",
       " 'Hispanic': 488.1235154394299,\n",
       " 'Total': 335.21749815679533}"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "upper_milwaukee_access_per_1000 = {'Native American': 0, 'Asian/Pacific Islander': 0, 'Black': 0, 'White': 0, \n",
    "                             'Hispanic': 0, 'Total':0}\n",
    "\n",
    "for key in upper_milwaukee_access_per_1000.keys():\n",
    "    upper_milwaukee_access_per_1000[key] = (milwaukee_ap_summary.loc[\"\".join([key, ' (LB)']), 'Taking AP tests']/\n",
    "                            milwaukee_ap_summary.loc[\"\".join([key, ' (LB)']), 'Total Enrollment']*1000)\n",
    "\n",
    "\n",
    "upper_milwaukee_access_per_1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Enrollment in AP classes</th>\n",
       "      <th>Taking AP tests</th>\n",
       "      <th>Passing some AP tests</th>\n",
       "      <th>Passing no AP tests</th>\n",
       "      <th>Total Enrollment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Native American (LB)</th>\n",
       "      <td>16.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Native American (UB)</th>\n",
       "      <td>16.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black (LB)</th>\n",
       "      <td>1011.0</td>\n",
       "      <td>591.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>546.0</td>\n",
       "      <td>2423.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black (UB)</th>\n",
       "      <td>1011.0</td>\n",
       "      <td>591.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>546.0</td>\n",
       "      <td>2423.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic (LB)</th>\n",
       "      <td>535.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>162.0</td>\n",
       "      <td>225.0</td>\n",
       "      <td>842.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic (UB)</th>\n",
       "      <td>535.0</td>\n",
       "      <td>411.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>842.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander (LB)</th>\n",
       "      <td>172.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>260.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander (UB)</th>\n",
       "      <td>172.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>260.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White (LB)</th>\n",
       "      <td>274.0</td>\n",
       "      <td>219.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>515.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White (UB)</th>\n",
       "      <td>274.0</td>\n",
       "      <td>219.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>515.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total (LB)</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>1364.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>971.0</td>\n",
       "      <td>4069.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total (UB)</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>1364.0</td>\n",
       "      <td>325.0</td>\n",
       "      <td>975.0</td>\n",
       "      <td>4069.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Enrollment in AP classes  Taking AP tests  \\\n",
       "Native American (LB)                             16.0              6.0   \n",
       "Native American (UB)                             16.0              6.0   \n",
       "Black (LB)                                     1011.0            591.0   \n",
       "Black (UB)                                     1011.0            591.0   \n",
       "Hispanic (LB)                                   535.0            411.0   \n",
       "Hispanic (UB)                                   535.0            411.0   \n",
       "Asian/Pacific Islander (LB)                     172.0            133.0   \n",
       "Asian/Pacific Islander (UB)                     172.0            133.0   \n",
       "White (LB)                                      274.0            219.0   \n",
       "White (UB)                                      274.0            219.0   \n",
       "Total (LB)                                     2012.0           1364.0   \n",
       "Total (UB)                                     2012.0           1364.0   \n",
       "\n",
       "                             Passing some AP tests  Passing no AP tests  \\\n",
       "Native American (LB)                           4.0                  0.0   \n",
       "Native American (UB)                           4.0                  0.0   \n",
       "Black (LB)                                    55.0                546.0   \n",
       "Black (UB)                                    61.0                546.0   \n",
       "Hispanic (LB)                                162.0                225.0   \n",
       "Hispanic (UB)                                170.0                229.0   \n",
       "Asian/Pacific Islander (LB)                   18.0                104.0   \n",
       "Asian/Pacific Islander (UB)                   22.0                104.0   \n",
       "White (LB)                                   101.0                 96.0   \n",
       "White (UB)                                   111.0                 98.0   \n",
       "Total (LB)                                   311.0                971.0   \n",
       "Total (UB)                                   325.0                975.0   \n",
       "\n",
       "                             Total Enrollment  \n",
       "Native American (LB)                     23.0  \n",
       "Native American (UB)                     23.0  \n",
       "Black (LB)                             2423.0  \n",
       "Black (UB)                             2423.0  \n",
       "Hispanic (LB)                           842.0  \n",
       "Hispanic (UB)                           842.0  \n",
       "Asian/Pacific Islander (LB)             260.0  \n",
       "Asian/Pacific Islander (UB)             260.0  \n",
       "White (LB)                              515.0  \n",
       "White (UB)                              515.0  \n",
       "Total (LB)                             4069.0  \n",
       "Total (UB)                             4069.0  "
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_ap_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Native American': 119.21739130434783,\n",
       " 'Asian/Pacific Islander': 233.7730769230769,\n",
       " 'Black': 111.46801485761453,\n",
       " 'White': 194.3359223300971,\n",
       " 'Hispanic': 223.07244655581948,\n",
       " 'Total': 153.19439665765546}"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lower_milwaukee_access_per_1000 = {'Native American': 0, 'Asian/Pacific Islander': 0, 'Black': 0, 'White': 0, \n",
    "                             'Hispanic': 0, 'Total':0}\n",
    "\n",
    "for key in lower_milwaukee_access_per_1000.keys():\n",
    "    lower_milwaukee_access_per_1000[key] = upper_milwaukee_access_per_1000[key]*0.457\n",
    "    \n",
    "lower_milwaukee_access_per_1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Native American': 297.8723404255319,\n",
       " 'Asian/Pacific Islander': 952.1674140508221,\n",
       " 'Black': 176.98259187620891,\n",
       " 'White': 476.48114901256736,\n",
       " 'Hispanic': 311.3109650639917,\n",
       " 'Total': 415.9594680177328}"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "upper_vegas_access_per_1000 = {'Native American': 0, 'Asian/Pacific Islander': 0, 'Black': 0, 'White': 0, \n",
    "                             'Hispanic': 0, 'Total':0}\n",
    "\n",
    "for key in upper_vegas_access_per_1000.keys():\n",
    "    upper_vegas_access_per_1000[key] = (vegas_ap_summary.loc[\"\".join([key, ' (LB)']), 'Taking AP tests']/\n",
    "                            vegas_ap_summary.loc[\"\".join([key, ' (LB)']), 'Total Enrollment']*1000)\n",
    "\n",
    "\n",
    "upper_vegas_access_per_1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Native American': 136.12765957446808,\n",
       " 'Asian/Pacific Islander': 435.14050822122573,\n",
       " 'Black': 80.88104448742747,\n",
       " 'White': 217.7518850987433,\n",
       " 'Hispanic': 142.26911103424422,\n",
       " 'Total': 190.0934768841039}"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lower_vegas_access_per_1000 = {'Native American': 0, 'Asian/Pacific Islander': 0, 'Black': 0, 'White': 0, \n",
    "                             'Hispanic': 0, 'Total':0}\n",
    "\n",
    "for key in lower_vegas_access_per_1000.keys():\n",
    "    lower_vegas_access_per_1000[key] = upper_vegas_access_per_1000[key]*0.457\n",
    "    \n",
    "lower_vegas_access_per_1000"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems worthwhile to reiterate precisely what is meant here by upper and lower access per 1000 students. Because our city data gives us information on the total number of AP exams taken in a given academic year by students of specified races, we need to assume that these students have the potential to come from any of the four classes, and most particularly, that at least some of them come from the junior class. Now, there are a range of possibilities here. The most extreme on one end is that every student who took an AP exam that year was in fact a senior, and that in previous years there was no student from that class who took an AP exam. On the other end, we assume that 45.7% of students (of each race) taking AP exams are seniors (corresponding to the portion of test takers who are seniors at the national level.) In the most extreme version of this, we further assume that all not seniors who took tests this year will become seniors who take tests in subsequent years. In other words, we assume that it is accurate to assume that 45.7% of the total test takers is an accurate picture of the access to AP exams for this particular class. \n",
    "\n",
    "It is worth noting that neither of these two possibilities is likely to be strictly accurate. There are almost certainly at least a few students who take AP exams in a year other than their senior year. Furthermore, there are likely to be students who take AP exams in their junior (or possibly sophomore) year who do not take any AP exams their senior year. \n",
    "\n",
    "In other words, what we have is a range of possible values, where the true value is probably somewhere in the middle. Here I'm going to take a stab at predicting the true value, working with the assumption that it is probably closer to the lower estimate than it is to the upper estimate. As a result, I will take as my predicted values:\n",
    "$$ \\textrm{predicted access} = 0.7 \\times \\textrm{lower access} + 0.3 \\times \\textrm{upper access}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lower Access</th>\n",
       "      <th>Upper Access</th>\n",
       "      <th>Predicted Access</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Native American</th>\n",
       "      <td>136.128</td>\n",
       "      <td>297.872</td>\n",
       "      <td>184.651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander</th>\n",
       "      <td>435.141</td>\n",
       "      <td>952.167</td>\n",
       "      <td>590.249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black</th>\n",
       "      <td>80.881</td>\n",
       "      <td>176.983</td>\n",
       "      <td>109.712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White</th>\n",
       "      <td>217.752</td>\n",
       "      <td>476.481</td>\n",
       "      <td>295.371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic</th>\n",
       "      <td>142.269</td>\n",
       "      <td>311.311</td>\n",
       "      <td>192.982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>190.093</td>\n",
       "      <td>415.959</td>\n",
       "      <td>257.853</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Lower Access Upper Access Predicted Access\n",
       "Native American             136.128      297.872          184.651\n",
       "Asian/Pacific Islander      435.141      952.167          590.249\n",
       "Black                        80.881      176.983          109.712\n",
       "White                       217.752      476.481          295.371\n",
       "Hispanic                    142.269      311.311          192.982\n",
       "Total                       190.093      415.959          257.853"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vegas_ap_access = pd.DataFrame(columns = ['Lower Access', 'Upper Access', 'Predicted Access'])\n",
    "\n",
    "for key in lower_vegas_access_per_1000.keys():\n",
    "    vegas_ap_access.loc[key, 'Lower Access'] = lower_vegas_access_per_1000[key]\n",
    "    vegas_ap_access.loc[key, 'Upper Access'] = upper_vegas_access_per_1000[key]\n",
    "    vegas_ap_access.loc[key, 'Predicted Access'] = (0.7*lower_vegas_access_per_1000[key]\n",
    "                                                         + 0.3*upper_vegas_access_per_1000[key])\n",
    "    \n",
    "vegas_ap_access"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lower Access</th>\n",
       "      <th>Upper Access</th>\n",
       "      <th>Predicted Access</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Native American</th>\n",
       "      <td>119.217</td>\n",
       "      <td>260.87</td>\n",
       "      <td>161.713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander</th>\n",
       "      <td>233.773</td>\n",
       "      <td>511.538</td>\n",
       "      <td>317.103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black</th>\n",
       "      <td>111.468</td>\n",
       "      <td>243.913</td>\n",
       "      <td>151.201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White</th>\n",
       "      <td>194.336</td>\n",
       "      <td>425.243</td>\n",
       "      <td>263.608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic</th>\n",
       "      <td>223.072</td>\n",
       "      <td>488.124</td>\n",
       "      <td>302.588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>153.194</td>\n",
       "      <td>335.217</td>\n",
       "      <td>207.801</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Lower Access Upper Access Predicted Access\n",
       "Native American             119.217       260.87          161.713\n",
       "Asian/Pacific Islander      233.773      511.538          317.103\n",
       "Black                       111.468      243.913          151.201\n",
       "White                       194.336      425.243          263.608\n",
       "Hispanic                    223.072      488.124          302.588\n",
       "Total                       153.194      335.217          207.801"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "milwaukee_ap_access = pd.DataFrame(columns = ['Lower Access', 'Upper Access', 'Predicted Access'])\n",
    "\n",
    "for key in lower_milwaukee_access_per_1000.keys():\n",
    "    milwaukee_ap_access.loc[key, 'Lower Access'] = lower_milwaukee_access_per_1000[key]\n",
    "    milwaukee_ap_access.loc[key, 'Upper Access'] = upper_milwaukee_access_per_1000[key]\n",
    "    milwaukee_ap_access.loc[key, 'Predicted Access'] = (0.7*lower_milwaukee_access_per_1000[key]\n",
    "                                                         + 0.3*upper_milwaukee_access_per_1000[key])\n",
    "    \n",
    "milwaukee_ap_access"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, I want to ensure that my data is in the same order across all of my access dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Predicted Access</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander</th>\n",
       "      <td>478.875616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic</th>\n",
       "      <td>237.961735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black</th>\n",
       "      <td>167.087976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White</th>\n",
       "      <td>266.255410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Native American</th>\n",
       "      <td>89.118938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total</th>\n",
       "      <td>266.449173</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Predicted Access\n",
       "Asian/Pacific Islander        478.875616\n",
       "Hispanic                      237.961735\n",
       "Black                         167.087976\n",
       "White                         266.255410\n",
       "Native American                89.118938\n",
       "Total                         266.449173"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "national_tests_per_1000a = (pd.DataFrame(national_tests_per_1000, index = ['Predicted Access'])).transpose()\n",
    "national_tests_per_1000a = national_tests_per_1000a.reindex(['Asian/Pacific Islander', 'Hispanic', 'Black', 'White', \n",
    "                             'Native American', 'Total'])\n",
    "    \n",
    "national_tests_per_1000a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "milwaukee_ap_access = milwaukee_ap_access.reindex(['Asian/Pacific Islander', 'Hispanic', 'Black', 'White', \n",
    "                             'Native American', 'Total'])\n",
    "vegas_ap_access = vegas_ap_access.reindex(['Asian/Pacific Islander', 'Hispanic', 'Black', 'White', \n",
    "                             'Native American', 'Total'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 6\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (15,8))\n",
    "\n",
    "vegas = vegas_ap_access['Predicted Access']\n",
    "milwaukee = milwaukee_ap_access['Predicted Access']\n",
    "national = national_tests_per_1000a['Predicted Access']\n",
    "\n",
    "milwaukee_upper = milwaukee_ap_access['Upper Access']\n",
    "milwaukee_lower = milwaukee_ap_access['Lower Access']\n",
    "\n",
    "vegas_upper = vegas_ap_access['Upper Access']\n",
    "vegas_lower = vegas_ap_access['Lower Access']\n",
    "\n",
    "#vegasStd = (vegas_ap_access['Upper Access'] - vegas_ap_access['Predicted Access']).tolist()\n",
    "#milwaukeeStd = (milwaukee_ap_access['Upper Access'] - vegas_ap_access['Predicted Access']).tolist()\n",
    "\n",
    "ind = np.arange(N)    # the x locations for the groups\n",
    "width = 0.25       # the width of the bars: can also be len(x) sequence\n",
    "\n",
    "p1 = ax.bar(ind, vegas, width, label = 'Las Vegas')\n",
    "p2 = ax.bar(ind + width, milwaukee, width, label = 'Milwaukee')\n",
    "p3 = ax.bar(ind + 2*width, national, width, label = 'National')\n",
    "\n",
    "p4 = ax.vlines(ind + width, milwaukee_lower, milwaukee_upper, colors='k', linestyles='solid', label='Range')\n",
    "p5 = ax.vlines(ind, vegas_lower, vegas_upper, colors='k', linestyles='solid')\n",
    "\n",
    "          \n",
    "plt.ylabel('Students per 1000')\n",
    "plt.title('AP testing access by race')\n",
    "plt.xticks(ind + width, ('Asian', 'Hispanic', 'Black', 'White', \n",
    "                             'Native American', 'Total'))\n",
    "plt.legend()\n",
    "\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some explanatory text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next up (and something like finally), I want to compute and compare pass rates for all of these. I already have pass rates broken down by race for the national data (where it is actually broken down on a test by test basis). |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "ap_by_ethnicity.index = ['Native American', 'Asian/Pacific Islander', 'Black', 'White',\n",
    "                         'Hispanic', 'Other', 'No Response', 'Total']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>National</th>\n",
       "      <th>Milwaukee</th>\n",
       "      <th>Las Vegas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Native American (LB)</th>\n",
       "      <td>44.5</td>\n",
       "      <td>66.7</td>\n",
       "      <td>14.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Native American (UB)</th>\n",
       "      <td>44.5</td>\n",
       "      <td>66.7</td>\n",
       "      <td>28.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black (LB)</th>\n",
       "      <td>28.4</td>\n",
       "      <td>9.3</td>\n",
       "      <td>31.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black (UB)</th>\n",
       "      <td>28.4</td>\n",
       "      <td>10.3</td>\n",
       "      <td>33.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic (LB)</th>\n",
       "      <td>41.3</td>\n",
       "      <td>39.4</td>\n",
       "      <td>48.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hispanic (UB)</th>\n",
       "      <td>41.3</td>\n",
       "      <td>41.4</td>\n",
       "      <td>48.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander (LB)</th>\n",
       "      <td>67.5</td>\n",
       "      <td>13.5</td>\n",
       "      <td>70.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian/Pacific Islander (UB)</th>\n",
       "      <td>67.5</td>\n",
       "      <td>16.5</td>\n",
       "      <td>70.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White (LB)</th>\n",
       "      <td>63.7</td>\n",
       "      <td>46.1</td>\n",
       "      <td>68.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White (UB)</th>\n",
       "      <td>63.7</td>\n",
       "      <td>50.7</td>\n",
       "      <td>68.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total (LB)</th>\n",
       "      <td>57.3</td>\n",
       "      <td>22.8</td>\n",
       "      <td>59.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total (UB)</th>\n",
       "      <td>57.3</td>\n",
       "      <td>23.8</td>\n",
       "      <td>59.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             National  Milwaukee  Las Vegas\n",
       "Native American (LB)             44.5       66.7       14.3\n",
       "Native American (UB)             44.5       66.7       28.6\n",
       "Black (LB)                       28.4        9.3       31.7\n",
       "Black (UB)                       28.4       10.3       33.9\n",
       "Hispanic (LB)                    41.3       39.4       48.3\n",
       "Hispanic (UB)                    41.3       41.4       48.3\n",
       "Asian/Pacific Islander (LB)      67.5       13.5       70.2\n",
       "Asian/Pacific Islander (UB)      67.5       16.5       70.2\n",
       "White (LB)                       63.7       46.1       68.4\n",
       "White (UB)                       63.7       50.7       68.4\n",
       "Total (LB)                       57.3       22.8       59.4\n",
       "Total (UB)                       57.3       23.8       59.5"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pass_rates = pd.DataFrame(0, columns = ['National', 'Milwaukee', 'Las Vegas'], \n",
    "                             index = milwaukee_ap_summary.index.tolist())\n",
    "\n",
    "for i in milwaukee_ap_summary.index.tolist():\n",
    "    pass_rates.loc[i, 'Milwaukee'] = round(milwaukee_ap_summary.loc[i, 'Passing some AP tests']/\n",
    "                                      milwaukee_ap_summary.loc[i, 'Taking AP tests'] * 100,1)\n",
    "    \n",
    "for i in vegas_ap_summary.index.tolist():\n",
    "    pass_rates.loc[i, 'Las Vegas'] = round(vegas_ap_summary.loc[i, 'Passing some AP tests']/\n",
    "                                      vegas_ap_summary.loc[i, 'Taking AP tests'] * 100,1)\n",
    "    \n",
    "for i in pass_rates.index.tolist():\n",
    "    pass_rates.loc[i, 'National'] = round(ap_by_ethnicity.loc[i[:-5], 'Pass Rate'],1)\n",
    "\n",
    "pass_rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 6\n",
    "\n",
    "lb = [item for item in pass_rates.index.tolist() if '(LB)' in item]\n",
    "ub = [item for item in pass_rates.index.tolist() if '(UB)' in item]\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (15,8))\n",
    "\n",
    "vegas_lb = pass_rates['Las Vegas'].loc[lb].tolist()\n",
    "vegas_ub = pass_rates['Las Vegas'].loc[ub].tolist()\n",
    "milwaukee_lb = pass_rates['Milwaukee'].loc[lb].tolist()\n",
    "milwaukee_ub = pass_rates['Milwaukee'].loc[ub].tolist()\n",
    "national = pass_rates['National'].loc[ub].tolist()\n",
    "\n",
    "#vegasStd = (vegas_ap_access['Upper Access'] - vegas_ap_access['Predicted Access']).tolist()\n",
    "#milwaukeeStd = (milwaukee_ap_access['Upper Access'] - vegas_ap_access['Predicted Access']).tolist()\n",
    "\n",
    "ind = np.arange(N)    # the x locations for the groups\n",
    "width = 0.25       # the width of the bars: can also be len(x) sequence\n",
    "\n",
    "\n",
    "p2 = ax.bar(ind, vegas_lb, width, color = '#7FB3D5'  ,label = 'Las Vegas')\n",
    "p1 = ax.hlines(vegas_ub,ind-width/2, ind+ width/2, colors='k', linestyles='solid', label = 'Upper Bound')\n",
    "\n",
    "p4 = ax.hlines(milwaukee_ub, ind + width/2, ind + 3* width/2, colors='k', linestyles='solid')\n",
    "p3 = ax.bar(ind + width, milwaukee_lb, width, color = '#943126', label = 'Milwaukee')\n",
    "\n",
    "p5 = ax.bar(ind + 2*width, national, width, color = '#F1C40F', label = 'National')\n",
    "\n",
    "plt.ylabel('Pass Rate (%)')\n",
    "plt.title('AP Testing Success Rates by Race/Ethnicity')\n",
    "plt.xticks(ind + width, ('Native American', 'Black', 'Hispanic', 'Asian/Pacific Islander', \n",
    "                             'White', 'Total'))\n",
    "plt.legend()\n",
    "\n",
    "plt.show()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "explanatory text..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
